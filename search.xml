<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchLinux安装</title>
    <url>/2020/11/28/ArchLinux%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- 参考博客：
https://kagarinokiriestudio.github.io/ArchLinuxTutorial/#/rookie/basic_install -->

<p>Arch Linux 基础安装十九步<br>从安装最基础的 ArchLinux 系统开始，由于当前已经是 2020 年，安装将全部以 UEFI+GPT 的形式进行。传统方式不再赘述。<br>官方文档: 安装指南<br>相关视频链接： 2020ArchLinux 安装教程 视频中可看到全部操作步骤 强烈建议观看视频配合文字学习</p>
<p>1.刻录启动优盘<br>准备一个 2G 以上的优盘，刻录一个安装启动盘。</p>
<p>Linux 下可以直接用 dd 命令进行刻录</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">dd <span class="hljs-attribute">bs</span>=4M <span class="hljs-attribute">if</span>=/path/to/archlinux.iso <span class="hljs-attribute">of</span>=/dev/sdx <span class="hljs-attribute">status</span>=progress <span class="hljs-attribute">oflag</span>=sync<br><span class="hljs-attribute">bs</span>=4M 指定一个较为合理的文件输入输出块大小。<br><span class="hljs-attribute">status</span>=progress 用来输出刻录过程总的信息。<br><span class="hljs-attribute">oflag</span>=sync 用来控制写入数据时的行为特征。确保命令结束时数据及元数据真正写入磁盘，而不是刚写入缓存就返回。<br></code></pre></div></td></tr></table></figure>
<p>Windows 下推荐使用Power ISO或者Rufus进行光盘刻录。二者皆为免费使用的软件。具体操作请自行查阅，都非常简单。</p>
<p>2.检测是否为 UEFI<br><code>ls /sys/firmware/efi/efivars</code><br>若输出了一堆东西，说明已在 UEFI 模式。否则请确认你的启动方式是否为 UEFI。<br>3.连接网络<br>无线连接:</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">iwctl                           <span class="hljs-comment">#进入交互式命令行</span><br>device list                     <span class="hljs-comment">#列出设备名，比如无线网卡看到叫 wlan0</span><br>station wlan0 scan              <span class="hljs-comment">#扫描网络</span><br>station wlan0 get-networks      <span class="hljs-comment">#列出网络 比如想连接CMCC-5AQ7这个无线</span><br>station wlan0 connect CMCC-<span class="hljs-number">5</span>AQ7 <span class="hljs-comment">#进行连接 输入密码即可</span><br><span class="hljs-keyword">exit</span>                            <span class="hljs-comment">#成功后exit退出</span><br></code></pre></div></td></tr></table></figure>
<p>有线连接:<br>正常来说，只要插上一个已经联网的路由器分出的网线(DHCP)，直接就能联网。若不行可以尝试输入如下命令再看看</p>
<p><code>systemctl start dhcpcd</code><br>4.测试网络<br><code>ping www.baidu.com</code><br>若能看到数据返回，即说明已经联网，ctrl+c 终止退出当前命令。</p>
<p>5.更新系统时钟</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">timedatectl </span><span class="hljs-built_in">set-ntp</span> <span class="hljs-string">true </span>   <span class="hljs-comment">#将系统时间与网络时间进行同步</span><br><span class="hljs-string">timedatectl </span><span class="hljs-string">status </span>         <span class="hljs-comment">#检查服务状态</span><br></code></pre></div></td></tr></table></figure>
<p>6.更换国内镜像源加快下载速度<br><code>vim /etc/pacman.d/mirrorlist    #不会vim的同学，此处注意视频中的vim操作步骤</code><br>放在最上面的是会使用的更新源,把中科大 ustc 的或者清华的放在最上面</p>
<p>7.分区<br>这里总共设置四个分区，可以满足绝大多数人的需求</p>
<p>根目录： /<br>用户主目录： /home<br>EFI： /boot/EFI<br>交换分区: swap</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">lsblk                       <span class="hljs-comment">#显示分区情况</span><br>parted /dev/sdx             <span class="hljs-comment">#执行parted，进行磁盘类型变更</span><br>(parted)mktable<br>New disk <span class="hljs-keyword">label</span><span class="bash"> <span class="hljs-built_in">type</span>? gpt    <span class="hljs-comment">#输入gpt 将磁盘类型转换为gpt</span></span><br>quit                        <span class="hljs-comment">#最后quit退出parted命令行交互</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">fdisk <span class="hljs-regexp">/dev/</span>sda              <span class="hljs-comment">#进入fdisk工具对磁盘进行操作</span><br>g                           <span class="hljs-comment">#创建gpt格式分区表</span><br>n                           <span class="hljs-comment">#创建新的分区（Partition number设置为1，敲两次回车）</span><br>+<span class="hljs-number">300</span>m                       <span class="hljs-comment">#300MB大小的分区（boot分区）</span><br>+<span class="hljs-number">2</span>g                         <span class="hljs-comment">#swap分区（剩下的可以设置home和跟目录的大小）</span><br>p                           <span class="hljs-comment">#输出分区表信息</span><br>t                           <span class="hljs-comment">#修改分区的Type（此处的1设置为EFI System，3设置为Linux swap）</span><br>w                           <span class="hljs-comment">#写入保存</span><br>fdisk -l                    <span class="hljs-comment">#复查</span><br></code></pre></div></td></tr></table></figure>
<p>8.格式化</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">mkfs.vfat  <span class="hljs-regexp">/dev/</span>sda1            <span class="hljs-comment">#efi分区  挂载在/mnt/boot/EFI    300m</span><br>mkfs.ext4  <span class="hljs-regexp">/dev/</span>sda2            <span class="hljs-comment">#/分区</span><br>mkfs.ext4  <span class="hljs-regexp">/dev/</span>sda3            <span class="hljs-comment">#/home分区</span><br><span class="hljs-comment">#磁盘若有数据会问 'proceed any way?' y回车 即可</span><br>mkswap -f <span class="hljs-regexp">/dev/</span>sda4             <span class="hljs-comment">#格式化swap</span><br>swapon <span class="hljs-regexp">/dev/</span>sda4               <span class="hljs-comment">#打开swap分区</span><br></code></pre></div></td></tr></table></figure>
<p>9.挂载<br>在挂载时，挂载是有顺序的，需要从根目录开始挂载</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">mount <span class="hljs-string">/dev/sda2</span>  <span class="hljs-string">/mnt</span><br>mkdir <span class="hljs-string">/mnt/home</span><br>mount <span class="hljs-string">/dev/sda3</span> <span class="hljs-string">/mnt/home</span><br>mkdir -p <span class="hljs-string">/mnt/boot/EFI</span><br>mount <span class="hljs-string">/dev/sda1</span> <span class="hljs-string">/mnt/boot/EFI</span><br></code></pre></div></td></tr></table></figure>
<p>10.安装系统<br>基础包<br><code>pacstrap /mnt base base-devel linux linux-firmware #base-devel在某些AUR包的安装是必须的</code><br>功能性软件<br><code>pacstrap /mnt dhcpcd iwd vim sudo                #一个有线所需 一个无线所需 一个编辑器  iwd也需要dhcpcd</code><br>11.生产 fstab<br>fstab 用来定义磁盘分区<br><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code><br>复查一下 /mnt/etc/fstab 确保没有错误<br><code>cat /mnt/etc/fstab</code><br>12.change root<br>把环境切换到新系统的/mnt 下</p>
<p><code>arch-chroot /mnt</code><br>13.时区<br><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime     #为/usr下合适的时区在/etc下创建符号连接</code><br>14.硬件时间设置<br>将系统时间同步到硬件时间</p>
<p><code>hwclock --systohc</code><br>15.设置 Locale<br>Locale 决定了软件使用的语言、书写习惯和字符集。<br>编辑 <code>/etc/locale.gen</code>，去掉 en_US.UTF-8 行的注释符号（#）。<br>然后使用如下命令生成 locale。<br><code>locale-gen</code><br>向 /etc/locale.conf 输入内容<br><code>echo &#39;LANG=en_US.UTF-8&#39;  &gt; /etc/locale.conf</code><br>16.为 root 用户设置密码<br><code>passwd root</code><br>17.安装微码<br><code>pacman -S intel-ucode   #Intel</code><br><code>pacman -S amd-ucode     #AMD</code><br>18.安装引导程序</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">pacman -S grub efibootmgr   <span class="hljs-comment">#grub是启动引导器，efibootmgr被 grub 脚本用来将启动项写入 NVRAM。</span><br>grub-install <span class="hljs-params">--target=x86_64-efi</span> <span class="hljs-params">--efi-directory=/boot/EFI</span> <span class="hljs-params">--bootloader-id=GRUB</span> <span class="hljs-comment">#取名为GRUB 并将grubx64.efi安装到之前的指定位置</span><br>grub-mkconfig -o <span class="hljs-string">/boot/grub/grub.cfg</span>    <span class="hljs-comment">#生成GRUB所需的配置文件</span><br></code></pre></div></td></tr></table></figure>
<p>19.完成安装</p>
<figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-keyword">exit</span>                <span class="hljs-comment"># 退回安装环境#</span><br>umount -R  /mnt     <span class="hljs-comment"># 卸载新分区</span><br>reboot              <span class="hljs-comment"># 重启</span><br></code></pre></div></td></tr></table></figure>
<p>重启后，开启 dhcp 服务，即可连接网络</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">systemctl <span class="hljs-builtin-name">enable</span> dhcpcd #开机自动启动dhcp<br>systemctl start dhcpcd  #立即启动dhcp<span class="hljs-built_in"><br>ping </span>www.baidu.com      #测试网络连接<br></code></pre></div></td></tr></table></figure>
<p>若为无线链接，则需要启动 iwd 才可以使用 iwctl 连接网络</p>
<figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> iwd <span class="hljs-comment">#立即启动iwd</span><br>iwctl               <span class="hljs-comment">#和之前的方式一样，连接无线网络</span><br></code></pre></div></td></tr></table></figure>
<p>到此基础安装已经完成</p>
<p>1.确保系统为最新<br><code>pacman -Syyu    #升级系统中全部包</code><br>2.准备非 root 用户<br>添加用户，比如新增加的用户叫 wallen<br><code>useradd -m -g users -G wheel -s /bin/bash wallen  #wheel附加组可sudo进行提权</code><br>设置新用户 wallen 的密码<br><code>passwd wallen</code><br>编辑 sudo 文件<br><code>EDITOR=vim visudo</code><br>找到这样的一行,把前面的注释符号#去掉，:wq保存并退出即可。<br><code>#%wheel ALL=(ALL) ALL</code><br>这里稍微解释一下 %wheel 代表是 wheel 组，百分号是前缀</p>
<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">ALL</span>= 代表在所有主机上都生效(如果把同样的sudoers文件下发到了多个主机上)<br>(<span class="hljs-keyword">ALL</span>) 代表可以成为任意目标用户<br><span class="hljs-keyword">ALL</span> 代表可以执行任意命令<br></code></pre></div></td></tr></table></figure>
<p>一个更详细的例子:</p>
<p><code>%mailadmin   snow,rain=(root) /usr/sbin/postfix, /usr/sbin/postsuper, /usr/bin/doveadm</code><br><code>nobody       ALL=(root) NOPASSWD: /usr/sbin/rndc reload</code><br>组 mailadmin 可以作为 root 用户，执行一些邮件服务器控制命令。可以在 “snow” 和 “rain”这两台主机上执行<br>用户 nobody 可以以 root 用户执行rndc reload命令。可以在所有主机上执行。同时可以不输入密码。(正常来说 sudo 都是要求输入调用方的密码的)</p>
<p>3.安装 KDE Plasma 桌面环境<br><code>pacman -S plasma-meta konsole dolphin bash-completion #安装plasma-meta元软件包 直接回车回车</code><br>4.配置 greeter sddm（开机欢迎界面）<br><code>systemctl enable sddm</code><br>5.开启 32 位支持库与 ArchLinuxCN 支持库<br><code>sudo vim /etc/pacman.conf</code><br>去掉[multilib]一节中两行的注释，来开启 32 位库支持。<br>在文档结尾处加入下面的文字，来开启 ArchLinuxCN 源。</p>
<figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[archlinuxcn]</span><br><span class="hljs-attr">Server</span> = http://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br></code></pre></div></td></tr></table></figure>
<p>上面服务器的地址是清华的，也可用下面中科大的<br><code>Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</code><br>最后:wq 保存退出，刷新 pacman 数据库<br><code>sudo pacman -Syyu</code><br>重启电脑，即可看到欢迎界面，输入新用户的密码即可登录桌面</p>
<p>6.安装基础功能包<br>进入桌面后，搜索 konsole。它是 KDE 桌面环境默认的命令行终端。<br>接下来我们安装一些基础功能包</p>
<figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">sudo systemctl <span class="hljs-keyword">disable</span> iwd                                                  <span class="hljs-meta">#确保iwd处于关闭状态，其无线连接会与NetworkManager冲突</span><br>sudo systemctl <span class="hljs-keyword">stop</span> iwd                                                     <span class="hljs-meta">#同上</span><br>sudo systemctl <span class="hljs-keyword">enable</span> --now NetworkManager                                  <span class="hljs-meta">#确保先启动NetworkManager，并进行网络连接</span><br>sudo pacman -S ntfs<span class="hljs-number">-3</span>g                                                      <span class="hljs-meta">#识别NTFS格式的硬盘</span><br>sudo pacman -S adobe-source-han-serif-cn-<span class="hljs-built_in">fonts</span> wqy-zenhei                   <span class="hljs-meta">#安装几个开源中文字体</span><br>sudo pacman -S noto-<span class="hljs-built_in">fonts</span> noto-<span class="hljs-built_in">fonts</span>-cjk noto-<span class="hljs-built_in">fonts</span>-emoji noto-<span class="hljs-built_in">fonts</span>-extra  <span class="hljs-meta">#安装谷歌开源字体</span><br>sudo pacman -S firefox chromium                                             <span class="hljs-meta">#安装常用的火狐、谷歌浏览器</span><br>sudo pacman -S archlinuxcn-keyring                                          <span class="hljs-meta">#cn源中的签名</span><br>sudo pacman -S yay                                                          <span class="hljs-meta">#yay命令可以让用户安装AUR中的软件(yay在archLinuxCn)</span><br></code></pre></div></td></tr></table></figure>
<p>7.设置系统为中文<br>打开 系统设置 &gt; 区域设置 &gt; 语言 中加入中文，重新登陆即可。</p>
<p>8.安装输入法<br>Fcitx5 官方文档<br>中文及日文输入法均体验良好。</p>
<figure class="highlight hsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs hsp">sudo pacman -S fcitx5-im <span class="hljs-meta">#基础包组</span><br>sudo pacman -S fcitx5-chinese-addons <span class="hljs-meta">#官方中文输入引擎</span><br>sudo pacman -S fcitx5-pinyin-moegirl <span class="hljs-meta">#萌娘百科词库 二刺猿必备(ArchLinuxCn)</span><br>sudo pacman -S fcitx5-material-<span class="hljs-keyword">color</span> <span class="hljs-meta">#主题</span><br></code></pre></div></td></tr></table></figure>
<p>设置环境变量 编辑文件 <code>vim ~/.pam_environment</code> 加入以下内容。konsole 以及 dophin 都需要这些环境变量，倒是 chrome 和 firefox 都不需要就可以输入中文</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">INPUT_METHOD <span class="hljs-attribute">DEFAULT</span>=fcitx5<br>GTK_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx5<br>QT_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx5<br>XMODIFIERS <span class="hljs-attribute">DEFAULT</span>=\@im=fcitx5<br></code></pre></div></td></tr></table></figure>
<p>打开 系统设置 &gt; 区域设置 &gt; 输入法</p>
<p>点击添加输入法，找到简体中文下的 Pinyin ，点击添加</p>
<p>找到 配置附加组件 拉到下面找到 Pinyin 点选云拼音和在程序中显示预编辑文本 最后应用<br>找到 classic user interface 在主题里选择一个你喜欢的颜色 最后应用</p>
<p>注销，重新登陆，就可以发现已经可以在各个软件中输入中文了</p>
<h1 id="解决VMware-tools无法安装"><a href="#解决VMware-tools无法安装" class="headerlink" title="解决VMware tools无法安装"></a>解决VMware tools无法安装</h1><p>原因：安装的open-vm-tools与VMware不匹配<br>1、卸载open-vm-tools<br><code>sudo pacman -R open-vm-tools</code><br>2、下载vmwaretools补丁<br><code>git clone https://github.com/rasa/vmware-tools-patches.git</code><br>3、进入vmware-tools-patches目录<br><code>cd vmware-tools-patches</code><br>4、运行补丁<br><code>sudo ./patched-open-vm-tools.sh</code><br>5、重启<br><code>reboot</code></p>
<h1 id="避坑指南"><a href="#避坑指南" class="headerlink" title="避坑指南"></a>避坑指南</h1><h2 id="系统更新时："><a href="#系统更新时：" class="headerlink" title="系统更新时："></a>系统更新时：</h2><ol>
<li>磁盘空间不足<br>清理软件包：<figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">sudo</span> <span class="hljs-string">pacman -Sc</span><br><span class="hljs-attr">sudo</span> <span class="hljs-string">pacman -Scc</span><br></code></pre></div></td></tr></table></figure></li>
<li>想阻止某个软件包更新<br>我们去/etc/pacman.conf中查找<code>＃IgnorePkg　=</code>，在后面添加软件包名<figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">IgnorePkg</span>　= fctic5-*                 <span class="hljs-comment">#多个软件包用空格隔开</span><br><span class="hljs-attr">IgnoreGroup</span> = xfce4                   <span class="hljs-comment">#不升级软件包组</span><br></code></pre></div></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用</title>
    <url>/2020/10/18/Git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Git概述"><a href="#Git概述" class="headerlink" title="Git概述"></a>Git概述</h2><p>Git是分布式版本控制系统(Distributed Version Control System,简称DVCS).分为两种类型的仓库:<br>本地仓库和远程仓库.</p>
<ul>
<li><p>本地仓库: 是在开发人员自己电脑上的Git仓库</p>
</li>
<li><p>远程仓库: 是在远程服务器上的Git仓库</p>
</li>
<li><p>Clone:克隆，就是将远程仓库复制到本地</p>
</li>
<li><p>Push:推送，就是将本地仓库代码上传到远程仓库</p>
</li>
<li><p>Pull:拉取，就是将远程仓库代码下载到本地仓库</p>
</li>
</ul>
<p>下载地址：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p>
<h4 id="工作流程如下"><a href="#工作流程如下" class="headerlink" title="工作流程如下:"></a>工作流程如下:</h4><p>1.从远程仓库中克隆代码到本地仓库<br>2.从本地仓库中checkout代码然后进行代码修改<br>3.在提交前先将代码提交到暂存区<br>4.提交到本地仓库。本地仓库中保存修改的各个历史版本<br><img src="../images/git/git_1.png" srcset="/img/loading.gif" lazyload alt="图片加载失败！"></p>
<h2 id="Git代码托管服务"><a href="#Git代码托管服务" class="headerlink" title="Git代码托管服务"></a>Git代码托管服务</h2><h4 id="常用的Git代码托管服务"><a href="#常用的Git代码托管服务" class="headerlink" title="常用的Git代码托管服务"></a>常用的Git代码托管服务</h4><p>前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢?我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub.码云、GitLab等。</p>
<ul>
<li>gitHub (地址: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>) 是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管,故名gitHub</li>
<li>码云(地址: <a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a>) 是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub,码云速度会更快</li>
<li>GitLab (地址: <a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a>) 是一个用于仓库管理系统的开源项目,使用Git作为代码管理工具,并在此基础上搭建起来的web服务</li>
</ul>
<h4 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h4><h6 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h6><p>当安装Git后首先要做的事情是设用户名称和email地处。这是非常重要的，因为每次Git提交都会使用该用户信息。</p>
<ol>
<li><p>设置用户信息<br>git config –global user.name “itcast”<br>git config –global user.email “<a href="mailto:hello@itcast.cn">hello@itcast.cn</a>“</p>
</li>
<li><p>查看配置信息<br>git config –list<br>git config user.name</p>
</li>
</ol>
<p><strong>通过上面的命令设置的信息会保存在~/.gitconfig文件中</strong></p>
<h6 id="获取git仓库"><a href="#获取git仓库" class="headerlink" title="获取git仓库"></a>获取git仓库</h6><p>要使用Git对我们的代码进行版本控制，首先需要获得Git仓库<br>获取Git仓库通常有两种方式:<br>1.在本地初始化一个Git仓库<br>    - 首先进入仓库目录（若没有需新建）<br>    - git init</p>
<ol start="2">
<li>从远程仓库克隆<ul>
<li>git clone 远程仓库地址</li>
</ul>
</li>
</ol>
<h6 id="工作目录、暂存区以及版本库概念"><a href="#工作目录、暂存区以及版本库概念" class="headerlink" title="工作目录、暂存区以及版本库概念"></a>工作目录、暂存区以及版本库概念</h6><p>版本库:前面看到的.git隐藏文件夹就是版本库，版本库中存储了很多配信息日志信息和文件版本信息等<br>工作目录(工作区) :包含.git文件夹的目录就是工作目录，主要用于存放开发的代码<br>暂存区: .git文件夹中有很多文件,其中有一个index文件就是暂存区, 也可以叫做stage.暂存区是-个临时保存修改文件的地方<br><img src="../images/git/git_2.png" srcset="/img/loading.gif" lazyload alt="图片加载失败！"></p>
<h6 id="Git工作目录下文件的两种状态"><a href="#Git工作目录下文件的两种状态" class="headerlink" title="Git工作目录下文件的两种状态"></a>Git工作目录下文件的两种状态</h6><p>Git工作目录下的文件存在两种状态:</p>
<ol>
<li>untracked未跟踪(未被纳入版本控制)</li>
<li>tracked已跟踪(被纳入版本控制)<ul>
<li>Unmodified末修改状态</li>
<li>Modified已修改状态</li>
<li>Staged已暂存状态</li>
</ul>
</li>
</ol>
<p>这些文件的状态会随着我们执行Git的命令发生变化</p>
<h6 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h6><ul>
<li><strong>git status</strong>：查看文件状态</li>
<li><strong>git status -s</strong>：使输出信息更加简洁</li>
<li><strong>git add hello.txt</strong>：将未跟踪的文件加入暂存区</li>
<li><strong>git reset hello.txt</strong>：将暂存区的文件取消暂存</li>
<li><strong>git commit -m “init hello.txt”</strong>：<strong>将暂存区的文件</strong>修改提交到本地仓库（-m后的参数是日志信息，可以任意写）</li>
<li><strong>git rm</strong>：删除文件（只是删除工作区的文件，需要commit提交）</li>
<li>git log：查看日志记录</li>
</ul>
<p>将文件添加至忽略列表<br>一般我们总会有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件,比如日志文件，或者编译过程中创建的临时文件等。在这种情况下，我们可以在工作目录中创建一个名为 .gitignore的文件(文件名称固定)，列出要忽略的文件模式。下面是一个示例: </p>
<figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal"><span class="hljs-comment"># no .a files</span><br>*.a<br><span class="hljs-comment"># but do track lib.a, even though you're ignoring .a files above</span><br>!<span class="hljs-class"><span class="hljs-keyword">lib</span>.<span class="hljs-title">a</span></span><br><span class="hljs-comment"># only ignore the TODO file in the current directory, not subdir/ TODO</span><br><span class="hljs-regexp">/TODO<br># ignore all files in the build/</span> directory <br>build/<br><span class="hljs-comment"># ignore doc/notes. txt， but not doc/server/arch. txt</span><br>doc/*.txt<br><span class="hljs-comment"># ignore all .pdf files in the doc/ directory</span><br>doc/**<span class="hljs-regexp">/*.pdf</span><br></code></pre></div></td></tr></table></figure>

<h6 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h6><ol>
<li>git remote：查看远程仓库<br> 如果想查看已经配置的远程仓库服务器可以运行<code>git remote</code>命令(git remote -v)。它会列出指定的每一个远程服务器的简写。<br> 如果已经克隆了远程仓库，那么至少应该能看到<strong>origin</strong>,这是Git克隆的仓库服务器的默认名字。</li>
<li>git remote add shortname url：添加一个新的远程Git仓库,同时指定一个可以引用的简写</li>
<li>git clone url：从远程仓库克隆</li>
<li>git remote rm shortname：移除无效的远程仓库(仅移除本地仓库，远程的并不影响)</li>
<li>从远程仓库中抓取与拉取<ul>
<li>git fetch是从远程仓库获取最新版本到本地仓库，不会自动merge</li>
<li>git pull是从远程仓库获取最新版本井merge到本地仓库</li>
</ul>
</li>
</ol>
<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">mkdir</span> repo1<br><span class="hljs-keyword">cd</span>  repo1<br>git init<br><span class="hljs-comment">//首先关联远程仓库</span><br>git remote add origin https:<span class="hljs-comment">//github.com/****.github.io.git</span><br><span class="hljs-comment">//抓取（默认是origin）</span><br>git featch<br><span class="hljs-comment">//抓取（默认是origin）</span><br>git featch origin master<br><span class="hljs-comment">//手动合并</span><br>git <span class="hljs-keyword">merge</span> origin/master<br></code></pre></div></td></tr></table></figure>
<figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-comment">//拉取（不需要手动合并）</span><br>git pull<br></code></pre></div></td></tr></table></figure>
<p>注意:如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库,并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报<br>错(fatal: refusing to merge unrelated histories) , 解决此问题可以在git pull命令后加入参数-allow-unrelated-histories<br>6. git push [remote-name] [branch-name]：推送到远程仓库（把本地分支branch-name推送到远程仓库地址remote-name）</p>
<h6 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h6><p>几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。Git 的master分支并不是一一个特殊分支。 它跟其它分支没有区别。之所以几乎每一个仓库都有master分支,是因为git init命令默认创建它,并且大多数人都懒得去改动它。<br>分支的相关命令具体如下:</p>
<ul>
<li><strong>git branch</strong>：查看本地分支</li>
<li><strong>git branch -f</strong>：列出所有远程分支</li>
<li><strong>git branch -a</strong>：列出所有本地和远程分支</li>
<li><strong>git branch b1</strong>：创建分支（以当前所在分支为基础进行创建）</li>
<li><strong>git checkout b1</strong>：切换分支</li>
<li><strong>git push origin b1</strong>：推送分支到远程仓库</li>
<li><strong>git merge b1</strong>：把b1分支合并到master分支（首先要cd到master分支下）。如果合并失败，需要手动修改冲突的文件，并使用<code>git add</code>命令标识冲突已解决</li>
<li><strong>git branch -d b1</strong>：删除分支（如果要删除的分支中进行了一些开发动作, 此时执行上面的删除命令并不会删除分支,如果坚持要删除此分支,可以将命令中的-d参数改为-D）</li>
<li><strong>git push origin -d branchName</strong>：删除远程仓库的分支</li>
</ul>
<h6 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h6><p>像其他版本控制系统(VCS)一样, Git 可以给历史中的某一个提交打上标签,以示重要。比较有代表性的是人们会使用这个功能来标记发布结点(v1.0、v1.2等)。标签指的是某个分支某个特定时间点的状态。通过标签,可以很方便的切换到标记时的状态。<br>    - <strong>git tag</strong>：查看标签<br>    - <strong>git tag [tagname]</strong>：创建标签（一般使用版本号）<br>    - <strong>git show [tagname]</strong>：查看tag信息<br>    - <strong>git push [remote] [tag]</strong>：将指定标签推送至远程仓库<br>    - <strong>git checkout -b [branch] [tag]</strong>：检出标签（新建一个分支，指向某个tag，即可在这个标签的基础上进行开发）<br>    - <strong>git tag -d [tag]</strong>：删除本地标签<br>    - <strong>git push origin :refs/tags/[tag]</strong>：删除本地标签</p>
<h2 id="在IDEA中使用Git"><a href="#在IDEA中使用Git" class="headerlink" title="在IDEA中使用Git"></a>在IDEA中使用Git</h2><h4 id="在IDEA中配置Git"><a href="#在IDEA中配置Git" class="headerlink" title="在IDEA中配置Git"></a>在IDEA中配置Git</h4><p>安装好ItellijJIDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安装位置则需要手动配置FGit的路径。<br>选择File–&gt;Settings打开设置窗口，找到Version Control下的git选项:<br><img src="images/git/git_idea_01.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h4 id="在idea中使用Git"><a href="#在idea中使用Git" class="headerlink" title="在idea中使用Git"></a>在idea中使用Git</h4><ol>
<li>创建工程并将工程添加至Git<br><img src="images/git/git_idea_02.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><img src="images/git/git_idea_03.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></li>
<li>将文件添加到暂存区<br>首先要在项目中添加.gitignore文件，忽略掉部分文件<br><img src="images/git/git_idea_04.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></li>
<li>将文件进行提交（在本地仓库）<br><img src="images/git/git_idea_05.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></li>
<li>将文件推送至远程仓库<br><img src="images/git/git_idea_06.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><img src="images/git/git_idea_07.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></li>
<li>从远程仓库克隆<br><img src="images/git/git_idea_08.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Maven分模块开发</title>
    <url>/2020/10/15/Maven%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="分模块构建maven工程"><a href="#分模块构建maven工程" class="headerlink" title="分模块构建maven工程"></a>分模块构建maven工程</h2><h4 id="分模块构建maven工程分析"><a href="#分模块构建maven工程分析" class="headerlink" title="分模块构建maven工程分析"></a>分模块构建maven工程分析</h4><p>在企业项目开发过程中，由于项目规模庞大，业务复杂,参与的人员比较多, 一般会通过合理的模块拆分将一个大型的项目拆分为N多个小模块，分别进行开发。而且拆分出的模块可以非常容易的被其他模块复用。<br>常见的拆分方式有两种:<br>第一种:按照业务模块进行拆分，每个模块拆分成一个maven工程,例如将一个项目分为用户模块、订单模块、购物车模块等,每个模块对应就是一个maven工程<br>第二种:按照层进行拆分,例如持久层、业务层表现等,每个层对应就是一个maven工程</p>
<a id="more"></a>

<p>不管是上面哪种拆分方式，通常都会提供一个父工程,将一些公共的代码和配置提取到父工程中进行统一管理和配置。<br><img src="/images/maven.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h4 id="maven工程的继承"><a href="#maven工程的继承" class="headerlink" title="maven工程的继承"></a>maven工程的继承</h4><p>在Java语言中，类之间是可以继承的，通过继承，子类就可以引用父类中非private的属性和方法。同样，在maven工程之间也可以继承，子工程继承父工程后，就可以使用在父工程中引入的依赖。继承的目的是为了消除重复代码。</p>
<p>被继承的Mavne项目中的POM部分定义是：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  被继承的maven工程通常称为父工程，其打包方式必须是pom  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.company<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>company-project-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>继承的Mavne项目中的POM的关键部分是：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  继承其他maven父工程的工程通常称为子工程，在pox.xml中通过parent标签进行父工程的继承  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.company<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>company-project-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>company-project-children<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="maven工程的聚合"><a href="#maven工程的聚合" class="headerlink" title="maven工程的聚合"></a>maven工程的聚合</h4><p>在maven工程的pom.xml文件中可以使用<code>&lt;modules&gt;</code>标签将其他maven工程聚合到一起，聚合的目的是为了进行统一操作。<br>例如拆分后的maven工程有多个,如果要进行打包，就需要针对每个工程分别执行打包命令,操作起来非常繁琐。这时就可以使用<code>&lt;modules&gt;</code>标签将这些工程统一聚合到maven工程中，需要打包的时候，只需要在此工程中执行一次打包命令,其下被聚合的工程就都会被打包了。</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.company<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>company-project-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  聚合其他maven工程，聚合与继承无关，即使没有继承关系的项目也可以进行聚合  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../company-project-children<span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>/&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>在分模块开发时，可以在子工程中需要相关jar包时进行导入。</p>
<p><strong>分模块构建的maven工程在部署时部署的是web工程</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Maven依赖冲突</title>
    <url>/2020/10/14/Maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<h2 id="maven依赖冲突"><a href="#maven依赖冲突" class="headerlink" title="maven依赖冲突"></a>maven依赖冲突</h2><p>由于依赖传递现象的存在，spring-webmvc-4.24依赖spring-beans-4.2.4, spring-aop-5.0.2依赖spring-beans-5.0.2,但是发现spring-beans-4.2.4加入到了工程中,而我们希望spring-beans-5.0.2加入工程。这就造成了依赖冲突。</p>
<a id="more"></a>


<h2 id="如何解决maven依赖冲突"><a href="#如何解决maven依赖冲突" class="headerlink" title="如何解决maven依赖冲突"></a>如何解决maven依赖冲突</h2><h4 id="使用maven提供的依赖调解原则"><a href="#使用maven提供的依赖调解原则" class="headerlink" title="使用maven提供的依赖调解原则"></a>使用maven提供的依赖调解原则</h4><ol>
<li>第一声明者优先原则：在pom文件中定义依赖，以先声明的依赖为准。其实就是根据坐标导入的顺序来确定最终使用哪个传递过来的依赖。</li>
<li>路径近者优先原则：在pom文件定义依赖，以路径近者为准。<br>还是上述情况, spring-aop和spring-webmvc都会传递过来spring-beans,那如果直接把spring-beans的依赖直接写到pom文件中,那么项目就不会再使用其他依赖传递来的spring- beans,因为自己直接在pom中定义spring-beans要比其他依赖传递过来的路径要近。</li>
</ol>
<h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>可以使用exclusions标签将传递过来的依赖排除出去</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 排除依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="锁定版本"><a href="#锁定版本" class="headerlink" title="锁定版本"></a>锁定版本</h4><p>采用直接锁定版本的方法确定依赖jar包的版本,版本锁定后则不考虑依赖的声明顺序或依赖的路径,以锁定的版本为准添加到工程中，此方法在企业开发中经常使用。</p>
<p>版本锁定的使用方式:<br>第一步:在dependencyManagement标签中锁定依赖的版本<br>第二步:在dependencies标签中声明需要导入的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--依赖jar包版本锁定，并不会真正导入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--由于已经在dependencyManagement锁定了版本，此处无需在指定version--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>常用的jar包锁定有：</p>
<div class="hljs code-wrapper"><pre><code class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>
  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>
  <span class="tag">&lt;<span class="name">springmvc.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">springmvc.version</span>&gt;</span>
  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span>
<span class="tag">&lt;/<span class="name">properties</span>&gt;</span>

  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>
    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="comment">&lt;!-- Mybaties --&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mybatis.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>
  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>
  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>

    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
      <span class="comment">&lt;!--  ...  --&gt;</span>
    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>

``




</code></pre></div>
]]></content>
  </entry>
  <entry>
    <title>Mybatis整合SSM项目</title>
    <url>/2020/10/08/Mybatis%E6%95%B4%E5%90%88SSM%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><h4 id="原始整合方式环境搭建"><a href="#原始整合方式环境搭建" class="headerlink" title="原始整合方式环境搭建"></a>原始整合方式环境搭建</h4><ol>
<li>搭建数据库，创建数据库表</li>
<li>创建Maven工程</li>
<li>导入Maven坐标</li>
</ol>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol>
<li>编写实体类</li>
<li>编写Mapper接口（可采用注解开发）</li>
<li>编写service接口</li>
<li>编写service接口实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>        SqlSessionFactory sessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        SqlSession sqlSession = sessionFactory.openSession();<br>        AccountMapper mapper = sqlSession.getMapper(AccountMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        List&lt;Account&gt; accountList = mapper.findAll();<br>        sqlSession.close();<br>        <span class="hljs-keyword">return</span> accountList;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ol start="5">
<li>编写controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//查询</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/findAll"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;Account&gt; accountList = accountService.findAll();<br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    modelAndView.addObject(<span class="hljs-string">"accountList"</span>, accountList);<br>    modelAndView.setViewName(<span class="hljs-string">"accountList"</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ol start="6">
<li>编写前端页面</li>
<li>编写相应配置文件<ul>
<li>Spring配置文件: applicationContext.xml</li>
<li>SprngMVC配置文件: spring-mvc.xml</li>
<li>MyBatis映射文件: AccountMapper.xml</li>
<li>MyBatis核心文件: sqlMapConfig.xml</li>
<li>数据库连接信息文件: jdbc.properties</li>
<li>Web.xmI文件: web.xml</li>
<li>日志文件: log4j.properties</li>
</ul>
</li>
</ol>
<p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span><br>         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee<br>                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span><br>         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--spring监听器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springmvc前端控制器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--乱码过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span><br>        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>        <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span><br>        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"<br>       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br>       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--排除controller--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"annotation"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"org.springframework.stereotype.Controller"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>spring-mvc.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span><br>        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>        <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span><br>        <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span><br>        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"<br>       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br>       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<br>       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--组件扫描，主要扫controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat.controller"</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置mvc注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--内部资源视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"resourceViewResolver"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/pages/"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开放静态资源访问权限--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>sqlMapConfig.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"jdbc.properties"</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--定义别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过扫包自动定义别名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top.rainbowcat.domain"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top.rainbowcat.mapper"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--该方法只对需要的实体创建别名--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type="top.rainbowcat.domain.Account" alias="account" /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载映射--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--单独加载--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource="top.rainbowcat.mapper.AccountMapper" /&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--自动扫包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top.rainbowcat.mapper"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>jdbc.properties</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">jdbc.driver=com.mysql.cj.jdbc.Driver<br>jdbc.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/ssm?serverTimezone=GMT</span><br>jdbc.username=root<br>jdbc.password=password<br></code></pre></div></td></tr></table></figure>
<p><strong>log4j.properties</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br>log4j.appender.stdout.Target=System.err<br>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br>log4j.appender.stdout.ConversionPattern=%d&#123;ABSOLUTE&#125;%<span class="hljs-number">5</span>p%c&#123;<span class="hljs-number">1</span>&#125;:%L - %m%n<br>log4j.rootLogger=all, stdout<br></code></pre></div></td></tr></table></figure>


<h4 id="mybatis整合spring"><a href="#mybatis整合spring" class="headerlink" title="mybatis整合spring"></a>mybatis整合spring</h4><p>使用spring来产生mapper并存入容器，在使用时直接从容器当中获取。<br><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span><br>        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>        <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span><br>        <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span><br>        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span><br>        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br>       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<br>       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--排除controller的扫描--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"annotation"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"org.springframework.stereotype.Controller"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:jdbc.properties"</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--配置数据源信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置sessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:sqlMapConfig.xml"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--加载mapper映射，创建mapper实现类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"top.rainbowcat.mapper"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>spring-mvc.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span><br>        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>        <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span><br>        <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span><br>        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"<br>       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br>       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<br>       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--组件扫描，主要扫controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat.controller"</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置mvc注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--内部资源视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"resourceViewResolver"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/pages/"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开放静态资源访问权限--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>sqlMapConfig.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--定义别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过扫包自动定义别名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top.rainbowcat.domain"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top.rainbowcat.mapper"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--该方法只对需要的实体创建别名--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type="top.rainbowcat.domain.Account" alias="account" /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>service层：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>(<span class="hljs-string">"/accountService"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountMapper accountMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Account account)</span> </span>&#123;<br>        accountMapper.save(account);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span>  accountMapper.findAll();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="spring整合事务控制"><a href="#spring整合事务控制" class="headerlink" title="spring整合事务控制"></a>spring整合事务控制</h4><p>需要在applicationContext.xml当中添加如下配置信息：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明式事务控制--&gt;</span><br><span class="hljs-comment">&lt;!--平台事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置事务增强--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"*"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><span class="hljs-comment">&lt;!--事务的aop织入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">"execution(* top.rainbowcat.service.impl.*.*(..))"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Mybatis学习</title>
    <url>/2020/09/21/Mybatis%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="为什么要使用Mybatis"><a href="#为什么要使用Mybatis" class="headerlink" title="为什么要使用Mybatis"></a>为什么要使用Mybatis</h2><p>原始jdbc开发存在的问题如下:<br>①数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能<br>②sql语句在代码中硬编码,造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。<br>③查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置应对.<br>上述问题给出的解决方案:<br>①使用数据库连接池初始化连接资源<br>②将sql语句抽取到xm配置文件中<br>③使用反射、内省等底层技术,自动将实体与表进行属性与字段的自动映射</p>
<a id="more"></a>

<p>●mybatis 是一个优秀的基于java的持久层框架，它内部封装了<br>jdbc, 使开发者只需要关注sql语句本身，而不需要花费精力<br>去处理加载驱动、创建连接、创建statement等繁杂的过程。<br>●mybatis通过xml或注解的方式将要执行的各种statement配<br>置起来，并通过java对象和statement中sql的动态参数进行<br>映射生成最终执行的sql语句。<br>●最后mybati框架执行sql并将结果映射为java对象并返回。采<br>用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了<br>封装，屏蔽了jdbc api底层访问细节,使我们不用与jdbc api<br>打交道，就可以完成对数据库的持久化操作。</p>
<h2 id="开发步骤："><a href="#开发步骤：" class="headerlink" title="开发步骤："></a>开发步骤：</h2><p>①添加MyBatis的坐标<br>②创建user数据表<br>③编写User实体类<br>④编写映射文件UserMapper.xml<br>⑤编写核心文件SqlMapConfig.xml<br>⑥编写测试类</p>
<p>入门案例：<br>导入坐标（Maybits、MySQL）</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>创建实体类<em>user</em><br>编写映射mapper文件</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.orq/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 命名空间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"userMapper"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 命名空间结合id为访问标识  方便调用 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- resultType：查询结果对应的实体类型，方便mybatis进行封装 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"top.rainbowcat.domain.User"</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>编写核心SqlMapConfig文件</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源环境 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/jsp?serverTimezone=GMT"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"top/rainbowcat/mapper/UserMapper.xml"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>简单测试：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作  参数：namespace+id</span><br>        List&lt;Object&gt; userList = sqlSession.selectList(<span class="hljs-string">"userMapper.findAll"</span>);<br>        <span class="hljs-comment">//打印数据</span><br>        System.out.println(userList);<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>Mybatis增删改操作：<br>插入数据：<br><strong>需要注意的是，mybatis的占位符的不是“?”！</strong><br>Sq|语句中使用#(实体属性名)方式引用实体中的属性值</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--参数对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"save"</span> <span class="hljs-attr">parameterType</span>别名=<span class="hljs-string">"top.rainbowcat.domain.Student"</span>&gt;</span><br>    insert into student values(#&#123;sno&#125;, #&#123;sname&#125;, #&#123;ssex&#125;, #&#123;sage&#125;, #&#123;sdept&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>Mybatis执行更新操作需要提交事务（默认不提交）！</strong><br>在映射文件中使用parameterType属性指定要插入的数据类型<br><br>插入操作使用的API是sqlSession.insert(“命名空间id”,实体对象);<br><br>插入操作涉及数据库数据变化，所以要使用sqISession对象显示的提交事务,</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>    <span class="hljs-comment">//模拟数据对象</span><br>    Student student = <span class="hljs-keyword">new</span> Student();<br>    student.setSno(<span class="hljs-string">"201211111"</span>);<br>    student.setSname(<span class="hljs-string">"测试"</span>);<br>    student.setSsex(<span class="hljs-string">"男"</span>);<br>    student.setSage(<span class="hljs-number">20</span>);<br>    student.setSdept(<span class="hljs-string">"AA"</span>);<br><br>    <span class="hljs-comment">//获取核心配置文件</span><br>    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>    SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>    SqlSession sqlSession = sqlSessionFactory.openSession();<br>    sqlSession.insert(<span class="hljs-string">"userMapper.save"</span>, student);<br>    <span class="hljs-comment">//Mybatis执行更新操作需要提交事务（默认不提交）</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>数据更新：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"update"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"top.rainbowcat.domain.Student"</span>&gt;</span><br>    update student set sname=#&#123;sname&#125;, ssex=#&#123;ssex&#125;, sage=#&#123;sage&#125;, sdept=#&#123;sdept&#125; where sno=#&#123;sno&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>删除数据：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 单一条件可以直接写数据类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"delete"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"java.lang.String"</span>&gt;</span><br>    delete from student where sno=#&#123;sno&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="Mybatis核心配置文件、"><a href="#Mybatis核心配置文件、" class="headerlink" title="Mybatis核心配置文件、"></a>Mybatis核心配置文件、</h2><h4 id="MyBatis核心配置文件层级关系"><a href="#MyBatis核心配置文件层级关系" class="headerlink" title="MyBatis核心配置文件层级关系"></a>MyBatis核心配置文件层级关系</h4><h6 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a>configuration配置</h6><ol>
<li>properties属性</li>
</ol>
<p><img src="/images/mybatis/properties.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件, 该标签可以加载额外配的properties文件</p>
<ol>
<li>settings设置</li>
<li>typellases类型别名</li>
</ol>
<p><img src="/images/mybatis/typeAliases.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><img src="/images/mybatis/typeAliases01.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>3. typeHandlers类型处理器<br>4. objectFactory对象工厂<br>5. plugins插件<br>6. environments环境<br>                                                                                                                                                                                          - environment 环境变量<br>    - transactionManager 事务管理器<br>    - dataSource 数据源<br><img src="/images/mybatis/environments.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>其中，事务管理器(transactionManager) 类型有两种:<br>●JDBC:这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。<br>●MANAGED:这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期(比如JEE应用服务器的上下文)。默认情况下它会关闭连接,然而一些容器并不希望这样，此需要将closeConnection属性设置为false来阻止它默认的关闭行为。<br>其中，数据源(dataSource) 类型有三种:<br>●UNPOOLED: 这个数据源的实现只是每次被请求时打开和关闭连接。<br>●POOLED:这种数据源的实现利用“池”的概念将JDBC连接对象组织起来。<br>●JNDI: 这个数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置<br>一个JNDI上下文的引用。</p>
<ol start="8">
<li>databaseldProvider数据库厂商标识</li>
<li>mappers映射器</li>
</ol>
<p>该标签的作用是加载映射的，加载方式有如下几种:</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">●使用相对于类路径的资源引用，例如: <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>= <span class="hljs-string">*org/mybatis/builder/AuthorMapper.xml</span>"/&gt;</span><br>●使用完全限定资源定位符 (URL), 例如:<span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">ur</span>=<span class="hljs-string">/le//mappers/AuthorMapperxmn</span>"/&gt;</span><br>●使用映射器接口实现类的完全限定类名，例如: <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis builder.AuthorMapper*/&gt;<br>●将包内的映射器接口实现全部注册为映射器，例如: &lt;package name="</span><span class="hljs-attr">org.mybatis</span> <span class="hljs-attr">builder</span>*/&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源环境 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"jdbc.properties"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"top/rainbowcat/mapper/UserMapper.xml"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h2 id="Mybatis相关API"><a href="#Mybatis相关API" class="headerlink" title="Mybatis相关API"></a>Mybatis相关API</h2><h4 id="SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="SqlSession工厂构建器SqlSessionFactoryBuilder"></a>SqlSession工厂构建器SqlSessionFactoryBuilder</h4><p>常用API: Sq|SessionF actory build(InputStream inputStream)通过加载mybatis的核心文件的输入流的形式构建一个SqISessionF actory对象</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取核心配置文件</span><br>resource = <span class="hljs-string">"xml配置文件的路径（相对于类加载路径）"</span>;<br>InputStream inputStream = Resources.getResourceAsStream(resource);<br><span class="hljs-comment">//获得session工厂对象</span><br>SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br></code></pre></div></td></tr></table></figure>
<p>其中，Resources工具类，这个类在org.apache.ibatis.io包中。Resources类帮助你从类路径下、文件系统或一个web URL中加载资源文件。</p>
<h4 id="SqlSession工厂对象SqlSessionFactory"><a href="#SqlSession工厂对象SqlSessionFactory" class="headerlink" title="SqlSession工厂对象SqlSessionFactory"></a>SqlSession工厂对象SqlSessionFactory</h4><p>SqlsessionFactory有多个个方法创建Sqlession实例。常用的有如下两个:</p>
<table>
    <tr>
        <th>方法</th>
        <th>说明</th>
    </tr>
    <tr>
        <td>openSession()</td>
        <td>会默认开启一个事务，但事务不会自动提交，也就意味着需要手动提交该事务，更新操作数据才会持久化到数据库中</td>
    </tr>
    <tr>
        <td>openSession(boolean autoCommit)</td>
        <td>参数为是否自动提交，如果设置为true,那么不需要手动提交事务</td>
    </tr>
</table>

<h4 id="SqlSession会话对象"><a href="#SqlSession会话对象" class="headerlink" title="SqlSession会话对象"></a>SqlSession会话对象</h4><p>SqlSession实例在MyBatis中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。<br>执行语句的方法主要有:</p>
<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&lt;T&gt; T selectOne(String <span class="hljs-keyword">statement</span>, <span class="hljs-keyword">Object</span> parameter)<br>&lt;E&gt; List&lt;E&gt; selectList(String <span class="hljs-keyword">statement</span>, <span class="hljs-keyword">Object</span> parameter)<br><span class="hljs-type">int</span> <span class="hljs-keyword">insert</span> (String <span class="hljs-keyword">statement</span>, <span class="hljs-keyword">Object</span> parameter)<br><span class="hljs-type">int</span> uodate (String <span class="hljs-keyword">statement</span>, <span class="hljs-keyword">Object</span> parameter)<br><span class="hljs-type">int</span> <span class="hljs-keyword">delete</span> (String <span class="hljs-keyword">statement</span>, <span class="hljs-keyword">Object</span> parameter)<br></code></pre></div></td></tr></table></figure>
<p>操作事务的方法主要有：</p>
<figure class="highlight isbl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs isbl"><span class="hljs-variable">void</span> <span class="hljs-function"><span class="hljs-title">commit</span>()</span><br><span class="hljs-variable">void</span> <span class="hljs-function"><span class="hljs-title">rollback</span>()</span><br></code></pre></div></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findBySno"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"string"</span>&gt;</span><br>    select * from student where sno=#&#123;sno&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Student student = sqlSession.selectOne(<span class="hljs-string">"userMapper.findBySno"</span>, <span class="hljs-string">"201211111"</span>);<br></code></pre></div></td></tr></table></figure>
<h2 id="Mybatis的Dao层实现"><a href="#Mybatis的Dao层实现" class="headerlink" title="Mybatis的Dao层实现"></a>Mybatis的Dao层实现</h2><h4 id="传统开发方式"><a href="#传统开发方式" class="headerlink" title="传统开发方式"></a>传统开发方式</h4><p>使用传统的dao写法即可(接口)：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        List&lt;Student&gt; studentList = sqlSession.selectList(<span class="hljs-string">"userMapper.findAll"</span>);<br>        <span class="hljs-keyword">return</span> studentList;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="代理开发方式"><a href="#代理开发方式" class="headerlink" title="代理开发方式"></a>代理开发方式</h4><p>采用Mybatis的代理开发方式实现DAO层的开发，这种方式是我们后面进入企业的主流。<br>Mapper接口开发方法只需要程序员编写Mapper接口(相当于Dao接口) ,由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同边Dao接口实现类方法。<br>Mapper接口开发需要遵循以下规范:</p>
<ol>
<li>Mapper.xml文件中的namespace 与mapper接口的全限定名相同</li>
<li>Mapper接口方法名和Mapper.xml中定义的每 个statement的id相同</li>
<li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sq|的parameterType的类型相同</li>
<li>Mapper接口方法的输出参数类型和mapper.xml中定义的每 个sql的resultType的类型相同<br><img src="/images/mybatis/userMapper.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>mapper.xml文件中：<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"top.rainbowcat.dao.StudentMapper"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"top.rainbowcat.domain.Student"</span>&gt;</span><br>        select * from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
采用该方法，接口不需要手动实现。<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>    SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>    SqlSession sqlSession = sqlSessionFactory.openSession();<br>    StudentMapper mapper = sqlSession.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>    List&lt;Student&gt; studentList = mapper.findAll();<br>    System.out.println(studentList);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="MyBatis映射文件深入"><a href="#MyBatis映射文件深入" class="headerlink" title="MyBatis映射文件深入"></a>MyBatis映射文件深入</h2><h4 id="动态sq-语句"><a href="#动态sq-语句" class="headerlink" title="动态sq|语句"></a>动态sq|语句</h4><h6 id="动态sq-语句概述"><a href="#动态sq-语句概述" class="headerlink" title="动态sq|语句概述"></a>动态sq|语句概述</h6>Mybatis的映射文件中，前面我们的SQL都是比较简单的，有些时候业务逻辑复杂时，我们的SQL是动态变化的，<br>比时在前面的学习中我们的SQL就不能满足要求了。</li>
<li>if</li>
</ol>
<p>使用Myatis的动态查询语句,会自动判断参数并拼接sql语句。只有在符合条件的情况下，才会进行拼接。</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"top.rainbowcat.dao.StudentMapper"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findByCondition"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"top.rainbowcat.domain.Student"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"top.rainbowcat.dao.StudentMapper"</span>&gt;</span><br>        select * from student<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"sno!=null"</span>&gt;</span><br>                and sno=#&#123;sno&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"sdept!=null"</span>&gt;</span><br>                and sdept=#&#123;sdept&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"ssex!=null"</span>&gt;</span><br>                and ssex=#&#123;ssex&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>choose (when, otherwise)</li>
<li>trim (where,set)</li>
<li>foreach<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findBySno"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"studentMapper"</span>&gt;</span><br>    select * from student<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--collection：传递的参数类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">open</span>=<span class="hljs-string">"sno in ("</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"sno"</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span>&gt;</span><br>            #&#123;sno&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String &gt;();<br>list.add(<span class="hljs-string">"201215004"</span>);<br>StudentMapper mapper = sqlSession.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>List&lt;Student&gt; student = mapper.findBySno(list);<br></code></pre></div></td></tr></table></figure>





</li>
</ol>
<h6 id="sql语句的抽取"><a href="#sql语句的抽取" class="headerlink" title="sql语句的抽取"></a>sql语句的抽取</h6><p>抽取前：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findBySno"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"studentMapper"</span>&gt;</span><br>    select * from student<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  条件  --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>抽取后：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectStudent"</span>&gt;</span>select * from student<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findBySno"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"studentMapper"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">"selectStudent"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  条件  --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>sql语句的抽取方便后期代码的维护，在修改sql语句时，能够减少修改的次数，大大提高维护效率。</p>
<h2 id="Mybatis核心配置文件深入"><a href="#Mybatis核心配置文件深入" class="headerlink" title="Mybatis核心配置文件深入"></a>Mybatis核心配置文件深入</h2><h4 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h4><p>无论是MyBatis在预处理语句(PreparedStatement) 中设置一个参数时, 还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。下表描述了-些默认的类型处理器(截取部分)。</p>
<table>
    <tr>
        <th>类型处理器</th>
        <th>Java类型</th>
        <th>JDBC类型</th>
    </tr>
    <tr>
        <td>BooleanTypeHandler</td>
        <td>java.lang.Boolean, boolean</td>
        <td>数据库兼容的BOOLEAN</td>
    </tr>
    <tr>
        <td>ByteTypeHandler</td>
        <td>java.lang.Byte, byte</td>
        <td>数据库兼容的NUMERIC或BYTE</td>
    </tr>
    <tr>
        <td>ShortTypeHandler</td>
        <td>java.lang.Short.short</td>
        <td>数据库兼容的NUMERIC或SHORT INTEGER</td>
    </tr>
    <tr>
        <td>IntegerTypeHandler</td>
        <td>java.lang.Integer，int </td>
        <td>数据库兼容的NUMERIC或INTEGER</td>
    </tr>
    <tr>
        <td>LongTypeHandler</td>
        <td>Java.lang.Long.long</td>
        <td>数据库兼容的NUMERIC或LONG INTEGER</td>
    </tr>
</table>
你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为:实现
org.apache.ibatis.type.TypeHandler接口，或继承-个很便利的类 org.apace.ibatis.type.BaseTypeHandler,然后可以选择性地将它映射到一个JDBC类型。
例如需求: 一个Java中的Date数据类型,我想将之存到数据库的时候存成一
个1970年至今的毫秒数，取出来时转换成java的Date, 即java的Date 与数据库的varchar毫秒值之间转换。
开发步骤:
1. 定义转换类继承类BaseTypeHandler
2. 覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法， getNullableResult为查询时mysql的字符串类型转换成java的Type类型的方法
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.rainbowcat.handler;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTypeHandler</span>&lt;<span class="hljs-title">Date</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**<br>     * 将java转换为数据库需要的类型<br>     * <span class="hljs-doctag">@param</span> preparedStatement 设置参数<br>     * <span class="hljs-doctag">@param</span> i 参数的位置<br>     * <span class="hljs-doctag">@param</span> date<br>     * <span class="hljs-doctag">@param</span> jdbcType<br>     * <span class="hljs-doctag">@throws</span> SQLException<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNonNullParameter</span><span class="hljs-params">(PreparedStatement preparedStatement, <span class="hljs-keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//获取毫秒值</span><br>        <span class="hljs-keyword">long</span> time = date.getTime();<br>        <span class="hljs-comment">//进行转换</span><br>        preparedStatement.setLong(i, time);<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将数据库中某些数据类型转换为java类型<br>     * <span class="hljs-doctag">@param</span> resultSet 查询到的结果集<br>     * <span class="hljs-doctag">@param</span> s 数据库中要转的字段名称<br>     * <span class="hljs-doctag">@return</span><br>     * <span class="hljs-doctag">@throws</span> SQLException<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, String s)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//获取结果集中所需要的数据</span><br>        <span class="hljs-keyword">long</span> aLong = resultSet.getLong(s);<br>        Date date = <span class="hljs-keyword">new</span> Date(aLong);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将数据库中某些数据类型转换为java类型<br>     * <span class="hljs-doctag">@param</span> resultSet<br>     * <span class="hljs-doctag">@param</span> i<br>     * <span class="hljs-doctag">@return</span><br>     * <span class="hljs-doctag">@throws</span> SQLException<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">long</span> aLong = resultSet.getLong(i);<br>        Date date = <span class="hljs-keyword">new</span> Date(aLong);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将数据库中某些数据类型转换为java类型<br>     * <span class="hljs-doctag">@param</span> callableStatement<br>     * <span class="hljs-doctag">@param</span> i<br>     * <span class="hljs-doctag">@return</span><br>     * <span class="hljs-doctag">@throws</span> SQLException<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getNullableResult</span><span class="hljs-params">(CallableStatement callableStatement, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">long</span> aLong = callableStatement.getLong(i);<br>        Date date = <span class="hljs-keyword">new</span> Date(aLong);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
3. 在MyBatis核心配置文件中进行注册
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自定义类型处理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">"top.rainbowcat.handler.DateTypeHandler"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandler</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
4. 测试转换是否正确
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 添加测试<br> * <span class="hljs-doctag">@throws</span> IOException<br> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>    SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>    SqlSession sqlSession = sqlSessionFactory.openSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setUsername(<span class="hljs-string">"测试2"</span>);<br>    user.setPassword(<span class="hljs-string">"123"</span>);<br>    user.setBirthday(<span class="hljs-keyword">new</span> Date());<br>    mapper.add(user);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br>    <span class="hljs-comment">/**<br> * 查询测试<br> * <span class="hljs-doctag">@throws</span> IOException<br> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>    SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>    SqlSession sqlSession = sqlSessionFactory.openSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>    User user = mapper.findById(<span class="hljs-number">2</span>);<br>    System.out.println(user.getBirthday());<br><br><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></div></td></tr></table></figure>














<h4 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h4><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装,使用简单的方式即可获得分页的相关数据<br>开发步骤:</p>
<ol>
<li>导入通用PageHelper的坐标<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页助手插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li>在mybatis核心配置文件中配置PageHelper插件<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定方言参数：不用数据库的结构化查询语句不同--&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;property name="dialect" value="mysql"/&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>pageHelper是如何在mybatis中是通过mybatis的pulgin实现了Interceptor接口，从而获得要执行的sql语句实现分页技术，而我们的PageHelper5.0.0版本中的这个类，并没有出现implements Interceptor，需要使用pagehelper这个包下的PageInterceptor类。</li>
<li>在PageHelper插件4.0.0以后的版本支持自动识别使用的数据库，可以不用配置 <property name="dialect" value="mysql"/> </li>
</ul>
<ol>
<li>测试分页数据获取<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>    SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>    SqlSession sqlSession = sqlSessionFactory.openSession();<br>    StudentMapper mapper = sqlSession.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>    <span class="hljs-comment">//设置分页相关参数 当前页、每页显示数量</span><br>    PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br><br>    List&lt;Student&gt; studentList = mapper.findAll();<br><br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-comment">//获得分页相关参数</span><br>    PageInfo&lt;Student&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;Student&gt;(studentList);<br>    System.out.println(<span class="hljs-string">"当前页："</span>+pageInfo.getPageNum());<br>    System.out.println(<span class="hljs-string">"每页显示条数："</span>+pageInfo.getPageSize());<br>    System.out.println(<span class="hljs-string">"总条数："</span>+pageInfo.getTotal());<br>    System.out.println(<span class="hljs-string">"总页数："</span>+pageInfo.getPages());<br>    System.out.println(<span class="hljs-string">"上一页："</span>+pageInfo.getNavigateLastPage());<br>    System.out.println(<span class="hljs-string">"是否是第一页："</span>+pageInfo.isIsFirstPage());<br><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></div></td></tr></table></figure>

</li>
</ol>
<h2 id="Mybatis多表操作"><a href="#Mybatis多表操作" class="headerlink" title="Mybatis多表操作"></a>Mybatis多表操作</h2><h4 id="一对一查询的模型"><a href="#一对一查询的模型" class="headerlink" title="一对一查询的模型"></a>一对一查询的模型</h4><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于个用户<br>一对一查询的需求:查询一个订单，与此同时查询出该订单所属的用户<br>order实体类：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//当前订单属于哪个用户</span><br>    <span class="hljs-keyword">private</span> User user;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>OrderMapper配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"top.rainbowcat.dao.OrderMapper"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--封装一个Map--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"orderMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"order"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--<br>            手动指定字段与实体属性的映射关系<br>            column：字段 property：实体属性<br>            此处使用oid时，sql语句中要有响应的别名oid<br>        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"oid"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> /&gt;</span><br><br><br>        <span class="hljs-comment">&lt;!--<br>            可代替上下面的封装方式<br>            property：当前实体（order）中属性名（private User user）<br>            javaType：当前实体中的属性类型（User），需要在朱配置文件中加别名<br>        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"user"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"username"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"birthday"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"birthday"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;result column="uid" property="user.id" /&gt;<br>        &lt;result column="username" property="user.username" /&gt;<br>        &lt;result column="password" property="user.password" /&gt;<br>        &lt;result column="birthday" property="user.birthday" /&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"orderMap"</span>&gt;</span><br>        select *, o.id oid from orders o, users u where o.uid=u.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">"sqlMapConfig.xml"</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        OrderMapper mapper = sqlSession.getMapper(OrderMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        List&lt;Order&gt; orders = mapper.findAll();<br>        <span class="hljs-keyword">for</span> (Order order : orders) &#123;<br>            System.out.println(order);<br>        &#125;<br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="一对多查询的模型"><a href="#一对多查询的模型" class="headerlink" title="一对多查询的模型"></a>一对多查询的模型</h4><p>user实体类：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Date birthday;<br><br>    <span class="hljs-comment">//当前用户存在哪些订单</span><br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orderList;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>UserMapper配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"top.rainbowcat.dao.UserMapper"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"user"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"uid"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"username"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"birthday"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"birthday"</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!--<br>            配置集合信息<br>            property：集合名称<br>            ofType：当前集合中的数据类型<br>        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"orderList"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"order"</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--封装order的数据--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"oid"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"userMap"</span>&gt;</span><br>        select *, u.id uid from users u, orders o where o.uid=u.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h4><p>sql语句要从多个表中查询，查询条件也要注意。<br><code>select * from user u, user_role ur, role r where u.id=ur.userId and ur.roleId=r.id</code></p>
<h2 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h2><p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper映射文件了。我们先围绕-些基本的CRUD来学习, 再学习复杂映射多表操作。<br>@Insert:实现新增<br>@Update:实现更新<br>@Delete:实现删除<br>@Select:实现查询<br>@Result:实现结果集封装<br>@Results:可以与@Result-起使用， 封装多个结果集<br>@One:实现一对一 结果集封装<br>@Many:实现一对多结果集封装</p>
<p>mapper配置文件不需要写了，但是接口中要用注解进行映射，同时也要写sql语句。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from users"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>核心配置文件中不需要分别加载映射文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加载映射文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;mapper resource="top/rainbowcat/mapper/UserMapper.xml" /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;mapper resource="top/rainbowcat/mapper/OrderMapper.xml" /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--只需要标注mapper配置文件所在的包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top.rainbowcat.dao"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="MyBatis的注解实现复杂映射"><a href="#MyBatis的注解实现复杂映射" class="headerlink" title="MyBatis的注解实现复杂映射"></a>MyBatis的注解实现复杂映射</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置<strong>resultMap</strong>来实现，使用注解开发后,我们可以使用@Results注解，@Result注解， @One注解，@Many注解组合完成复杂关系的配置</p>
<table>
<tr>
        <th>注解</th>
        <th>说明</th>
    </tr>
    <tr>
        <td>@Results</td>
        <td>代替的是标签<strong>resultMap</strong>该注解中可以使用单个@Result注解，也可以使用@Result集合。使用格式: @Results({@Result()，@Result()}) 或@Results (@Result())</td>
    </tr>
    <tr>
        <td>@Resut</td>
        <td>代替了<strong>id</strong>标签和<strong>result</strong>标签<br>
                @Result中属性介绍:<br>
                column:数据库的列名<br>
                @Resut<br>
                property:需要装配的属性名<br>
                one:需要使用的@One注解(@Result (one= @One) () ) )<br>
                many:需要使用的@Many注解(@Result (many=@many) () ) )</td>
    </tr>
    <tr>
        <td>@One (一对一)</td>
        <td>代替了<strong>assocation</strong>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。<br>
                select:指定用来多表查询的sqlmapper<br>
                @One注解属性介绍:<br>
                使用格式: @Result(column="",property=",one= @One(select=*"))</td>
    </tr>
    <tr>
        <td>@Many (多对一)</td>··
        <td>代替了<strong>collection</strong>标签是是多表查询的关键，在注解中用来指定子查询返回对象集合。<br>
                使用格式: @Result(property=",column=",many= @Many(select="))</td>
    </tr>
</table>

<h6 id="一对一注解开发："><a href="#一对一注解开发：" class="headerlink" title="一对一注解开发："></a>一对一注解开发：</h6><p>以用户订单案例进行分析，查询某一订单对应的用户时，一个订单只能一个用户，所以在封装数据时，除了order的数据，还要封装user的实体对象数据。<br>第一种封装方式</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select *, o.id oid from orders o, users u where o.uid=u.id"</span>)<br>    <span class="hljs-meta">@Results</span>(&#123;<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"oid"</span>, property = <span class="hljs-string">"id"</span>),<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"name"</span>, property = <span class="hljs-string">"name"</span>),<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"uid"</span>, property = <span class="hljs-string">"user.id"</span>),<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"username"</span>, property = <span class="hljs-string">"user.username"</span>),<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"password"</span>, property = <span class="hljs-string">"user.password"</span>),<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"birthday"</span>, property = <span class="hljs-string">"user.birthday"</span>),<br><br>    &#125;)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>第二种封装方式</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select *, o.id oid from orders o, users u where o.uid=u.id"</span>)<br>    <span class="hljs-meta">@Results</span>(&#123;<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"oid"</span>, property = <span class="hljs-string">"id"</span>),<br>            <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"name"</span>, property = <span class="hljs-string">"name"</span>),<br>            <span class="hljs-meta">@Result</span>(<br>                    property = <span class="hljs-string">"user"</span>,  <span class="hljs-comment">//要封装的属性名称</span><br>                    javaType = User<span class="hljs-class">.<span class="hljs-keyword">class</span>,  //要封装的实体类型<br>                    <span class="hljs-title">column</span> </span>= <span class="hljs-string">"uid"</span>,  <span class="hljs-comment">//根据那个字段去查询（此处为orders表中的uid查询user表中的id）</span><br>                    one = <span class="hljs-meta">@One</span>(select = <span class="hljs-string">"top.rainbowcat.dao.UserMapper.findById"</span>)<br>            )<br>    &#125;)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h6 id="一对多注解开发"><a href="#一对多注解开发" class="headerlink" title="一对多注解开发"></a>一对多注解开发</h6><p>相比一对一的数据封装，多对多封装的不再是一个实体对象，而是实体对象的list集合。仍以用户订单为例，一个用户可以有多个订单，于是查询某个用户的订单时，需要封装订单集合。<br><br>需要在OrderMapper接口中添加根据订单id查询列表的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from orders where uid=#&#123;uid&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">findByUid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> uid)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>UserMapper接口中的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select</span>(<span class="hljs-string">"select* from users"</span>)<br><span class="hljs-meta">@Results</span>(&#123;<br>        <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"id"</span>, property = <span class="hljs-string">"id"</span>),<br>        <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"username"</span>, property = <span class="hljs-string">"username"</span>),<br>        <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"password"</span>, property = <span class="hljs-string">"password"</span>),<br>        <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"birthday"</span>, property = <span class="hljs-string">"birthday"</span>),<br>        <span class="hljs-meta">@Result</span>(<br>                property = <span class="hljs-string">"orderList"</span>,<br>                column = <span class="hljs-string">"id"</span>,<br>                javaType = List<span class="hljs-class">.<span class="hljs-keyword">class</span>,<br>                <span class="hljs-title">many</span> </span>= <span class="hljs-meta">@Many</span>(select = <span class="hljs-string">"top.rainbowcat.dao.OrderMapper.findByUid"</span>)<br>        )<br>&#125;)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findUserAndOrder</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure>
<h6 id="多对多查询的模型"><a href="#多对多查询的模型" class="headerlink" title="多对多查询的模型"></a>多对多查询的模型</h6><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用<br>多对多查询的需求:查询用户同时查询出该用户的所有色（主要区别就是多了中间表）<br>实体类：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-comment">//当前用户具备的角色</span><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roleList;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>mapper接口：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from user"</span>)<br><span class="hljs-meta">@Results</span>(&#123;<br>        <span class="hljs-meta">@Result</span>(id = <span class="hljs-keyword">true</span>, column = <span class="hljs-string">"id"</span>, property = <span class="hljs-string">"id"</span>),<br>        <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"username"</span>, property = <span class="hljs-string">"username"</span>),<br>        <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"password"</span>, property = <span class="hljs-string">"password"</span>),<br>        <span class="hljs-meta">@Result</span>(column = <span class="hljs-string">"birthday"</span>, property = <span class="hljs-string">"birthday"</span>),<br>        <span class="hljs-meta">@Result</span>(<br>                column = <span class="hljs-string">"id"</span>,<br>                property = <span class="hljs-string">"roleList"</span>,<br>                javaType = List<span class="hljs-class">.<span class="hljs-keyword">class</span>,<br>                <span class="hljs-title">many</span> </span>= <span class="hljs-meta">@Many</span>(select = <span class="hljs-string">"top.rainbowcat.dao.RoleMapper.findByUid"</span>)<br>        )<br>&#125;)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findUserAndRole</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleMapper</span> </span>&#123;<br><br>    <span class="hljs-comment">//最后的and部分，是保证查询单个用户的角色</span><br>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from sys_user_role ur, sys_role r where ur.roleId=r.id and ur.userId=#&#123;uid&#125;"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">findByUid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> uid)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/2020/07/30/Spring%20MVC/</url>
    <content><![CDATA[<h1 id="Spring集成Web环境"><a href="#Spring集成Web环境" class="headerlink" title="Spring集成Web环境"></a>Spring集成Web环境</h1><h2 id="环境集成"><a href="#环境集成" class="headerlink" title="环境集成"></a>环境集成</h2><h4 id="maven集成tomcat8插件（非官方）："><a href="#maven集成tomcat8插件（非官方）：" class="headerlink" title="maven集成tomcat8插件（非官方）："></a>maven集成tomcat8插件（非官方）：</h4><p>首先要在<strong>tomcat-users.xml</strong>的文件中加入：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">"tomcat"</span> <span class="hljs-attr">password</span>=<span class="hljs-string">"tomcat"</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">"manager-gui,manager-script"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>

<a id="more"></a>

<p>然后在maven本地仓库的<strong>settings.xml</strong>中加入：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">pluginGroup</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroup</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>tomcat8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>然后就可以在maven项目的pom.xml中使用tomcat插件：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--tomcat8插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://127.0.0.1:8080/manager/text<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>tomcat8<span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 项目的虚拟路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/test<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h6 id="pom-xml中添加坐标，集成web环境："><a href="#pom-xml中添加坐标，集成web环境：" class="headerlink" title="pom.xml中添加坐标，集成web环境："></a>pom.xml中添加坐标，集成web环境：</h6><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--jsp--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h6 id="ApplicationContext应用上下文获取方式"><a href="#ApplicationContext应用上下文获取方式" class="headerlink" title="ApplicationContext应用上下文获取方式"></a>ApplicationContext应用上下文获取方式</h6><div class="hljs code-wrapper"><pre><code>    应用上下文对象是通过new ClasspathXmlApplicationContext(spring配置文件)方式获取的，但是每次从
容器中获得Bean时都要编写new ClasspathXmlApplicationContext(spring配置文件) ,这样的弊端是配置
文件加载多次，应用上下文对象创建多次。&lt;br&gt;
    在Web项目中，可以使用ServletContextListener监听Web应用的启动， 我们可以在Web应用启动时，就加
载Spring的配置文件，创建应用上下文对象ApplicationContext,在将其存储到最大的域servletContext域
中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。</code></pre></div><ol>
<li>不使用spring的实现方式</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> *上下文初始化监听，也即是服务器启动时<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextLoaderListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br>        ServletContext servletContext = sce.getServletContext();<br>        <span class="hljs-comment">//从web.xml中获取配置文件</span><br>        String contextConfigLocation = servletContext.getInitParameter(<span class="hljs-string">"contextConfigLocation"</span>);<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(contextConfigLocation);<br>        <span class="hljs-comment">//将Spring的应用上下文对象存储到ServletContext域中</span><br>        servletContext.setAttribute(<span class="hljs-string">"app"</span>, app);<br>        System.out.println(<span class="hljs-string">"Spring容器创建完毕...."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebApplicationContextUtils</span> </span>&#123;<br>    <span class="hljs-comment">/**<br>     * 返回applicationContext容器对象<br>     * <span class="hljs-doctag">@param</span> servletContext<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title">getApplicationContext</span><span class="hljs-params">(ServletContext servletContext)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (ApplicationContext) servletContext.getAttribute(<span class="hljs-string">"app"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">"/userServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ApplicationContext applicationContext = WebApplicationContextUtils.getApplicationContext(request.getServletContext());<br>        System.out.println(applicationContext);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>top.rainbowcat.listener.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>spring提供获取应用上下文的工具<br>Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中, 提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。<br><br>使用步骤：</li>
</ol>
<ul>
<li>在web.xml中配置ContextLoaderListener监听器(导入spring-web坐标)</li>
<li>使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</li>
</ul>
<p>首先需要导入坐标：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>web层获取方式：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">"/userServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext servletContext = request.getServletContext();<br>        ApplicationContext applicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);<br>        System.out.println(applicationContext);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>用spring进行配置，自动生成：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置监听器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置全局初始化参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>SpringMVC是-种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中。<br>SpringMVC已经成为目前最主流的MVC框架之一,并且随着Spring3.0 的发布，全面超越Struts2,成为最优秀的MVC框架。它通过一套注解, 让-个简单的Java类成为处理请求的控制器,而无须实现任何接口。同时它还支持RESTful编程风格的请求。</p>
<h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><div class="hljs code-wrapper"><pre><code>- 导入SpringMVC相关坐标
- 配置SpringMVC核心控制器DispatcherServlet
- 创建Controller类和视图页面
- 使用注解配置Controller类中业务方法的映射地址
- 配置SpringMVC核心文件spring-mvc.xml
- 客户端发起请求测试</code></pre></div><p>导入相关坐标：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>在<strong>web.xml</strong>中配置SpringMVC核心控制器DispatcherServlet：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置springMVC前端控制器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-MVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--服务器启动时加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--此处用 / 会导致所有请求资源都要经过这里，会把响应的资源也拦截--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-comment">&lt;!--放行.jsp、.html文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>创建Controller类和视图页面，并使用注解进行配置</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/userSave"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"测试..."</span>);<br>        <span class="hljs-comment">//此处的返回值，前面省略了redirect（重定向前缀）或forward（转发）。如：forward:/demo.jsp</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"demo.jsp"</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>配置spring-MVC.xml文件，开启组件扫描</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat.controller"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>

<h4 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h4><ol>
<li>SpringMVC的执行流程</li>
</ol>
<ul>
<li>用户发送请求至前端控制器DispatcherServlet,</li>
<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>
<li>处理器映射器找到具体的处理器(可以根据xm|配置、注解进行查找), 生成处理器对象及处理器拦截器(如果有则生成)-井返回给DispatcherServlet,</li>
<li>DispatcherServlet调用HandlerAdapter处理器适配器。</li>
<li>HandlerAdapter经过适配调用具体的处理器(Controller,叫后端控制器)。</li>
<li>Controller执行完成返回ModelAndView,</li>
<li>HandlerAdapter将controller执行结果ModelAndView返回给DispatchersServlet.</li>
<li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器。</li>
<li>ViewResolver解析后返回具体View.</li>
<li>DispatcherServlet根据View进行渲染视图(即将模型数据填充至视图中)。DispatcherServlet响应用户。</li>
</ul>
<ol start="2">
<li>SpringMVC注解解析</li>
</ol>
<p><strong>@RequestMapping</strong><br>作用:用于建立请求URL和处理请求方法之间的对应关系<br>位置:<br>    - 类上， 请求URL的第一级访问目录。此处不写的话，就相当于应用的根目录<br>    - 方法上， 请求URL的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</p>
<p>属性:<br>    - value:用于指定请求的URL。它和path属性的作用是一样的<br>    - method:用于指定请求的方式<br>    - params:用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模-样<br>    - params = {“accountName”),表示请求参数必须有accountName<br>    - params = {“money!100”),表示请求参数中money不能是100</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/save"</span>, method = RequestMethod.GET)<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>spring的XML解析<br>springMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址<br>org/springframework/web/servlet/DispatcherServlet.properties,该文件中配置了默认的视图解析器，如下:<blockquote>
<p>org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</p>
</blockquote>
</li>
</ol>
<p>翻看该解析器源码，可以看到该解析器的默认设置，如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">REDIRECT_URL_PREFIX="redirect:" --重定向前缀<br>FORWARD_URL_PREFIX ="forward:"  --转发前缀(默认值)<br>prefix = "";                    --视图名称前缀<br>suffix = "";                    --视图名称后缀<br></code></pre></div></td></tr></table></figure>
<p>在spring-MVC.xml当中配置内部资源视图解析器后，controller当中的返回值就可以简写：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置内部资源视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"viewResolver"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--最终的地址为：/jsp/demo.jsp--&gt;</span><br>    <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/jsp/"</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>return “demo”; //不需要写资源路径的前缀和扩展名</p>
</blockquote>
<h1 id="SpringMVC数据响应"><a href="#SpringMVC数据响应" class="headerlink" title="SpringMVC数据响应"></a>SpringMVC数据响应</h1><h2 id="SpringMVC数据响应方式"><a href="#SpringMVC数据响应方式" class="headerlink" title="SpringMVC数据响应方式"></a>SpringMVC数据响应方式</h2><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><ol>
<li>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转。</li>
<li>通过ModelAndView对象返回：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * Model：模型，用于封装数据<br> * View：视图，用于展示数据<br> * <span class="hljs-doctag">@return</span><br> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/test"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    <span class="hljs-comment">//设置模型数据</span><br>    modelAndView.addObject(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"测试ModelAndView..."</span>);<br>    <span class="hljs-comment">//设置视图名称</span><br>    modelAndView.setViewName(<span class="hljs-string">"demo"</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>也可以使用可传参的方式，方便使用注入：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/test"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">(ModelAndView modelAndView)</span></span>&#123;<br>    <span class="hljs-comment">//设置模型数据</span><br>    modelAndView.addObject(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"测试ModelAndView..."</span>);<br>    <span class="hljs-comment">//设置视图名称</span><br>    modelAndView.setViewName(<span class="hljs-string">"demo"</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>也可以将ModelAndView进行拆分：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/test"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model)</span></span>&#123;<br>    model.addAttributeName(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"测试ModelAndView..."</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"demo"</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>此处的Model也可以是HttpServletRequest（是形参，在使用时由框架创建），使用request。</p>
<h4 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h4><ol>
<li>直接返回字符串<ul>
<li>通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”)回写数据，此时不需要视图跳转，业务方法返回值为void,</li>
<li>将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回。</li>
</ul>
</li>
</ol>
<p>直接使用response回写：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/response"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">response</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    response.getWriter().print(<span class="hljs-string">"hello world"</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>使用@ResponseBody注解:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/save"</span>, method = RequestMethod.GET)<br><span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">//告知springMVC框架，直接进行数据响应而不是资源跳转</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"test..."</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>返回对象或集合：</li>
</ol>
<p>使用Jackson将返回值转为json对象：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/save"</span>, method = RequestMethod.GET)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    String json = objectMapper.writeValueAsString(user);<br>    <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>使用springMVC自动转换为json对象：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/save"</span>, method = RequestMethod.GET)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setName(<span class="hljs-string">"lisi"</span>);<br>    user.setAge(<span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p><strong>xml配置方式</strong>spring-MVC.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置消息转换器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"messageConverters"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--配置jackson的转换器--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>在方法上添加@ResponseBody就可以返回son格式的字符串,但是这样配置比较麻烦,配置的代码比较多,因此，我们可以使用mvc的注解驱动代替上述配置。<br><strong>注解方式</strong></p>
<blockquote>
<p>&lt;mvc:annotation-driven/&gt;</p>
</blockquote>
<h1 id="SpringMVC获得请求数据"><a href="#SpringMVC获得请求数据" class="headerlink" title="SpringMVC获得请求数据"></a>SpringMVC获得请求数据</h1><p>客户端请求参数的格式是: name=value&amp;name=value…<br><br>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数:</p>
<ul>
<li>基本类型参数</li>
<li>POJO类型参数</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h2 id="基本类型参数"><a href="#基本类型参数" class="headerlink" title="基本类型参数"></a>基本类型参数</h2><p>Controller中的业务方法的参数名称要与请求参数的name一致, 参数值会自动映射匹配。<br><br>例如：客户端请求为 <code>http://localhost/spring/user/save?username=lisi&amp;age=18</code></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String username, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    System.out.println(username);<br>    System.out.println(age);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="POJO类型参数"><a href="#POJO类型参数" class="headerlink" title="POJO类型参数"></a>POJO类型参数</h2><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致, 参数值会自动映射匹配。（与实体类去匹配）</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        System.out.println(user);<br>    &#125;<br><span class="hljs-comment">//此外还需要有一个对应的实体类</span><br></code></pre></div></td></tr></table></figure>

<h2 id="数组类型参数"><a href="#数组类型参数" class="headerlink" title="数组类型参数"></a>数组类型参数</h2><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配<br>例如：客户端请求为 <code>http://localhost/spring/user/save?str=aaa&amp;str=bbb&amp;str=ccc</code></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String[] str)</span> </span>&#123;<br>    <span class="hljs-comment">//数组类型默认打印地址，转成集合方便查看</span><br>    System.out.println(Arrays.asList(str));<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="集合类型参数"><a href="#集合类型参数" class="headerlink" title="集合类型参数"></a>集合类型参数</h2><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;form action="$&#123;pageContext.request.contextPath&#125;/user/save"&gt;<br>    &lt;input type="text" name="userList[0].name"&gt;&lt;br&gt;<br>    &lt;input type="text" name="userList[0].age"&gt;&lt;br&gt;<br>    &lt;input type="text" name="userList[1].name"&gt;&lt;br&gt;<br>    &lt;input type="text" name="userList[1].age"&gt;&lt;br&gt;<br>    &lt;input type="submit"&gt;<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>   <span class="hljs-title">save</span><span class="hljs-params">(VO vo)</span> </span>&#123;<br>    System.out.println(vo);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POIO进行包装。</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;script src="js/jquery-3.1.1.jar"&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        $(function () &#123;<br>            var userList = new Array();<br>            userList.push(&#123;name: "zhangsan", age: 18&#125;);<br>            userList.push(&#123;name: "lisi", age: 20&#125;);<br>            $.ajax(&#123;<br>                type: "POST",<br>                url: "/user/save",<br>                data:JSON.stringify(userList),<br>                contentType: "json"<br>            &#125;);<br>        &#125;);<br>    &lt;/script&gt;<br></code></pre></div></td></tr></table></figure>
<p>需要在spring-MVC.xml配置静态资源权限</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">"/js/**"</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"/js/"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>   <span class="hljs-title">save</span><span class="hljs-params">(@RequestBody List&lt;User&gt; userList)</span> </span>&#123;<br>    System.out.println(userList);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="静态资源访问的开启"><a href="#静态资源访问的开启" class="headerlink" title="静态资源访问的开启"></a>静态资源访问的开启</h2><p>方式一：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开放静态资源访问权限--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">"/js/**"</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"/js/"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>

<h2 id="请求数据乱码问题"><a href="#请求数据乱码问题" class="headerlink" title="请求数据乱码问题"></a>请求数据乱码问题</h2><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。<br><br>在web.xml中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置全局过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h2 id="参数绑定注解-requestParam"><a href="#参数绑定注解-requestParam" class="headerlink" title="参数绑定注解@requestParam"></a>参数绑定注解@requestParam</h2><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定。<br><br>例如：页面提交的是<code>&lt;input type=&quot;text&quot; name=&quot;lisi&quot;&gt;</code>，controller当中可以写成：<code>public void   save(@RequestParam(&quot;name&quot;)String username)</code>。<br><br>注解@RequestParam还有如下参数可以使用:</p>
<ul>
<li>value: 与请求参数名称</li>
<li>required: 此在指定的请求参数是否必须包括，默认是true, 提交时如果没有此参数则报错</li>
<li>defaultValue: 当没有指定请求参数时，则使用指定的默认值赋值</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>   <span class="hljs-title">save</span><span class="hljs-params">(@RequestParam(value = <span class="hljs-string">"name"</span>, required = <span class="hljs-keyword">false</span>, defaultValue = <span class="hljs-string">"rainbow"</span>)</span>String username)</span><br></code></pre></div></td></tr></table></figure>
<p>当页面提交时，没有附带name参数，则不会报请求错误，使用默认值“rainbow”。</p>
<h2 id="获得Restful风格的参数"><a href="#获得Restful风格的参数" class="headerlink" title="获得Restful风格的参数"></a>获得Restful风格的参数</h2><p><strong>Restful</strong>是一种软件<strong>架构风格</strong>、 <strong>设计风格</strong>,而不是标准，只是提供了一组设计原则和约束条件。 主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。<br><br>Restful风格的请求是使用<strong>url+ 请求方式</strong>表示-次请求目的的，HTTP 协议里面四个表示操作方式的动词如下:</p>
<ul>
<li>GET:用于获取资源</li>
<li>POST:用于新建资源</li>
<li>PUT:用于更新资源</li>
<li>DELETE:用于删除资源</li>
</ul>
<p>例如：</p>
<table>
    <tr>
        <td  align="center">/user/1</td>
        <td  align="center">GET</td>
        <td  align="center">得到id= 1的user</td>
    </tr>
    <tr>
        <td  align="center">/user/1</td>
        <td  align="center">DELETE</td>
        <td  align="center">删除 id= 1的user</td>
    </tr>
    <tr>
        <td  align="center">/user/1</td>
        <td  align="center">PUT</td>
        <td  align="center">更新id= 1的user</td>
    </tr>
    <tr>
        <td  align="center">/user</td>
        <td  align="center">POST</td>
        <td  align="center">新增user</td>
    </tr>
</table>

<p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址/user/1可以写成<br>/user/{id};占位符(id)对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行 占位符的匹配获取工作。</p>
<p><code>http://localhost/spring/user/save/zhangsan</code></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save/&#123;name&#125;"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>   <span class="hljs-title">save</span><span class="hljs-params">(@PathVariable(value = <span class="hljs-string">"name"</span>, required = <span class="hljs-keyword">true</span>)</span>String username) </span>&#123;<br>    System.out.println(username);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>此处的逻辑是：{name} –&gt; value=”name” –&gt; username</p>
<h2 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2><p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参 数设置。<br><br>但是不是所有的数据类型都提供了转换器,没有提供的就需要自定义转换器，例如: 日期类型的数据就需要自定义转换器。<br><br><strong>自定义类型转换器的开发步骤:</strong></p>
<ul>
<li>定义转换器类实现Converter接口</li>
<li>在配置文件中声明转换器</li>
<li>在&lt;annotation- driven&gt;中引用转换器</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.rainbowcat.converter;<br><br><span class="hljs-keyword">import</span> org.springframework.core.convert.converter.Converter;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Date</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">convert</span><span class="hljs-params">(String dateStr)</span> </span>&#123;<br>        <span class="hljs-comment">//将日期字符串转换成日期对象</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd"</span>);<br>        Date date = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = sdf.parse(dateStr);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明自定义类型转换器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"conversionService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"converters"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.converter.DateConverter"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置消息转换器注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">"conversionService"</span>/&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Date date)</span> </span>&#123;<br>    System.out.println(date);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h2><ol>
<li><p>@RequestHeader<br>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name)<br><br>@RequestHeader注解的属性如下:</p>
<ul>
<li>value：请求头的名称</li>
<li>required：是否必须携带此请求头</li>
</ul>
</li>
<li><p>@CookieValue.<br>使用@CookieValue可以获得指定Cookie的值<br>@CookieValue注解的属性如下:</p>
<ul>
<li>value: 指定cookie的名称</li>
<li>required: 是否必须携带此cookie</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMethod</span><span class="hljs-params">(@RequestHeader(value = <span class="hljs-string">"User-Agent"</span>,  required = <span class="hljs-keyword">false</span>)</span> String  userAgent, @<span class="hljs-title">RequestHeader</span><span class="hljs-params">(value = <span class="hljs-string">"Cookie"</span>,  required = <span class="hljs-keyword">false</span>)</span>String  cookie) </span>&#123;<br>    System.out.println(userAgent);<br>    System.out.println(cookie);<br>&#125;<br><br><span class="hljs-comment">//直接获取Cookie键为"_ga"的值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveMethod</span><span class="hljs-params">(@CookieValue(value = <span class="hljs-string">"_ga"</span>,  required = <span class="hljs-keyword">false</span>)</span>String  cookie)</span><br></code></pre></div></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h4 id="文件上传客户端三要素"><a href="#文件上传客户端三要素" class="headerlink" title="文件上传客户端三要素"></a>文件上传客户端三要素</h4><ol>
<li>表单项type= “file”</li>
<li>表单的提交方式是post</li>
<li>表单的enctype属性是多部分表单形式，及enctype= “mutipart/form-data’</li>
</ol>
<h4 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h4><ol>
<li>当form表单修改为多部分表单时，request.getParameter0将失效。</li>
<li>enctype= “application/x-wgww-form-urlencoded” 时, form表单的正文内容格式是:<strong>key=value&amp;key=value&amp;key=value</strong></li>
<li>当form表单的enctype取值为Mutilpart/form-data时,请求正文内容就变成多部分形式:</li>
</ol>
<h4 id="单文件上传步骤"><a href="#单文件上传步骤" class="headerlink" title="单文件上传步骤"></a>单文件上传步骤</h4><ol>
<li>导入fileupload和io坐标</li>
<li>配置文件上传解析器</li>
<li>编写文件.上传代码</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>在spring-MVC.xml中：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--配置文件上传解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"multipartResolver"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--上传文件的编码类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultEncoding"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--上传文件总大小--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxUploadSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"5242800"</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--上传单个文件的大小--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxUploadSizePerFile"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"5242800"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;form action="$&#123;pageContext.request.contextPath&#125;/user/save" method="post" enctype="multipart/form-data"&gt;<br>    名称：&lt;input type="text" name="name" &gt;&lt;br&gt;<br>    文件：&lt;input type="file" name="upload"&gt;&lt;br&gt;<br>    &lt;input type="submit" value=上传"&gt;<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String name, MultipartFile upload)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//获得上传的文件名称</span><br>    String originalFilename = upload.getOriginalFilename();<br>    upload.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"\\文件存储路径\\"</span> + originalFilename));<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>需要注意的是：表单中name的值要和controller中的参数一致。</p>
<h4 id="单文件上传步骤-1"><a href="#单文件上传步骤-1" class="headerlink" title="单文件上传步骤"></a>单文件上传步骤</h4><p>只需要在表单和controller中做修改：</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;form action="$&#123;pageContext.request.contextPath&#125;/user/save" method="post" enctype="multipart/form-data"&gt;<br>    名称：&lt;input type="text" name="name" &gt;&lt;br&gt;<br>    文件：&lt;input type="file" name="upload1"&gt;&lt;br&gt;<br>    文件：&lt;input type="file" name="upload2"&gt;&lt;br&gt;<br>    &lt;input type="submit" value=上传"&gt;<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String name, MultipartFile upload1, MultipartFile upload2)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//获得上传的文件名称</span><br>        String originalFilename1 = upload1.getOriginalFilename();<br>        String originalFilename2 = upload2.getOriginalFilename();<br>        upload1.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"\\文件存储路径\\"</span> + originalFilename1));<br>        upload2.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"\\文件存储路径\\"</span> + originalFilename2));<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<p>或者可以使用数组：</p>
<figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">文件<span class="hljs-number">1</span>：&lt;input type=<span class="hljs-string">"file"</span> name=<span class="hljs-string">"upload"</span>&gt;&lt;br&gt;<br>文件<span class="hljs-number">2</span>：&lt;input type=<span class="hljs-string">"file"</span> name=<span class="hljs-string">"upload"</span>&gt;&lt;br&gt;<br>文件<span class="hljs-number">3</span>：&lt;input type=<span class="hljs-string">"file"</span> name=<span class="hljs-string">"upload"</span>&gt;&lt;br&gt;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/save"</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String name, MultipartFile[] upload)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-keyword">for</span> (MultipartFile multipartFile : upload) &#123;<br>        String originalFilename = multipartFile.getOriginalFilename();<br>        multipartFile.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"\\文件存储路径\\"</span> + originalFilename));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h2><p>Spring MVC的<strong>拦截器</strong>类似于Servlet开发中的过滤器Filter,用于对处理器进行<strong>预处理</strong>和<strong>后处理</strong>。<br><br>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链(Interceptor Chain)。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p>
<h4 id="拦截器和过滤器区别"><a href="#拦截器和过滤器区别" class="headerlink" title="拦截器和过滤器区别"></a>拦截器和过滤器区别</h4><p>（比较重要）</p>
<table>
    <tr>
        <th>区别</th>
        <th>过滤器</th>
        <th>拦截器</th>
    </tr>
    <tr>
        <td  align="center">使用范围</td>
        <td  align="center">是servlet规范中的一部分，任何Java Web工程都可以使用</td>
        <td  align="center">是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能用</td>
    </tr>
    <tr>
        <td  align="center">拦截范围</td>
        <td  align="center">在url-pattern中配置了/*之后，可以对所有要访问的资源拦截</td>
        <td  align="center">只会拦截访问的控制器方法，如果访问的是jsp,html,css,image或者js是不会进行拦截的</td>
    </tr>
</table>

<h4 id="如何自定义拦截器"><a href="#如何自定义拦截器" class="headerlink" title="如何自定义拦截器"></a>如何自定义拦截器</h4><ul>
<li>创建拦截器类实现HandlerInterceptor接口</li>
<li>配置拦截器</li>
<li>测试拦截器的拦截效果</li>
</ul>
<table>
    <tr>
        <th>方法名</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">preHandle()</td>
        <td  align="center">方法将在请求处理之前进行调用，该方法的返回值是布尔值Boolean类型的，
            当它返回为false时，表示请求结束，后续的Interceptor和Controller都不会
            再执行;当返回值为true时就会继续调用下一个Interceptor的preHandle方法</td>
    </tr>
    <tr>
        <td  align="center">postHandle()</td>
        <td  align="center">该方法是在当前请求进行处理之后被调用，前提是preHandle 方法的返回值为
            true时才能被调用，且它会在DispatcherServlet 进行视图返回渲染之前被调
            用，所以我们可以在这个方法中对Controller处理之后的ModelAndView对象
            进行操作</td>
    </tr>
    <tr>
        <td  align="center">afterCompletion()</td>
        <td  align="center">
            该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图
            之后执行，前提是preHandle 方法的返回值为true时才能被调用</td>
    </tr>
</table>

<p>拦截器：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <span class="hljs-comment">/**<br>     * 目标方法执行之前执行<br>     * <span class="hljs-doctag">@param</span> request 用于获取请求内容<br>     * <span class="hljs-doctag">@param</span> response<br>     * <span class="hljs-doctag">@param</span> handler<br>     * <span class="hljs-doctag">@return</span> 返回true，则放行；若返回false则被拦截<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">"preHandle..."</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">"yes"</span>.equals(request.getParameter(<span class="hljs-string">"param"</span>))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            request.getRequestDispatcher(<span class="hljs-string">"/error.jsp"</span>).forward(request, response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     *目标方法执行之后，视图返回之前执行<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        modelAndView.addObject(<span class="hljs-string">"name"</span>, <span class="hljs-string">"rainbow"</span>);<br>        System.out.println(<span class="hljs-string">"postHandle..."</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 整个流程都执行完成后执行<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">"afterCompletion..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>配置spring-mvc.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--此处可以配置多个拦截器，需要创建相应的类--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>           <span class="hljs-comment">&lt;!--对哪些资源执行拦截操作--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/**"</span>/&gt;</span><br>           <span class="hljs-comment">&lt;!--对哪些资源不拦截--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/user/login"</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.interceptor.MyInterceptor"</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--若配置多个拦截器，先配置的先执行--&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TargetController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/target"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"目标方法执行..."</span>);<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">"name"</span>, <span class="hljs-string">"lisi"</span>);<br>        modelAndView.setViewName(<span class="hljs-string">"index"</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="SpringMVC异常处理"><a href="#SpringMVC异常处理" class="headerlink" title="SpringMVC异常处理"></a>SpringMVC异常处理</h2><h4 id="异常处理的思路"><a href="#异常处理的思路" class="headerlink" title="异常处理的思路"></a>异常处理的思路</h4><p>系统中异常包括两类:预期异常和运行时异常RuntimeException,前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生。</p>
<p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理，如下图:</p>
<h4 id="异常处理两种方式"><a href="#异常处理两种方式" class="headerlink" title="异常处理两种方式"></a>异常处理两种方式</h4><ol>
<li>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver<br>SpringMVC已经定义好了该类型转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置简单映射异常处理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--默认错误视图--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultErrorView"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"error"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"exceptionMappings"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--此处配置异常类型和错误视图--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"java.lang.ClassCastException"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"error"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li>实现Spring的异常处理接口HandlerExceptionResolver自定义自己的异常处理器</li>
</ol>
<p><strong>自定义异常处理器步骤</strong><br>    - 创建异常处理器类实现HandlerExceptionResolver<br>    - 配置异常处理器<br>    - 编写异常页面<br>    - 测试异常跳转</p>
<p>自己编写异常处理器：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//需要继承HandlerExceptionResolver</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyExceptionResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerExceptionResolver</span> </span>&#123;<br>    <span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@param</span> e 报异常的异常对象<br>     * <span class="hljs-doctag">@return</span> 要跳转的错误视图信息<br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">resolveException</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-comment">//判断异常类型和要执行的操作</span><br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ClassCastException)&#123;<br>            modelAndView.addObject(<span class="hljs-string">"info"</span>, <span class="hljs-string">"类转换异常"</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>在spring-mvc.xml进行配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置自定义异常处理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.resolver.MyExceptionResolver"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>




]]></content>
      <categories>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/07/28/Spring/</url>
    <content><![CDATA[<h1 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h1><h2 id="什么是spring"><a href="#什么是spring" class="headerlink" title="什么是spring"></a>什么是spring</h2><p>Spring是分层的Java SE/EE应用full stack轻量级开源框架,以IoC(Inverse Of Control:反转控制)和AOP(Aspect Oriented Programming:面向切面编程)为内核。</p>
<p>提供了<strong>展现层SpringMVC</strong>和<strong>持久层Spring JDBCTemplate</strong>以及<strong>业务层事务管理</strong>等众多的企业级应用技术,还能整合开源世界众多著名的第三方框架和类库,逐渐成为使用最多的Java EE企业应用开源框架。</p>
<a id="more"></a>

<h2 id="spring的优势"><a href="#spring的优势" class="headerlink" title="spring的优势"></a>spring的优势</h2><ol>
<li>方便解耦，简化开发<br>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li>
<li>AOP编程的支持<br>通过Spring的AOP功能，方便进行面向切面编程,许多不容易用传统OOP实现的功能可以通过AOP轻松实现。</li>
<li>声明式事务的支持<br>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理,提高开发效率和质量。</li>
<li>方便程序的测试<br>可以用非容器依赖的编程方式进行几乎所有的测试工作,测试不再是昂贵的操作，而是随手可做的事情。</li>
<li>方便集成各种优秀框架<br>Spring对各种优秀框架(Struts、Hibermate、Hessian、Quartz等) 的支持。</li>
<li>降低JavaEE API的使用难度<br>Spring对JavaEE API (如JDBC、JavaMail、 远程调用等)进行了薄薄的封装层，使这些API的使用难度大为降低。</li>
<li>Java源码是经典学习范例<br>Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无意是Java技术的最佳实践的范例。</li>
</ol>
<h2 id="spring的体系结构"><a href="#spring的体系结构" class="headerlink" title="spring的体系结构"></a>spring的体系结构</h2><h4 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h4><ol>
<li>Beans</li>
<li>Core</li>
<li>Context</li>
<li>SpEl</li>
</ol>
<h4 id="AOP-Aspects-instrumentation-Messaging"><a href="#AOP-Aspects-instrumentation-Messaging" class="headerlink" title="AOP Aspects instrumentation Messaging"></a>AOP Aspects instrumentation Messaging</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol>
<li>Data Access/instrumentation<ul>
<li>JDBC</li>
<li>ORM</li>
<li>OXM</li>
<li>JMS</li>
<li>Transactions</li>
</ul>
</li>
<li>Web<ul>
<li>WebStocket</li>
<li>Servlet</li>
<li>Web</li>
<li>Portlet</li>
</ul>
</li>
</ol>
<h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol>
<li>Spring程序开发步骤<br>①导入Spring开发的基本包坐标<br>②编写Dao接口和实现类<br>③创建Spring核心配置文件<br>④在Spring配置文件中配置UserDaolmpl<br>⑤使用Spring的API获得Bean实例</li>
</ol>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>需要在resources目录下创建配置文件（一般为applicationContext.xml），使用Bren标签进行配置（无参构造）。</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"useDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>调用时，从spring的客户端中使用getBean方法获取</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);<br>UserDao userDao = (UserDao) app.getBean(<span class="hljs-string">"userDao"</span>);<br></code></pre></div></td></tr></table></figure>
<h4 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h4><p>cope：指对象的作用范围，取值如下：</p>
<table >
    <tr>
    <th>取值范围</th>
    <th>说明</th>
    </tr>
    <tr>
    <td align="center">singleton</td>
    <td  align="center">默认值，单例的（容器中只存在一个对象）<br>①在应用加载，创建容器时创建对象<br>②只要容器在，对象就一直活着<br>③当应用卸载，销毁容器时对象被销毁</td>
    </tr>
    <tr>
    <td align="center">prototype</td>
    <td  align="center">多例的<br>①当使用（getBean）对象时创建<br>②只要对象在使用中，就一直活着<br>③当对象长时间不用，会被Java的垃圾回收器回收</td>
    </tr>
    <tr>
    <td align="center">request</td>
    <td  align="center">WEB项目中，Spring创建的一个Bean对象，将对象存入request域中</td>
    </tr>
    <tr>
    <td align="center">session</td>
    <td  align="center">WEB项目中，Spring创建的一个Bean对象，将对象存入session域中</td>
    </tr>
    <tr>
    <td align="center">global session</td>
    <td  align="center">WEB项目中，应用在Portlet环境，<br>如果没有Portlet环境那么globalSession相当于session</td>
    </tr>
</table>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">bean id="useDao" class="top.rainbowcat.dao.Impl.UserDaoImpl" scope="singleton"&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h4 id="Bean生命周期配置"><a href="#Bean生命周期配置" class="headerlink" title="Bean生命周期配置"></a>Bean生命周期配置</h4><p>init-method：指定类中的初始化方法名称<br>destroy-method：指定类中的销毁方法名称</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">bean id="useDao" class="top.rainbowcat.dao.Impl.UserDaoImpl" init-method="接口中的方法"&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h4 id="Bean实例化三种方式"><a href="#Bean实例化三种方式" class="headerlink" title="Bean实例化三种方式"></a>Bean实例化三种方式</h4><ul>
<li>无参构造方法实例化</li>
</ul>
<blockquote>
<p>bean id=”useDao” class=”top.rainbowcat.dao.Impl.UserDaoImpl”&gt;</bean></p>
</blockquote>
<ul>
<li>工厂静态方法实例化</li>
</ul>
<blockquote>
<p>bean id=”useDao” class=”top.rainbowcat.factory.StaticFactory” factory-method=”getUserDao”&gt;</bean></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticFactory</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title">getUserDao</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>工厂实例方法实例化</li>
</ul>
<blockquote>
<p>bean id=”factory” class=”top.rainbowcat.factory.DynamicFactory”&gt;</bean><br>bean id=”useDao” factory-bean=”factory” factory-method=”getUserDao”&gt;</bean></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicFactory</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDao <span class="hljs-title">getUserDao</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h4><p>因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService,所以可以在Spring容器中，将UserDao设置到UserService内部。</p>
<ol>
<li>Bean的依赖注入概念<br>依赖注入(Dependency Injection) :它是Spring框架核心IOC的具体实现。<br>在编写程序时，通过控制反转，把对象的创建交给了Spring, 但是代码中不可能出现没有依赖的情况。<br>I0C解耦只是降低他们的依赖关系，但不会消除。例如:业务层仍会调用持久层的方法。<br>那这种业务层和持久层的依赖关系,在使用Spring之后,就让Spring来维护了。<br>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</li>
<li>Bean的依赖注入方式</li>
</ol>
<ul>
<li>set方法<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.service.Impl.UserServiceImpl"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--name是service当中的set方法的属性--&gt;</span><br>    <span class="hljs-comment">&lt;!--ref是容器当中的id值,代表对象引用（注入普通数据类型时不能使用）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
外部程序在使用service的时候，要使用容器当中的才能正常调用dao层。直接new出来的service对象，无法获取到容器当中注入给service的dao对象。<br></li>
</ul>
<p><strong>P命名空间注入：</strong>本质上也是set方法注入，但比上述set方法注入更加方便（主要体现在配置文件中）。</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--首先引入P命名空间--&gt;</span><br>xmlns:p="http://www.springframework.org/schema/p"<br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.service.Impl.UserServiceImpl"</span> <span class="hljs-attr">p:userDao-ref</span>=<span class="hljs-string">"userDao"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>构造方法<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.service.Impl.UserServiceImpl"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

</li>
</ul>
<h4 id="Bean的依赖注入的数据类型"><a href="#Bean的依赖注入的数据类型" class="headerlink" title="Bean的依赖注入的数据类型"></a>Bean的依赖注入的数据类型</h4><p>上面的操作，都是注入的引用Bean,除了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。<br><br>注入数据的三种数据类型：</p>
<ul>
<li>普通数据类型</li>
<li>引用数据类型</li>
<li>集合数据类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.dao.Impl.UserDaoImpl"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入普通数据类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"lisi"</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--注入集合数据类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.domain.User"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userMap"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"u1"</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">"user1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h4 id="引入其他配置文件（分模块开发）"><a href="#引入其他配置文件（分模块开发）" class="headerlink" title="引入其他配置文件（分模块开发）"></a>引入其他配置文件（分模块开发）</h4><p>实际开发中，Spring的配置内容非常多,这就导致Spring配置很繁杂且体积很大,所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p>
<blockquote>
<import resource="applicationContext-xxx.xml"/>
</blockquote>
<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p><strong>Spring的重要配置</strong></p>
<ol>
<li><p><code>&lt;bean&gt;</code>标签</p>
<ul>
<li>id属性:在容器中Bean实例的唯一标识， 不允许重复</li>
<li>class属性:要实例化的Bean的全限定名</li>
<li>scope属性:Bean的作用范围，常用是Singleton (默认)和prototype</li>
</ul>
</li>
<li><p><code>&lt;property&gt;</code>标签:属性注入</p>
<ul>
<li>name属性:属性名称</li>
<li>value属性:注入的普通属性值</li>
<li>ref属性:注入的对象引用值</li>
</ul>
</li>
<li><p><code>&lt;list&gt;</code>标签</p>
</li>
<li><p><code>&lt;map&gt;</code>标签</p>
</li>
<li><p><code>&lt;properties&gt;</code>标签</p>
</li>
<li><p><code>&lt;constructor-arg&gt;</code>标签</p>
</li>
<li><p><code>&lt;import&gt;</code>标签:导入其他的Spring的分文件</p>
</li>
</ol>
<h1 id="Spring的相关API"><a href="#Spring的相关API" class="headerlink" title="Spring的相关API"></a>Spring的相关API</h1><h2 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h2><ol>
<li>ClassPathXmlApplicationContext<br>它是从类的根路径下加载配置文件推荐使用这种。</li>
<li>FileSystemXmlApplicationContext<br>它是从磁盘路径.上加载配置文件，配置文件可以在磁盘的任意位置。</li>
<li>AnnotationConfigApplicationContext<br>当使用注解配置容器对象时，需要使用此类来创建spring容器。它用来读取注解。</li>
</ol>
<h2 id="getBean-方法使用"><a href="#getBean-方法使用" class="headerlink" title="getBean()方法使用"></a>getBean()方法使用</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> object <span class="hljs-title">getBean</span> <span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    assertBeanFactoryActive() ;<br>    &lt;!--例如：getBean(<span class="hljs-string">"UserService"</span>)--&gt;<br>    <span class="hljs-keyword">return</span> getBeanFactory() .getBean(name) ;<br></code></pre></div></td></tr></table></figure>
<p>此类方法时通过id获取，允许容器中有多个相同类型的对象。当容器中某一类型的对象只有一个时，才可以使用下面的方式。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123; <br>    assertBeanFactoryLstive() ;<br>    &lt;!--例如：getBean(UserService<span class="hljs-class">.<span class="hljs-keyword">class</span>)--&gt;<br>    <span class="hljs-title">return</span> <span class="hljs-title">getBeanFactory</span>().<span class="hljs-title">getBean</span>(<span class="hljs-title">requiredType</span>) </span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h1 id="Spring配置数据源（连接池）"><a href="#Spring配置数据源（连接池）" class="headerlink" title="Spring配置数据源（连接池）"></a>Spring配置数据源（连接池）</h1><h2 id="数据源（连接池）的作用"><a href="#数据源（连接池）的作用" class="headerlink" title="数据源（连接池）的作用"></a>数据源（连接池）的作用</h2><ul>
<li>数据源(连接池)是提高程序性能如出现的</li>
<li>事先实例化数据源，初始化部分连接资源</li>
<li>使用连接资源时从数据源中获取</li>
<li>使用完毕后将连接资源归还给数据源</li>
</ul>
<h1 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h1><h2 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a>原始注解</h2><table>
    <tr>
        <th>注解</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">@Component</td>
        <td  align="center">使用在类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Controller</td>
        <td  align="center">使用在web层类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Service</td>
        <td  align="center">使用在service层类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Repository</td>
        <td  align="center">使用在dao层类上用于实例化Bean</td>
    </tr>
    <tr>
        <td  align="center">@Autowired</td>
        <td  align="center">使用在字段上用于根据类型依赖注入</td>
    </tr>
    <tr>
        <td  align="center">@Qualifier</td>
        <td  align="center">结合@Autowired-起使用用于根据名称进行依赖注入</td>
    </tr>
    <tr>
        <td  align="center">@Resource</td>
        <td  align="center">相当于@Autowired+@Qualifier,按照名称进行注入</td>
    </tr>
    <tr>
        <td  align="center">@Value</td>
        <td  align="center">注入普通属性</td>
    </tr>
    <tr>
        <td  align="center">@Scope</td>
        <td  align="center">标注Bean的作用范围</td>
    </tr>
    <tr>
        <td  align="center">@PostConstruct</td>
        <td  align="center">使用在方法上标注该方法是Bean的初始化方法</td>
    </tr>
    <tr>
        <td  align="center">@PreDestroy</td>
        <td  align="center">使用在方法 上标注该方法是Bean的销毁方法</td>
    </tr>
</table>
使用注解进行开发时，需要在applicationC ontext.xml中配置组件扫描,作用是指定哪个包及其子包下的Bean
需要进行扫描以便识别使用注解配置的类、字段和方法。
<--注解的组件扫描- >
> <context:component-scan base-package ="top.rainbowcat"></context:component-scan>

<p><strong>示例:</strong><br></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span><br>       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  配置组件扫描  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span>(<span class="hljs-string">"userDao"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"save..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-meta">@Service</span>(<span class="hljs-string">"userService"</span>)  <span class="hljs-comment">//配置注解</span><br><span class="hljs-meta">@Scope</span>(<span class="hljs-string">"prototype"</span>)  <span class="hljs-comment">//设置作用域</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Autowired</span>  <span class="hljs-comment">//按照类型注入可以省去@Qualifier("userDao")</span><br>    <span class="hljs-meta">@Qualifier</span>(<span class="hljs-string">"userDao"</span>)  <span class="hljs-comment">//按照id值去匹配,要结合@Autowired使用</span><br>    <span class="hljs-comment">//@Resource(name="userDao"),相当于@Autowired + @Qualifier("userDao")</span><br>    <span class="hljs-comment">//在使用注解进行注入时,set方法可以省去</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>用注解注入普通数据,可以从容器中获取键值对的数据进行注入:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;jdbc.driver&#125;"</span>)<br><span class="hljs-keyword">private</span> String driver;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(driver);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h2><p>使用上面的注解还不能全部替代xml配置文件,还需要使用注解替代的配置如下: </p>
<ul>
<li>非自定义的Bean的配置: <code>&lt;bean&gt;</code></li>
<li>加载properties文件的配置: <code>&lt;context:property-placeholder&gt;</code></li>
<li>组件扫描的配置: <code>&lt;context:component-scan&gt;</code></li>
<li>引入其他文件: <code>&lt;import&gt;</code></li>
</ul>
<table>
    <tr>
        <th>注解</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">@Configuration</td>
        <td  align="center">用于指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解</td>
    </tr>
    <tr>
        <td  align="center">@ComponentScan</td>
        <td  align="center">用于指定Spring在初始化容器时要扫描的包。<br>
            作用和在Spring的xml配置文件中的
            <context:component-scan base package= "top.rainbowcat"/>-样</td>
    </tr>
    <tr>
        <td  align="center">@Bean</td>
        <td  align="center">使用在方法上，标注将该方法的返回值存储到Spring容器中</td>
    </tr>
    <tr>
        <td  align="center">@PropertySource</td>
        <td  align="center">用于加载.properties文件中的配置</td>
    </tr>
    <tr>
        <td  align="center">@Import</td>
        <td  align="center">用于导入其他配置类</td>
    </tr>
</table>
**示例:**
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span>(<span class="hljs-string">"userDao"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"save..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>(<span class="hljs-string">"userService"</span>)  <span class="hljs-comment">//service的注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier</span>(<span class="hljs-string">"userDao"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * Spring核心配置类<br> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//&lt;!--  配置组件扫描  --&gt;</span><br><span class="hljs-comment">//&lt;context:component-scan base-package="top.rainbowcat"&gt;&lt;/context:component-scan&gt;</span><br><span class="hljs-meta">@ComponentScan</span>(<span class="hljs-string">"top.rainbowcat"</span>)  <span class="hljs-comment">//配置组件扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfiguration</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//从配置文件加载</span><br><span class="hljs-comment">//&lt;context:property-placeholder location="classpath:jdbc.properties"&gt;&lt;/context:property-placeholder&gt;</span><br><span class="hljs-meta">@PropertySource</span>(<span class="hljs-string">"classpath:jdbc.properties"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSoueceConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;jdbc.drive&#125;"</span>)<br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>)<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>)<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>)<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Bean</span>(<span class="hljs-string">"dataSource"</span>)  <span class="hljs-comment">//对方法添加注解</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driver);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="Spring集成Junit"><a href="#Spring集成Junit" class="headerlink" title="Spring集成Junit"></a>Spring集成Junit</h2><p>让SpringJunit负责创建Spring容器,但是需要将配置文件的名称告诉它。<br><br>将需要进行测试Bean直接在测试类中进行注入。</p>
<h4 id="Spring集成Junit的步骤"><a href="#Spring集成Junit的步骤" class="headerlink" title="Spring集成Junit的步骤"></a>Spring集成Junit的步骤</h4><ul>
<li>导入spring集成Junit的坐标</li>
<li>使用@Runwi th注解替换原来的运行期</li>
<li>使用@ContextConfiguration指定配置文件或配置类</li>
<li>使用@Autowi red注入需要测试的对象</li>
<li>创建测试方法进行测试</li>
</ul>
<p><strong>pom.xml导入Junit坐标:</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>将测试类中的代码进行修改:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//指定测试内核</span><br><span class="hljs-meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="hljs-class">.<span class="hljs-keyword">class</span>)<br>//指定配置文件<br>@<span class="hljs-title">ContextConfiguration</span>(<span class="hljs-title">classes</span> </span>= &#123;SpringConfiguration<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">DataSourceConfiguration</span>.<span class="hljs-title">class</span>&#125;)<br><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">SpringTest</span> </span>&#123;<br>    <span class="hljs-comment">//需要测试哪个,直接注入即可</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        userService.save();<br>        System.out.println(dataSource.getConnection());<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h1 id="Spring的AOP"><a href="#Spring的AOP" class="headerlink" title="Spring的AOP"></a>Spring的AOP</h1><h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p>AOP为Aspect Oriented Programming的缩写,意思为面向切面编程,是通过预编译方式和运行期动态代理实现程序功能的统-维护的一种技术。<br><br>AOP是OOP（面向对象编程）的延续,是软件开发中的一个热点,也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离,从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br></p>
<h2 id="AOP的作用及其优势"><a href="#AOP的作用及其优势" class="headerlink" title="AOP的作用及其优势"></a>AOP的作用及其优势</h2><ul>
<li>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强。</li>
<li>优势：减少代码复用，提高开发效率，并且便于维护。</li>
</ul>
<h2 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h2><p>实际上，AOP的底层是通过Spring提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ol>
<li>动态代理有什么作用及应用场景?<ul>
<li>日志集中打印</li>
<li>事务</li>
<li>权限管理</li>
<li>AOP</li>
</ul>
</li>
</ol>
<p>2.在Spring Aop当中可以哪些方式实现，及区别?<br>    - java Proxy(动态构建字节码)(动态构建全新字节码bean初始化的时候)<br>    - cglib(动态构建字节码)(动态构建全新字节码bean初始化的时候)<br>    - Aspectj(修改目标类的字节，织入代理的字节，在程序编译(编译的时候插入动态代理的字节码，不会生成全新的Class)<br>    - instrumentation (修改目标类的字节码、类装载的时候动态拦截去修改,基于javaagent)javaagent:spring-instrument-4.3.8.RELEASE.jar(类装载的时候插入动态代理的字节码，不会生成全新的Class)</p>
<p>以上几种都是对JVM字节码进行操作，但操作方式又有不同。前两种是新增一个完整的Class字节码（必须要用到反射），而后两种是修改现有类的字节码（不需要使用反射）。</p>
<p>静态代理的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>*目标对象<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class <span class="hljs-title">Rainbow</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"hello"</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**<br>*没有接口，使用cglib的方式（代理对象）<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class RainbowProxy extends <span class="hljs-title">Rainbow</span><span class="hljs-params">()</span></span>&#123;<br>    Rainbow target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//插入代理的前置逻辑</span><br>    <span class="hljs-keyword">long</span> begin = System.currentTimeMillis();<br>    <span class="hljs-comment">//需要增强的目标对象的方法</span><br>    target.sayHello();<br>    <span class="hljs-comment">//插入代理的后置逻辑</span><br>    <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>    System.out.println(end-begin);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>基于jdk的动态代理的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-comment">/**<br> * 目标接口<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TargetInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">/**<br> * 接口的实现类<br> * 目标对象(也即是需要被增强的)<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Target</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TargetInterface</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"save running..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * 增强方法<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Advice</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"前置增强逻辑"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"后置增强逻辑"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * 动态代理<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">final</span> Target target = <span class="hljs-keyword">new</span> Target();<span class="hljs-comment">//目标对象</span><br>        <span class="hljs-keyword">final</span> Advice advice = <span class="hljs-keyword">new</span> Advice();<span class="hljs-comment">//获得增强方法的对象</span><br><br>        <span class="hljs-comment">//接收动态生成的代理对象，要用接口对象接收（目标对象与代理对象属于同级，故需要用其共同接口接收）</span><br>        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(),  <span class="hljs-comment">//目标对象的类加载器</span><br>                target.getClass().getInterfaces(),  <span class="hljs-comment">//目标对象相同的接口字节码对象数组</span><br>                <span class="hljs-keyword">new</span> InvocationHandler() &#123;           <span class="hljs-comment">//调用代理对象的任何方法，实质上执行的都是invoke方法</span><br>        <span class="hljs-comment">//TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(ProxyTest.class.getClassLoader(), new Class[]&#123;TargetInterface.class&#125;, new InvocationHandler() &#123;</span><br>            <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                        advice.before();<span class="hljs-comment">//前置增强</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">return</span> method.invoke(target, args);<span class="hljs-comment">//target：目标方法，args：实际参数</span><br>                        &#125; <span class="hljs-keyword">finally</span> &#123;<br>                            advice.after();<span class="hljs-comment">//后置增强</span><br>                        &#125;<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-comment">//调用代理对象的方法</span><br>        proxy.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>基于cglib的动态代理的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 目标对象<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Target</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"save running..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * 增强方法<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Advice</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"前置增强逻辑"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"后置增强逻辑"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * 动态代理<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">final</span> Target target = <span class="hljs-keyword">new</span> Target();<span class="hljs-comment">//目标对象</span><br>        <span class="hljs-keyword">final</span> Advice advice = <span class="hljs-keyword">new</span> Advice();<span class="hljs-comment">//获得增强方法的对象</span><br><br>        <span class="hljs-comment">//返回值 就是动态生成的代理对象  基于cglib</span><br>        <span class="hljs-comment">//1、创建增强器</span><br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>        <span class="hljs-comment">//2、创建父类（目标类）</span><br>        enhancer.setSuperclass(Target<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        <span class="hljs-comment">//3、设置回调函数</span><br>        enhancer.setCallback(<span class="hljs-keyword">new</span> MethodInterceptor()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                advice.before();<span class="hljs-comment">//前置增强</span><br>                Object invoke = method.invoke(target, args);<br>                advice.after();<span class="hljs-comment">//后置增强</span><br>                <span class="hljs-keyword">return</span> invoke;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//4、生成代理对象</span><br>        Target proxy = (Target) enhancer.create();<br><br><br>        <span class="hljs-comment">//测试</span><br>        proxy.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<h2 id="常用的AOP动态代理技术"><a href="#常用的AOP动态代理技术" class="headerlink" title="常用的AOP动态代理技术"></a>常用的AOP动态代理技术</h2><ul>
<li><strong>JDK代理</strong>:基于接口的动态代理技术。目标对象（需要增强的对象）和动态代理（运行时内存中生产的）实现同一个接口。</li>
<li><strong>cglib代理</strong>:基于父类的动态代理技术</li>
</ul>
<h2 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h2><ul>
<li>Target（目标对象）：代理的目标的对象</li>
<li>Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类</li>
<li>JoinPoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法, 因为spring只支持方法类型的连接点</li>
<li>Pointcut（切入点）：所谓切入点是指我们要对哪些JoinPoint进行拦截的定义（连接点中要被增强的部分）</li>
<li>Advice（通知/增强）：所谓通知是指拦截到JoinPoint之后所要做的事情就是通知</li>
<li>Aspect（切面）：是切点和通知（引介）的结合</li>
<li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入,而Aspect采用编译期织入和类装载期织入（就是将切点跟通知/增强结合的过程）</li>
</ul>
<h2 id="AOP开发明确的事项"><a href="#AOP开发明确的事项" class="headerlink" title="AOP开发明确的事项"></a>AOP开发明确的事项</h2><ol>
<li><p>需要编写的内容</p>
<ul>
<li>编写核心业务代码（目标类的目标方法）</li>
<li>编写切面类，切面类中有通知（增强功能方法）</li>
<li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li>
</ul>
</li>
<li><p>AOP技术实现的内容</p>
<p> Spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
</li>
<li><p>AOP底层使用哪种代理方式</p>
<p> 在spring中,框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>
</li>
</ol>
<h2 id="AOP配置方式"><a href="#AOP配置方式" class="headerlink" title="AOP配置方式"></a>AOP配置方式</h2><h4 id="xml方式进行配置"><a href="#xml方式进行配置" class="headerlink" title="xml方式进行配置"></a>xml方式进行配置</h4><ul>
<li>导入AOP相关坐标</li>
<li>创建目标接口和目标类(内部有切点)</li>
<li>创建切面类(内部有增强方法)</li>
<li>将目标类和切面类的对象创建权交给spring</li>
<li>在applicationContextxml中配置织入关系</li>
<li>测试代码</li>
</ul>
<ol>
<li>导入坐标（第三方的框架）<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li>切点表达式<ul>
<li>访问修饰符可以省略</li>
<li>返回值类型、包名、类名、方法名乐意用星号*代表任意</li>
<li>包名与类名之间一个点.代表当前包下的类，两个点.. 表示当前包及其子包下的类</li>
<li>参数列表可以使用两个点..表示任意个数，任意类型的参数列表（方法的参数）</li>
</ul>
</li>
</ol>
<blockquote>
<p>execution([修饰符]返回值类型包名.类名.方法名(参数))</p>
</blockquote>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--top.rainbowcat.aop包下的Target类中的save()无参、无返回值方法--&gt;</span><br>execution(public void top.rainbowcat.aop.Target.save())<br><span class="hljs-comment">&lt;!--top.rainbowcat.aop包下的Target类中的任意无返回值的方法--&gt;</span><br>execution(void top.rainbowcat.aop.Target.*(..))<br><span class="hljs-comment">&lt;!--top.rainbowcat.aop包下的任意类中的任意方法，返回值也不限--&gt;</span><br>execution(* top.rainbowcat.aop.*.*(..))<br><span class="hljs-comment">&lt;!--top.rainbowcat.aop包及其子包下的任意类中的任意方法，返回值也不限--&gt;</span><br>execution(* top.rainbowcat.aop..*.*(..))<br><span class="hljs-comment">&lt;!--任意包中任意类的任意方法--&gt;</span><br>execution(* *..*.*(..))<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>通知类型<br>通知的配置语法：<blockquote>
<p>&lt;aop:通知类型 method=”切面类中方法名” pointcut=”切面表达式”&gt;&lt;/aop:通知类型&gt;</p>
</blockquote>
</li>
</ol>
<table>
    <tr>
        <th>名称</th>
        <th>标签</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">前置通知</td>
        <td  align="center">aop:before</td>
        <td  align="center">用于配置前置通知。指定增强的方法在切入点方法之前执行</td>
    </tr>
    <tr>
        <td  align="center">后置通知</td>
        <td  align="center">aop:after-returning</td>
        <td  align="center">用于配置后置通知。指定增强的方法在切入点方法之后执行</td>
    </tr>
    <tr>
        <td  align="center">环绕通知</td>
        <td  align="center">aop:around</td>
        <td  align="center">用于配置环绕通知。指定增强的方法在切入点方法之前和之后都</td>
    </tr>
    <tr>
        <td  align="center">异常抛出通知</td>
        <td  align="center">aop:throwing</td>
        <td  align="center">用于配置异常抛出通知。指定增强的方法在出现异常时执行</td>
    </tr>
    <tr>
        <td  align="center">最终通知</td>
        <td  align="center">aop:after</td>
        <td  align="center">用于配置最终通知。无论增强方式执行是否有异常都会执行</td>
    </tr>
</table>

<p>示例：</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">/**<br> * 目标接口<br> */<br>public interface TargetInterface &#123;<br>    public void save();<br>&#125;<br><br>/**<br> * 接口的实现类<br> * 目标对象(也即是需要被增强的)<br> */<br>public class Target implements TargetInterface &#123;<br>    @Override<br>    public void save() &#123;<br>        int i = 1/0;//用于测试异常抛出<br>        System.out.println("save running...");<br>    &#125;<br>&#125;<br><br>/**<br> * 切面类<br> */<br>public class MyAspect &#123;<br>    /**<br>     * 前置增强<br>     */<br>    public void before()&#123;<br>        System.out.println("前置增强...");<br>    &#125;<br><br>    /**<br>     * 后置增强<br>     */<br>    public void afterReturning()&#123;<br>        System.out.println("后置增强...");<br>    &#125;<br><br>    /**<br>     * 环绕增强方法<br>     * @param pjp 正在执行的连接点（切点）<br>     * @return<br>     */<br>    public Object around(ProceedingJoinPoint pjp) throws Throwable &#123;<br>        System.out.println("环绕前增强...");<br>        //切点方法<br>        Object proceed = pjp.proceed();<br>        System.out.println("环绕后增强...");<br>        return proceed;<br>    &#125;<br><br>    /**<br>     * 异常抛出增强<br>     */<br>    public void afterThrowing()&#123;<br>        System.out.println("异常抛出增强...");<br>    &#125;<br>    /**<br>     * 最终增强<br>     */<br>    public void after()&#123;<br>        System.out.println("最终增强...");<br>    &#125;<br>&#125;<br><br>/**<br>*测试类<br>*/<br>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration("classpath:applicationContext.xml")<br>public class AopTest &#123;<br>    @Autowired<br>    private TargetInterface target;<br>    @Test<br>    public void Test()&#123;<br>        target.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>XML配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>   <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span><br>    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>                    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置目标对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"target"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.aop.Target"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myAspect"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.aop.MyAspect"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置织入、告诉spring需要增强的方法和增强功能，首先要引入AOP命名空间--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--声明切面：切点 + 通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myAspect"</span>&gt;</span><span class="hljs-comment">&lt;!--只有在此配置了，切面才能被spring容器获取到--&gt;</span><br>                    <span class="hljs-comment">&lt;!--aop:后面的参数是通知，method当中的是切面类中方法的名字--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">"execution(public void top.rainbowcat.aop.Target.save())"</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"afterReturning"</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"around"</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"afterThrowing"</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">"execution(* top.rainbowcat.aop.*.*(..))"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="4">
<li>切点表达式的抽取<br>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用pointcut-ref属性代替pointcut属性来引用抽取后的切点表达式。<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--抽取切点表达式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myPointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* top.rainbowcat.aop.*.*(..))"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--声明切面：切点 + 通知--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myAspect"</span>&gt;</span><span class="hljs-comment">&lt;!--只有在此配置了，切面才能被spring容器获取到--&gt;</span><br>            <span class="hljs-comment">&lt;!--aop:后面的参数是通知，method当中的是切面类中方法的名字--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"myPointcut"</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"myPointcut"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

</li>
</ol>
<h4 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h4><ol>
<li>开发步骤</li>
</ol>
<ul>
<li>创建目标接口和目标类(内部有切点)</li>
<li>创建切面类(内部有增强方法)</li>
<li>将目标类和切面类的对象创建权交给spring</li>
<li>在切面类中使用注解配置织入关系</li>
<li>在配置文件中开启组件扫描和AOP的自动代理</li>
<li>测试</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">/**<br> * 目标对象<br> */<br>@Component("target")  //添加目标类注解<br>public class Target implements TargetInterface &#123;<br>    @Override<br>    public void save() &#123;<br>        System.out.println("save running...");<br>    &#125;<br>&#125;<br><br>/**<br> * 切面类<br> */<br>@Component("myAspect")  //添加切面类注解<br>@Aspect  //标注myAspect是切面<br>public class MyAspect &#123;<br><br>    @Before("execution(* top.rainbowcat.aop.*.*(..))")//通知类型及切点表达式<br>    public void before()&#123;<br>        System.out.println("前置增强...");<br>    &#125;<br>&#125;<br><br>/**<br>*测试类<br>*/<br>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration("classpath:applicationContext.xml")//在配置文件中要设置：组件扫描、AOP自动代理<br>public class AopTest &#123;<br>    @Autowired<br>    private TargetInterface target;<br>    @Test<br>    public void Test()&#123;<br>        target.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span><br>       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span><br>        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<br>                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br>"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置组件扫描--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--配置AOP自动代理--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>注解通知的类型<br>通知的配置语法：<blockquote>
<p>@通知注解(“切点表达式”)</p>
</blockquote>
</li>
</ol>
<table>
    <tr>
        <th>名称</th>
        <th>标签</th>
        <th>说明</th>
    </tr>
    <tr>
        <td  align="center">前置通知</td>
        <td  align="center">@Before</td>
        <td  align="center">用于配置前置通知。指定增强的方法在切入点方法之前执行</td>
    </tr>
    <tr>
        <td  align="center">后置通知</td>
        <td  align="center">AfterReturning</td>
        <td  align="center">用于配置后置通知。指定增强的方法在切入点方法之后执行</td>
    </tr>
    <tr>
        <td  align="center">环绕通知</td>
        <td  align="center">@Around</td>
        <td  align="center">用于配置环绕通知。指定增强的方法在切入点方法之前和之后都</td>
    </tr>
    <tr>
        <td  align="center">异常抛出通知</td>
        <td  align="center">@AfterThrowing</td>
        <td  align="center">用于配置异常抛出通知。指定增强的方法在出现异常时执行</td>
    </tr>
    <tr>
        <td  align="center">最终通知</td>
        <td  align="center">@After</td>
        <td  align="center">用于配置最终通知。无论增强方式执行是否有异常都会执行</td>
    </tr>
</table>

<ol start="3">
<li>切点表达式抽取<br>同xml配置aop一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法,在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。<br><br>具体如下:<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 切面类<br> */</span><br><span class="hljs-meta">@Component</span>(<span class="hljs-string">"myAspect"</span>)  <span class="hljs-comment">//添加切面类注解</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//标注myAspect是切面</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 定义切点表达式<br>     */</span><br>    <span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">"execution(* top.rainbowcat.aop.*.*(..))"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pointcut</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before</span>(<span class="hljs-string">"pointcut()"</span>)<span class="hljs-comment">//引用方式一</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"前置增强..."</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterReturning</span>(<span class="hljs-string">"MyAspect.pointcut()"</span>)<span class="hljs-comment">//引用方式二</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"后置增强..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

</li>
</ol>
<h1 id="Spring-JdbcTemplate基本使用"><a href="#Spring-JdbcTemplate基本使用" class="headerlink" title="Spring JdbcTemplate基本使用"></a>Spring JdbcTemplate基本使用</h1><h2 id="JdbcTemplate概述"><a href="#JdbcTemplate概述" class="headerlink" title="JdbcTemplate概述"></a>JdbcTemplate概述</h2><p>它是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。例如:操作关系型数据的JdbcTemplate和ibernateTemplate,操作nosq|数据库的RedisTemplate,操作消息队列的Jms Template等等。</p>
<h2 id="JdbcTemplate开发步骤"><a href="#JdbcTemplate开发步骤" class="headerlink" title="JdbcTemplate开发步骤"></a>JdbcTemplate开发步骤</h2><ul>
<li>导入spring-jdbc和spring-tx坐标</li>
<li>创建数据库表和实体</li>
<li>创建JdbcTemplate对象</li>
<li>执行数据库操作</li>
</ul>
<p>首先要导入相应坐标：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * xml配置方式，测试JdbcTemplate<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcTemplateTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 不使用容器,直接创建<br>     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//创建数据源对象</span><br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">"com.mysql.jdbc.Driver"</span>);<br>        dataSource.setUrl(<span class="hljs-string">"jdbc:mysql:///rainbowcat?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF8&amp;serverTimezone=GMT&amp;allowPublicKeyRetrieval=true"</span>);<br>        dataSource.setUsername(<span class="hljs-string">"root"</span>);<br>        dataSource.setPassword(<span class="hljs-string">"dong123"</span>);<br><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate();<br>        <span class="hljs-comment">//在使用前须设置数据源</span><br>        template.setDataSource(dataSource);<br>        String sql = <span class="hljs-string">"select * from userinfo"</span>;<br>        List&lt;UserInfo&gt; infos = template.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo<span class="hljs-class">.<span class="hljs-keyword">class</span>))</span>;<br>        System.out.println(infos);<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     *使用spring容器<br>     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test2</span><span class="hljs-params">()</span></span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);<br>        JdbcTemplate template = app.getBean(JdbcTemplate<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        String sql = <span class="hljs-string">"select * from userinfo"</span>;<br>        List&lt;UserInfo&gt; infos = template.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo<span class="hljs-class">.<span class="hljs-keyword">class</span>))</span>;<br>        System.out.println(infos);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加载外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:jdbc.properties"</span> /&gt;</span><br><span class="hljs-comment">&lt;!--配置数据源对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.drive&#125;"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--jdbc模板对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"template"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>使用注解进行测试，以及CRUD使用：</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration("classpath:applicationContext.xml")<br>public class JdbcDRUDTest &#123;<br>    @Autowired<br>    private JdbcTemplate template;<br><br>    @Test<br>    public void testInsert()&#123;<br>        template.update("insert into userinfo value (?, ?, ?, ?, ?, ?, ?)", "admin", "123", "管理员", "男", "admin", "12345678900", "admin@qq.com");<br>    &#125;<br><br>    @Test<br>    public void testUpdate()&#123;<br>        template.update("update userinfo set email = ? where username = ?", "1029322685@qq.com", "admin");<br>    &#125;<br><br>    @Test<br>    public void testDelete()&#123;<br>        template.update("delete  from userinfo where username = ?", "admin");<br>    &#125;<br><br>    @Test<br>    public void testQueryAll()&#123;<br>        List&lt;UserInfo&gt; infos = template.query("select * from userinfo", new BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo.class));<br>        System.out.println(infos);<br>    &#125;<br><br>    @Test<br>    public void testQueryOne()&#123;<br>        UserInfo userInfo = template.queryForObject("select * from userinfo where username = ?", new BeanPropertyRowMapper&lt;UserInfo&gt;(UserInfo.class), "root");<br>        System.out.println(userInfo);<br>    &#125;<br>    <br>    @Test<br>    public void testQueryCount()&#123;<br>        Integer count = template.queryForObject("select count(*) from userinfo", Integer.class);<br>        System.out.println(count);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h1 id="Spring的事务控制"><a href="#Spring的事务控制" class="headerlink" title="Spring的事务控制"></a>Spring的事务控制</h1><h2 id="编程式事务控制"><a href="#编程式事务控制" class="headerlink" title="编程式事务控制"></a>编程式事务控制</h2><ol>
<li>PlatformTransactionManager<br>PlatformTransactionManager接口是spring的事务管理器，它里面提供了我们常用的操作事务的方法。<table>
 <tr>
     <th>方法</th>
     <th>说明</th>
 </tr>
 <tr>
     <td  align="center">TransactionStatus getTransaction (TransactionDefinition definition)</td>
     <td  align="center">获取事务的状态信息</td>
 </tr>
 <tr>
     <td  align="center">void commit (TransactionStatus status)</td>
     <td  align="center">提交事务</td>
 </tr>
 <tr>
     <td  align="center">void rollback (TransactionStatus status)</td>
     <td  align="center">回滚事务</td>
 </tr>
</table>

</li>
</ol>
<p><strong>注意：</strong><br>PlatformTransactionManager是接口类型，不同的Dao层技术则有不同的实现类例如: </p>
<ul>
<li>Dao 层技术是jdbc或mybatis时: org.springframework.jdbc.datasource.DataSourceTransactionManager。</li>
<li>Dao层技术是hibernate时: org.springframework.orm.hibernate5.HibernateTransactionManager。</li>
</ul>
<ol start="2">
<li><p>TransactionDefinition<br>TransactionDefinition是事务的定义信息对象，里面有如下方法:</p>
<table>
 <tr>
     <th>方法</th>
     <th>说明</th>
     <th></th>
 </tr>
 <tr>
     <td>int getIsolationLevel ()</td>
     <td  align="center">获得事务的隔离级别<br>（设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。）</td>
     <td  align="center">
         ISOLATION_DEFAULT：默认的<br>
         ISOLATION_READ_ UNCOMMITTED：哪种都不能解决<br>
         ISOLATION_READ_COMMITTED：解决脏读<br>
         ISOLATION_REPEATABLE_READ：解决不可重复读<br>
         ISOLATION_SERIALIZABLE：全都能解决（性能较低）<br>
     </td>
 </tr>
 <tr>
     <td>int getPropagationBehavior ()</td>
     <td  align="center">获得事务的传播行为<br>（解决业务方法调用业务方法时，事务同一性问题）</td>
     <td  align="center"></td>
 </tr>
 <tr>
     <td>int getTimeout ()</td>
     <td  align="center">获得超时时间</td>
     <td  align="center">
         REQUIRED:如果当前没有事务，就新建-个事务，如果已经存在一个事务中，加入到这个事务中。-般的选择(默认值)。<br>
         SUPPORTS:支持当前事务,如果当前没有事务,就以非事务方式执行(没有事务)。<br>
         MANDATORY:使用当前的事务，如果当前没有事务，就抛出异常。<br>
         REQUERS_NEW:新建事务，如果当前在事务中，把当前事务挂起。<br>
         NOT_SUPPORTED:以非事务方式执行操作,如果当前存在事务，就把当前事务挂起。<br>
         NEVER:以非事务方式运行，如果当前存在事务，抛出异常。<br>
         NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务,则执行REQUIRED类似的操作。<br>
         超时时间：默认值是-1,没有超时限制。如果有，以秒为单位进行设置。<br>
         是否只读：建议查询时设置为只读。<br>
     </td>
 </tr>
 <tr>
     <td>boolean isReadonly ()</td>
     <td  align="center">是否只读</td>
     <td  align="center"></td>
 </tr>
</table>
</li>
<li><p>TransactionStatus<br>TransactionStatus接口提供的是事务具体的运行状态，方法介绍如下。</p>
<table>
 <tr>
     <th>方法</th>
     <th>说明</th>
 </tr>
 <tr>
     <td>boolean hasSavepoint()</td>
     <td  align="center">是否存储回滚点</td>
 </tr>
 <tr>
     <td>boolean isCompleted()</td>
     <td  align="center">事务是否完成</td>
 </tr>
 <tr>
     <td>boolean isNewTransaction ()</td>
     <td  align="center">是否是新事务</td>
 </tr>
 <tr>
     <td>boolean isRollbackOnly ()</td>
     <td  align="center">事务是否回滚</td>
 </tr>
</table>

</li>
</ol>
<h2 id="声明式事务控制"><a href="#声明式事务控制" class="headerlink" title="声明式事务控制"></a>声明式事务控制</h2><p>Spring的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明,用在Spring配置文件中声明式的处理事务来代替代码式的处理事务。<br><br><strong>声明式事务处理的作用：</strong></p>
<ul>
<li>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务,而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可。</li>
<li>在不需要事务管理的时候,只要在设定文件上修改一下,即可移去事务管理服务,无需改变代码重新编译，这样维护起来极其方便</li>
</ul>
<p><strong>注意:</strong> Spring声明式事务控制底层就是AOP。</p>
<h4 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h4><p>需要明确以下几点：</p>
<ul>
<li>谁是切点</li>
<li>谁是通知</li>
<li>配置切面</li>
</ul>
<p>声明式事务控制的配置要点：</p>
<ul>
<li>平台事务管理器配置</li>
<li>事务通知的配置</li>
<li>事务aop织入的配置</li>
</ul>
<p>切点方法的事务参数配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"*"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>其中，&lt;tx:method&gt;代表切点方法的事务参数的配置,例如:<br><br>&lt;tx:method name=”transfer” isolation=”DEFAULT” propagation=”REQUIRED” timeout=”-1” read-only=”false”/&gt;</p>
<ul>
<li>name：切点方法名</li>
<li>isolation：事务的隔离级别</li>
<li>propagation：事务的传播行为</li>
<li>timeout：超时时间</li>
<li>read-only：是否只读</li>
</ul>
<p>示例（转账，基于XML实现）：<br></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * Dao层<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> JdbcTemplate template;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTemplate</span><span class="hljs-params">(JdbcTemplate template)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.template = template;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">(String outMan, Double money)</span> </span>&#123;<br>        template.update(<span class="hljs-string">"update account set money = money-? where name = ?"</span>, money, outMan);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">(String inMan, Double money)</span> </span>&#123;<br>        template.update(<span class="hljs-string">"update account set money = money+? where name = ?"</span>, money, inMan);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br>*目标对象，包含切点<br>*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccountDao</span><span class="hljs-params">(AccountDao accountDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.accountDao = accountDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(String outMan, String inMan, Double money)</span> </span>&#123;<br>        accountDao.out(outMan, money);<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;  <span class="hljs-comment">//用于测试事务是否起作用</span><br>        accountDao.in(inMan, money);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**<br>*模拟前端逻辑<br>*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);<br>        AccountService accountService = app.getBean(AccountService<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        accountService.transfer(<span class="hljs-string">"admin"</span>, <span class="hljs-string">"tom"</span>, <span class="hljs-number">200.00</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span><br>       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span><br>       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span><br>        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<br>                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<br>                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<br>"</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--加载外部配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:jdbc.properties"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--配置数据源对象--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.drive&#125;"</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jdbc模板对象--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"template"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--下面是事务相关配置--&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"accountDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.dao.Impl.AccountDaoImpl"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"template"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"template"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--目标对象 内部的方法即是切点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"accountService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top.rainbowcat.service.Impl.AccountServiceImp"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"accountDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"accountDao"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置平台事务管理器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--事务是通过connection起作用，connection是从datasource获取的--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通知 事务的增强--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置事务属性的参数信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--name：需要被增强的切点，这里可以配置多个事务并且可分别设置参数--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"*"</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"transfer"</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">"DEFAULT"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">"-1"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置事务的AOP织入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">"execution(* top.rainbowcat.service.Impl.*.*(..))"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h4 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h4><p>除了对相应的bean添加注解，还需要在要执行事务的方法当中进行配置：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>(<span class="hljs-string">"accountService"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br>    <span class="hljs-comment">//  此处的配置相当于  &lt;tx:method name="transfer" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/&gt;</span><br>    <span class="hljs-comment">//  也可配置到类名的上方，相当于  &lt;tx:method name="*"/&gt;</span><br>    <span class="hljs-comment">//  还需要在xml当中配置注解驱动</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span>(readOnly = <span class="hljs-keyword">false</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(String outMan, String inMan, Double money)</span> </span>&#123;<br>        accountDao.out(outMan, money);<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;  <span class="hljs-comment">//用于测试事务是否起作用</span><br>        accountDao.in(inMan, money);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>XML配置文件当中，必须要添加注解驱动才能完成事务的控制！！！</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"top.rainbowcat"</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--加载外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:jdbc.properties"</span> /&gt;</span><br><span class="hljs-comment">&lt;!--配置数据源对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.drive&#125;"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--jdbc模板对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"template"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--下面是事务相关配置--&gt;</span><br><br><span class="hljs-comment">&lt;!--配置平台事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--事务是通过connection起作用，connection是从datasource获取的--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--事务的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>注解配置声明式事务控制解析<ul>
<li>使用@Transactional在需要进行事务控制的类或是方法上修饰,注解可用的属性同xml配置方式，例如隔离级别、传播行为等。</li>
<li>注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</li>
<li>使用在方法上,不同的方法可以采用不同的事务参数配置。</li>
<li>Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven /&gt;</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven使用tomcat插件</title>
    <url>/2020/07/24/Maven%E4%BD%BF%E7%94%A8tomcat8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="maven集成tomcat7插件"><a href="#maven集成tomcat7插件" class="headerlink" title="maven集成tomcat7插件"></a>maven集成tomcat7插件</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/travel<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">uriEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">uriEncoding</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>tomcat7<span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="maven集成tomcat8插件"><a href="#maven集成tomcat8插件" class="headerlink" title="maven集成tomcat8插件"></a>maven集成tomcat8插件</h2><p>在pom.xml当中需要做以下配置：</p>
<ol>
<li>配置tomcat8-maven-plugin</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat8-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0-r1655215<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>	    <span class="hljs-comment">&lt;!-- 通过maven tomcat8:run运行项目时，访问项目的端口号 --&gt;</span><br>	    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>	    <span class="hljs-comment">&lt;!-- 项目访问路径  本例：localhost:9090,  如果配置的aa， 则访问路径为localhost:9090/aa--&gt;</span><br>	    <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/travel<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<a id="more"></a>

<p>2.配置tomcat8.x的仓库</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置Tomcat8仓库--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alfresco-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alfresco-public-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/groups/public-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>daily<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--这个google的用不了--&gt;</span><br>     <span class="hljs-comment">&lt;!--&lt;pluginRepository&gt;<br>         &lt;id&gt;beardedgeeks-releases&lt;/id&gt;<br>         &lt;url&gt;http://beardedgeeks.googlecode.com/svn/repository/releases&lt;/url&gt;<br>     &lt;/pluginRepository&gt;--&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>如何使用maven进行开发</title>
    <url>/2020/07/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8maven%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="什么是maven"><a href="#什么是maven" class="headerlink" title="什么是maven"></a>什么是maven</h2><ol>
<li>Maven简介<br>Maven是项目进行模型抽象，充分运用面向对象思想，通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven除了以程序构建能力为特色之外，还提供高级项目管理工具。<br><br>下载地址：<a href="http://archive.apache.org/dist/maven/maven-3/" target="_blank" rel="noopener">http://archive.apache.org/dist/maven/maven-3/</a></li>
</ol>
<a id="more"></a>

<ol start="2">
<li>Maven的主要作用<ul>
<li>对第三方jar包的统一管理。意思其实就是通过本地仓库或者是远程仓库更或者是中央仓库进行依赖管理，省去了导入jar包的操作。不过一般我们在配置Maven时会选择阿里的远程仓库，不会去连接中央仓库，因为太慢了，而且阿里不仅拥有中央仓库的所有jar包而且开源了自身许多有用的jar包，如数据库连接池jar包Druid(德鲁伊)。</li>
<li>将项目分模块构建，提高开发效率。意思就是说使用Maven时，其构建项目时，会将包分好，方便工作人员协同开发，提高效率。</li>
<li>Maven提供一套对项目生命周期管理的标准。意思是说，Maven为项目提供了许多有关jar包的作用域，作用范围，类的生命周期，运行范围。以及项目的编译，部署等都提供了很好的接口，只要配置下就好了。减少了开发人员思考这些无关紧要的东西，只要遵循Maven的标准就可以了。</li>
</ul>
</li>
</ol>
<h4 id="maven项目标准目录结构"><a href="#maven项目标准目录结构" class="headerlink" title="maven项目标准目录结构"></a>maven项目标准目录结构</h4><p>maven项目标准目录结构<br>src/main/java目录 核心代码部分。<br>src/main/resources 配置文件部分。<br>src/test/java目录测试代码部分。<br>src/test/resources测试配置文件。<br>src/main/webapp页面资源，js, CSs,图片等等</p>
<h4 id="maven项目常用命令"><a href="#maven项目常用命令" class="headerlink" title="maven项目常用命令"></a>maven项目常用命令</h4><p>在项目的目录下：<br>mvn clean：清除项目编译文件<br>mvn compile：将src/main下的文件进行编译<br>mvn test：将src/main、src/test下的文件进行编译<br>mvn package：对项目进行打包<br>mvn install：执行除了clean以外的操作，同时还将项目安装到本地仓库<br>mvn deploy：发布项目</p>
<h4 id="maven生命周期"><a href="#maven生命周期" class="headerlink" title="maven生命周期"></a>maven生命周期</h4><table>
  <tr>
    <th align=center>清除编译信息</th>
    <th align=center>编译</th>
    <th align=center>测试</th>
    <th align=center>打包</th>
    <th align=center>安装</th>
    <th align=center>发布</th>
    <td rowspan="2"></td>
  </tr>
  <tr>
    <td align=center>clean</td>
    <td align=center>compile</td>
    <td align=center>test</td>
    <td align=center>package</td>
    <td align=center>install</td>
    <td></td>
  </tr>
  <tr>
    <td align=center>
      清理生命周期
    </td>
    <td colspan="5" align=center>
      默认生命周期
    </td>
    <td colspan="5" align=center>
      站点生命周期
    </td>
  </tr>
</table>
#### IDEA集成maven插件
IDEA主界面当中，点击configure-settings
<figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-params">&lt;dependencies&gt;</span><br>  <span class="hljs-params">&lt;dependency&gt;</span><br>    <span class="hljs-params">&lt;groupId&gt;</span> javax.servlet<span class="hljs-params">&lt;/groupId&gt;</span><br>    <span class="hljs-params">&lt;artifactId&gt;</span>servlet-api<span class="hljs-params">&lt;/artifactId&gt;</span><br>    <span class="hljs-params">&lt;version&gt;</span><span class="hljs-number">2.5</span><span class="hljs-params">&lt;/version<br>    &lt;scope&gt;</span>provided<span class="hljs-params">&lt;/scope&gt;</span> <span class="hljs-comment">//解决jar包冲突，只在编译的时候起作用，项目运行时不起作用（test：只在测试时有用）</span><br>  <span class="hljs-params">&lt;/dependency&gt;</span><br><span class="hljs-params">&lt;dependencies&gt;</span><br></code></pre></div></td></tr></table></figure>
## 配置自己的maven骨架
阿里云镜像：
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
  </entry>
  <entry>
    <title>Redis简单使用</title>
    <url>/2020/07/16/Redis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Redis简单了解"><a href="#Redis简单了解" class="headerlink" title="Redis简单了解"></a>Redis简单了解</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Redis是一款高性能的NOSQL系列的非关系型数据库。</p>
<p>1.1.什么是NOSQL<br>NoSQL(NoSQL = Not only SQL), 意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。<br>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从<br>心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL 数据库的产生就是为了解决大规模数据集<br>合多重数据种类带来的挑战，尤其是大数据应用难题。</p>
<a id="more"></a>

<p>1.1.1. NOSQL和关 系型数据库比较<br>优点:<br>1)成本: nosq1数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。<br>2)查询速度: nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosq1数据库。<br>3)存储数据的格式: nosql的存储格式是key ,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种<br>格式，而数据库则只支持基础类型。<br>4)扩展性:关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。<br>缺点:<br>1)维护的工具和资料有限，因为nosq1是属于新的技术，不能和关系型数据库10几年的技术同日而语。<br>2)不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户 的学习和使用成本。<br>3)不提供关系型数据库对事务的处理。<br>1.1.2.非关系型数据 库的优势:<br>1)性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。<br>2)可扩展性同样也是因为基于键值对，数据之间没有耦合性,所以非常容易水平扩展。<br>1.1.3.<br>关系型数据库的优势:<br>1)复杂查询可以用sQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。<br>2) 事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势,反之亦然。<br>1.1.4.<br>总结<br>关系型数据库与NoSQL数据库并非对立而是互补的关系,即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库,<br>让NoSQL数据库对关系型数据库的不足进行弥补。<br>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据。</p>
<p>1.2.主流的NOSQL产品<br>键值(Key-Value )存储数据库<br>    相关产品: Tokyo Cabinet/Tyrant、 Redis、 Voldemort、 Berkeley DB<br>    典型应用:内容缓存，主要用于处理大量数据的高访问负载。<br>    数据模型:一系列键值对<br>    优势:快速查询<br>    劣势:存储的数据缺少结构化<br>列存储数据库<br>    相关产品: Cassandra, HBase, Riak<br>    典型应用:分布式的文件系统<br>    数据模型:以列簇式存储,将同- -列数据存在一-起<br>    优势:查找速度快,可扩展性强，更容易进行分布式扩展<br>    劣势:功能相对局限<br>文档型数据库<br>    相关产品: CouchDB、MongoDB<br>    典型应用: Web应用(与Key-Value类似， Value是结构化的)<br>    数据模型: - 系列键值对<br>    优势:数据结构要求不严格<br>    劣势:查询性能不高， 而且缺乏统一的查询语法<br>图形(Graph)数据库<br>    相关数据库: Neo4J、InfoGrid、 Infinite Graph<br>    典型应用:社交网络<br>    数据模型:图结构<br>    优势:利用图结构相关算法。<br>    劣势:需要对整个图做计算才能得出结果，不容易做分布式的集群方案。<br>1.3什么是Redis<br>Redis是用C语言开发的一个开源的高性能键值对(key-value) 数据库，官方提供测试数据, 50个并发执行100000个请求,读的速度是110000次/s ,<br>写的速度是81000次/s，且Redis通过 提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下:<br>    1)字符串类型string<br>    2)哈希类型hash<br>    3)列表类型list<br>    4)集合类型set<br>    5)有序集合类型sortedset<br>1.3.1 redis的应用场景<br>    缓存(数据查询、短连接、新闻内容、商品内容等等)<br>    聊天室的在线好友列表<br>    任务队列。(秒杀、 抢购、12306等等)<br>    应用排行榜<br>    网站访问统计<br>    数据过期处理(可以精确到毫秒<br>    分布式集群架构中的session分离</p>
<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>官网：<a href="https://www.redis.io/" target="_blank" rel="noopener">https://www.redis.io/</a><br>中文网站：<a href="https://www.redis.net.cn/" target="_blank" rel="noopener">https://www.redis.net.cn/</a><br>windows下载地址（微软的GitHub地址）：<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a></p>
<p>下载完直接解压即可，无需安装。<br>    - redis.windows.conf :配置文件<br>    - redis-cli.exe : redis的客户端<br>    - redis-server.exe : redis服务器端</p>
<h4 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h4><p><strong>redis的数据结构：</strong><br>redis存储的是: key, value格式的数据，其中key都是字符串，value有5种不同的数据结构。</p>
<h6 id="字符串类型string"><a href="#字符串类型string" class="headerlink" title="字符串类型string"></a>字符串类型string</h6><ol>
<li>存储：set key value</li>
<li>获取：get  key</li>
<li>删除：del key</li>
</ol>
<blockquote>
<p>set username lisi<br>get username<br>del username</p>
</blockquote>
<h6 id="哈希类型hash（map格式）"><a href="#哈希类型hash（map格式）" class="headerlink" title="哈希类型hash（map格式）"></a>哈希类型hash（map格式）</h6><ol>
<li>存储：hset key filed value</li>
<li>获取：hget  key filed（获取指定filed的值）、hgetall key（获取key的所有值）</li>
<li>删除：hdel key filed</li>
</ol>
<blockquote>
<p>hset user username lisi<br>hset user password 123<br>hget user username<br>hdel user username  //删除键（username）和对应的值<br>hgetall user  //获取键的所有值</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">127.0.0.1:6379&gt; hgetall<span class="hljs-built_in"> user<br></span>1) <span class="hljs-string">"username"</span><br>2) <span class="hljs-string">"lisi"</span><br>3) <span class="hljs-string">"password"</span><br>4) <span class="hljs-string">"123"</span><br></code></pre></div></td></tr></table></figure>

<h6 id="列表类型list（linkedlist格式）"><a href="#列表类型list（linkedlist格式）" class="headerlink" title="列表类型list（linkedlist格式）"></a>列表类型list（linkedlist格式）</h6><p>可以添加一个元素到列表的头部(左边)或者尾部(右边)</p>
<ol>
<li>存储：<ul>
<li>lpush key value（将元素添加到列表头部/左侧）</li>
<li>rpush key value（将元素添加到列表尾部/右侧）</li>
</ul>
</li>
<li>获取：<ul>
<li>lrange  key start end（范围获取）</li>
</ul>
</li>
<li>删除：<ul>
<li>lpop key（删除列表头部元素，并将元素返回）</li>
<li>rpop key（删除列表尾部元素，并将元素返回）</li>
</ul>
</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; LPUSH mylist aaa bbb ccc<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">3</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; LRANGE mylist <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span>) <span class="hljs-string">"ccc"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"bbb"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"aaa"</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lpop mylist<br><span class="hljs-string">"ccc"</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; LRANGE mylist <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span>) <span class="hljs-string">"bbb"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"aaa"</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lpush mylist aaa bbb<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">4</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; LRANGE mylist <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">"bbb"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"aaa"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"bbb"</span><br><span class="hljs-number">4</span>) <span class="hljs-string">"aaa"</span><br></code></pre></div></td></tr></table></figure>

<h6 id="集合类型set（不允许重复元素）"><a href="#集合类型set（不允许重复元素）" class="headerlink" title="集合类型set（不允许重复元素）"></a>集合类型set（不允许重复元素）</h6><ol>
<li>存储：sadd key value</li>
<li>获取：smembers key（获取set集合中所有元素）</li>
<li>删除：srem key value（删除set集合中的某个元素）</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt;  sadd myset a b c<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">3</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; smembers myset<br><span class="hljs-number">1</span>) <span class="hljs-string">"b"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"a"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"c"</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; sadd myset a<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">0</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; sadd myset d e<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; smembers myset<br><span class="hljs-number">1</span>) <span class="hljs-string">"b"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"a"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"d"</span><br><span class="hljs-number">4</span>) <span class="hljs-string">"c"</span><br><span class="hljs-number">5</span>) <span class="hljs-string">"e"</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; srem myset a<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; smembers myset<br><span class="hljs-number">1</span>) <span class="hljs-string">"d"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"c"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"b"</span><br><span class="hljs-number">4</span>) <span class="hljs-string">"e"</span><br></code></pre></div></td></tr></table></figure>
<h6 id="有序集合类型sortedset（不允许重复元素，且元素有序）"><a href="#有序集合类型sortedset（不允许重复元素，且元素有序）" class="headerlink" title="有序集合类型sortedset（不允许重复元素，且元素有序）"></a>有序集合类型sortedset（不允许重复元素，且元素有序）</h6><ol>
<li>存储：zadd key score value</li>
<li>获取：zrange key start end</li>
<li>删除：zrem key value</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zadd mysort <span class="hljs-number">12</span> zhang<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zadd mysort <span class="hljs-number">20</span> li<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zadd mysort <span class="hljs-number">9</span> zhao<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zrange mysort <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">"zhao"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"zhang"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"li"</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zrange mysort <span class="hljs-number">0</span> <span class="hljs-number">-1</span> withscores<br><span class="hljs-number">1</span>) <span class="hljs-string">"zhao"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"9"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"zhang"</span><br><span class="hljs-number">4</span>) <span class="hljs-string">"12"</span><br><span class="hljs-number">5</span>) <span class="hljs-string">"li"</span><br><span class="hljs-number">6</span>) <span class="hljs-string">"20"</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zrem mysort zhang<br>(<span class="hljs-built_in">int</span>eger) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; zrange mysort <span class="hljs-number">0</span> <span class="hljs-number">-1</span> withscores<br><span class="hljs-number">1</span>) <span class="hljs-string">"zhao"</span><br><span class="hljs-number">2</span>) <span class="hljs-string">"9"</span><br><span class="hljs-number">3</span>) <span class="hljs-string">"li"</span><br><span class="hljs-number">4</span>) <span class="hljs-string">"20"</span><br></code></pre></div></td></tr></table></figure>
<h6 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h6><ol>
<li>kyes * ：查询所有的键</li>
<li>type key ：获取键对应的value类型</li>
<li>del key ：删除指定key的key value</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">"myset"</span><br>2) <span class="hljs-string">"user"</span><br>3) <span class="hljs-string">"mylist"</span><br>4) <span class="hljs-string">"mysort"</span><br>127.0.0.1:6379&gt;<span class="hljs-built_in"> type user<br></span>hash<br>127.0.0.1:6379&gt;<span class="hljs-built_in"> type </span>mysort<br>zset<br>127.0.0.1:6379&gt;<span class="hljs-built_in"> type </span>mylist<br>list<br>127.0.0.1:6379&gt;<span class="hljs-built_in"> type </span>myset<br><span class="hljs-builtin-name">set</span><br>127.0.0.1:6379&gt; del<span class="hljs-built_in"> user<br></span>(integer) 1<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">"myset"</span><br>2) <span class="hljs-string">"mylist"</span><br>3) <span class="hljs-string">"mysort"</span><br></code></pre></div></td></tr></table></figure>
<h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>由于Redis是一个内存数据库，当redis服务器重启时数据会丢失，可以将redis内存中的数据持久化保存到硬盘中。<br><br>Redis持久化机制有两种：</p>
<ol>
<li>RDB：默认方式，不需要进行配置。在一定间隔时间中，检测key的变化情况，然后进行持久化数据。</li>
</ol>
<p><strong>编辑redis.windows.conf文件</strong><br></p>
<figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lsl">after <span class="hljs-number">900</span> sec (<span class="hljs-number">15</span> min) if at least <span class="hljs-number">1</span> <span class="hljs-type">key</span> <span class="hljs-section">changed</span>&lt;br&gt;<br>save <span class="hljs-number">900</span> <span class="hljs-number">1</span>&lt;br&gt;<br>after <span class="hljs-number">300</span> sec (<span class="hljs-number">5</span> min) if at least <span class="hljs-number">10</span> keys <span class="hljs-section">changed</span>&lt;br&gt;<br>save <span class="hljs-number">300</span> <span class="hljs-number">10</span>&lt;br&gt;<br>after <span class="hljs-number">60</span> sec if at least <span class="hljs-number">10000</span> keys <span class="hljs-section">changed</span>&lt;br&gt;<br>save <span class="hljs-number">60</span> <span class="hljs-number">10000</span>&lt;br&gt;<br></code></pre></div></td></tr></table></figure>

<p><strong>重启redis服务器，并指定配置文件名称</strong><br><br><code>D: \redis&gt;redis-server.exe redis.windows.conf</code></p>
<ol start="2">
<li>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后持久化数据。<br>编辑redis.windows.conf文件。找到”appendonly no”，改为”appendonly yes”,此时已开启AOF。<br><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># appendfsync always  <span class="hljs-comment">//每次操作都进行持久化</span></span><br>appendfsync everysec  <span class="hljs-comment">//每隔一秒进行一次持久化</span><br><span class="hljs-meta"># appendfsync no      <span class="hljs-comment">//不进行持久化</span></span><br></code></pre></div></td></tr></table></figure>
<h4 id="Java客户端Jedis"><a href="#Java客户端Jedis" class="headerlink" title="Java客户端Jedis"></a>Java客户端Jedis</h4>一款java操作redis数据库的工具。<br><br>需要先导入相关jar包。<br><br>jedis的jar包下载地址：<br><br><a href="http://mvnrepository.com/artifact/redis.clients/jedis" target="_blank" rel="noopener">http://mvnrepository.com/artifact/redis.clients/jedis</a><br><br><a href="http://mvnrepository.com/artifact/org.apache.commons/commons-pool2" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.apache.commons/commons-pool2</a><br><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//简单的使用</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1.获取连接</span><br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//2. 操作</span><br>    jedis.set(<span class="hljs-string">"username"</span>, <span class="hljs-string">"zhangsan"</span>);<br>    <span class="hljs-comment">//3. 关闭连接</span><br>    jedis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure>
Jedis操作各种Redis中的数据结构</li>
<li>字符串类型string<br>set、get<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1.获取连接</span><br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//2. 操作</span><br>    jedis.set(<span class="hljs-string">"username"</span>, <span class="hljs-string">"zhangsan"</span>);<br>    System.out.println(jedis.get(<span class="hljs-string">"username"</span>));<br>    <span class="hljs-comment">//可以使用setex()方法存储指定过期时间的key value</span><br>    jedis.setex(<span class="hljs-string">"activecode"</span>, <span class="hljs-number">20</span>, <span class="hljs-string">"hello"</span>);<span class="hljs-comment">//将activecode: hehe键值对存入redis， 并且20秒后自动删除该键值对</span><br>    <span class="hljs-comment">//3. 关闭连接</span><br>    jedis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure></li>
<li>哈希类型hash : map格式<br>hset、hget<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1.获取连接</span><br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//2. 操作</span><br>    jedis.hset(<span class="hljs-string">"user"</span>, <span class="hljs-string">"name"</span>, <span class="hljs-string">"lisi"</span>);<br>    jedis.hset(<span class="hljs-string">"user"</span>, <span class="hljs-string">"age"</span>, <span class="hljs-string">"20"</span>);<br>    jedis.hset(<span class="hljs-string">"user"</span>, <span class="hljs-string">"address"</span>, <span class="hljs-string">"beijing"</span>);<br><br>    <span class="hljs-comment">//获取</span><br>    System.out.println(jedis.hget(<span class="hljs-string">"user"</span>, <span class="hljs-string">"name"</span>));<br><br>    Map&lt;String, String&gt; user = jedis.hgetAll(<span class="hljs-string">"user"</span>);<br>    System.out.println(user);<br><br>    Set&lt;String&gt; keySet = user.keySet();<br>    <span class="hljs-keyword">for</span> (String key : keySet)&#123;<br>        String value = user.get(key);<br>        System.out.println(key + <span class="hljs-string">":"</span> + value);<br>    &#125;<br>    <span class="hljs-comment">//3. 关闭连接</span><br>    jedis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure></li>
<li>列表类型list : linkedlist格式。 支持重复元素<br>lpush/rpush 、lpop/rpop、lrange start end（范围获取）<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1.获取连接</span><br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//2. 操作</span><br>    jedis.lpush(<span class="hljs-string">"myList"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>);<br>    jedis.rpush(<span class="hljs-string">"myList"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>);<br><br>    List&lt;String&gt; myList = jedis.lrange(<span class="hljs-string">"myList"</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    System.out.println(myList);<br><br>    String element1 = jedis.lpop(<span class="hljs-string">"myList"</span>);<br>    System.out.println(element1);<br>    System.out.println(jedis.lrange(<span class="hljs-string">"myList"</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br><br>    String element2 = jedis.rpop(<span class="hljs-string">"myList"</span>);<br>    System.out.println(element2);<br>    System.out.println(jedis.lrange(<span class="hljs-string">"myList"</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br><br>    <span class="hljs-comment">//3. 关闭连接</span><br>    jedis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure></li>
<li>集合类型set:不允许重复元素<br>sadd<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1.获取连接</span><br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//2. 操作</span><br>    jedis.sadd(<span class="hljs-string">"mySet"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>);<br><br>    Set&lt;String&gt; mySet = jedis.smembers(<span class="hljs-string">"mySet"</span>);<br>    System.out.println(mySet);<br><br>    jedis.srem(<span class="hljs-string">"mySet"</span>, <span class="hljs-string">"a"</span>);<br>    System.out.println(jedis.smembers(<span class="hljs-string">"mySet"</span>));<br>    <span class="hljs-comment">//3. 关闭连接</span><br>    jedis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure></li>
<li>有序集合类型sortedset :不允许重复元素，且元素有顺序<br>zadd<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1.获取连接</span><br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//2. 操作</span><br>    jedis.zadd(<span class="hljs-string">"sortSet"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"小张"</span>);<br>    jedis.zadd(<span class="hljs-string">"sortSet"</span>, <span class="hljs-number">5</span>, <span class="hljs-string">"小李"</span>);<br>    jedis.zadd(<span class="hljs-string">"sortSet"</span>, <span class="hljs-number">10</span>, <span class="hljs-string">"小王"</span>);<br><br>    Set&lt;String&gt; sortSet = jedis.zrange(<span class="hljs-string">"sortSet"</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    System.out.println(sortSet);<br><br>    System.out.println(jedis.zrangeWithScores(<span class="hljs-string">"sortSet"</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>    <span class="hljs-comment">//3. 关闭连接</span><br>    jedis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h6 id="Jedis连接池：JedisPool"><a href="#Jedis连接池：JedisPool" class="headerlink" title="Jedis连接池：JedisPool"></a>Jedis连接池：JedisPool</h6></li>
</ol>
<ul>
<li>创建JedisPool连接池对象</li>
<li>调用getResource()方法获取Jedis连接<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">//创建配置对象</span><br>    JedisPoolConfig config = <span class="hljs-keyword">new</span> JedisPoolConfig();<br>    config.setMaxTotal(<span class="hljs-number">50</span>);<br>    config.setMaxIdle(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">//1.创建Jedis连接池对象，不设置配置参数会使用默认的</span><br><span class="hljs-comment">//        JedisPool jedisPool = new JedisPool();</span><br>    JedisPool jedisPool = <span class="hljs-keyword">new</span> JedisPool(config, <span class="hljs-string">"localhost"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//2. 获取连接</span><br>    Jedis jedis = jedisPool.getResource();<br>    <span class="hljs-comment">//3.操作</span><br><br>    <span class="hljs-comment">//4. 关闭，归还到连接池</span><br>    jedis.close();<br>&#125;<br></code></pre></div></td></tr></table></figure></li>
</ul>
<p><strong>一些常用的参数配置：</strong><br></p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#收大活动对象数</span><br>redis .<span class="hljs-built_in"> pool </span>. <span class="hljs-attribute">maxTotal</span>=1000<br><span class="hljs-comment">#最大能够保持idel状态的对象数</span><br>redis.<span class="hljs-built_in"> pool </span>. <span class="hljs-attribute">maxIdle</span>=100<br><span class="hljs-comment">#坡小能够保持idel状态的对象数</span><br>redis. pool. <span class="hljs-attribute">minIdle</span>=50<br><span class="hljs-comment">#当池内没有返回对象时，最大等待时间</span><br>redis.<span class="hljs-built_in"> pool </span>. <span class="hljs-attribute">maxWaitMillis</span>=10000<br><span class="hljs-comment">#当调用borrow Object方法时，是否进行有效性检查</span><br>redis. pool. testOnBorrow <span class="hljs-literal">true</span><br><span class="hljs-comment">#当调用return object方法时，是否进行有效性检查</span><br>redis. pool. <span class="hljs-attribute">testOnReturn</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment">#“空闲链接"检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.</span><br>redis. pool. timeBetweenEvi <span class="hljs-attribute">ctionRunsMillis</span>=30000<br><span class="hljs-comment">#向调用者输出“链接”对象时，是否检测它的空闲超时;</span><br>redis. pool. <span class="hljs-attribute">testWhileIdle</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment">#对于“空闲链接"检测线程而言，每次检测的链接资源的个数。默认为3.</span><br>redis .<span class="hljs-built_in"> pool </span>. <span class="hljs-attribute">numTestsPerEvictionRun</span>=50<br><span class="hljs-comment">#redis服务器的IP</span><br>redis.<span class="hljs-built_in"> ip </span>=XXXXXX<br><span class="hljs-comment">#redis服务器的Port</span><br>redis1. port= =6379<br></code></pre></div></td></tr></table></figure>
<p><strong>连接池工具类：</strong></p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">/**<br> * Jedis工具类<br> *      加载配置文件<br> *      提供获取连接的方法<br> */<br>public class JedisPoolUtils &#123;<br><br>    private static JedisPool jedisPool;<br><br>    static &#123;<br>        //读取配置文件<br>        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");<br>        //创建Properties对象<br>        Properties pro = new Properties();<br>        //关联文件<br>        try &#123;<br>            pro.load(is);<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        //获取数据，设置到JedisPoolConfig<br>        JedisPoolConfig config = new JedisPoolConfig();<br>        config.setMaxTotal(Integer.parseInt(pro.getProperty("maxTotal")));<br>        config.setMaxIdle(Integer.parseInt(pro.getProperty("maxIdle")));<br><br>        //初始化<br>        jedisPool = new JedisPool(config, pro.getProperty("host"), Integer.parseInt(pro.getProperty("port")));<br>    &#125;<br><br>    /**<br>     * 获取连接的方法<br>     * @return<br>     */<br>    public static Jedis getJedis()&#123;<br>        return jedisPool.getResource();<br>    &#125;<br><br>    /**<br>     * 关闭连接的方法<br>     */<br>    public static void close()&#123;<br>        jedisPool.close();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>案例需求:<br></p>
<ol>
<li>提供index.html页面，页面中有一个省份下拉列表<br></li>
<li>当页面加载完成后发送ajax请求,加载所有省份<br><br>使用ieda调试程序时，刚开始报了个异常：java.lang.NoClassDefFoundError: org/slf4j/LoggerFactory<br><br>jar包下载链接<a href="https://repo1.maven.org/maven2/org/slf4j/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/org/slf4j/</a></li>
</ol>
<hr>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> top.rainbowcat.dao.ProvinceDao;<br><span class="hljs-keyword">import</span> top.rainbowcat.domain.Province;<br><span class="hljs-keyword">import</span> top.rainbowcat.util.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProvinceDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProvinceDao</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Province&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">"select * from province"</span>;<br>        List&lt;Province&gt; provinces = template.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;Province&gt;(Province<span class="hljs-class">.<span class="hljs-keyword">class</span>))</span>;<br>        <span class="hljs-keyword">return</span> provinces;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> top.rainbowcat.dao.ProvinceDao;<br><span class="hljs-keyword">import</span> top.rainbowcat.dao.impl.ProvinceDaoImpl;<br><span class="hljs-keyword">import</span> top.rainbowcat.domain.Province;<br><span class="hljs-keyword">import</span> top.rainbowcat.service.ProvinceService;<br><span class="hljs-keyword">import</span> top.rainbowcat.util.JedisPoolUtils;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProvinceServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProvinceService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ProvinceDao provinceDao = <span class="hljs-keyword">new</span> ProvinceDaoImpl();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Province&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> provinceDao.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 使用Redis缓存<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findAllJson</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 先从redis中查询数据</span><br>        Jedis jedis = JedisPoolUtils.getJedis();<br>        String province_json = jedis.get(<span class="hljs-string">"province"</span>);<br>        System.out.println(province_json);<br>        <span class="hljs-keyword">if</span> (province_json == <span class="hljs-keyword">null</span> || province_json.length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//redis中没有数据,从数据库中查询</span><br>            System.out.println(<span class="hljs-string">"Redis中没有数据，正在进行数据库查询..."</span>);<br>            List&lt;Province&gt; list = provinceDao.findAll();<br>            <span class="hljs-comment">//将list集合序列化为json</span><br>            ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>            <span class="hljs-keyword">try</span> &#123;<br>                province_json = mapper.writeValueAsString(list);<br>            &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//将json数据存入redis当中</span><br>            jedis.set(<span class="hljs-string">"province"</span>, province_json);<br>            jedis.close();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//在redis中查询到数据</span><br>            System.out.println(<span class="hljs-string">"Redis中有数据，正在查询缓存..."</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> province_json;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">"/findProvince"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindProvinceServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//调用方法查询</span><br>        ProvinceService service = <span class="hljs-keyword">new</span> ProvinceServiceImpl();<br>        String json = service.findAllJson();<br>        System.out.println(json);<br>        response.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);<br>        response.getWriter().write(json);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en"&gt;<br>&lt;head&gt;<br>    &lt;meta charset="UTF-8"&gt;<br>    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;select id="province"&gt;<br>    &lt;option&gt;--请选择省份--&lt;/option&gt;<br>&lt;/select&gt;<br><br>&lt;script&gt;<br>    $(function () &#123;<br>        $.get("findProvince", &#123;&#125;, function (d) &#123;<br>            //获取select<br>            var province = $("#province");<br>            //遍历json数组<br>            $(d).each(function () &#123;<br>                //创建option<br>                var option = "&lt;option name='"+ this.id +"'&gt;"+ this.name + "&lt;/option&gt;";<br>                //调用select的append方法进行追加<br>                province.append(option);<br>            &#125;);<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure>
<p><strong>注意</strong>:使用redis缓存一些不经常发生变化的数据。</p>
<ul>
<li>数据库的数据一旦发生改变，则需要更新缓存。<ul>
<li>数据库的表执行增删改的相关操作，需要将redis缓存数据情况，再次存入</li>
<li>在service对应的增删改方法中，将redis数据删除。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>AJax &amp; JSON</title>
    <url>/2020/07/15/AJax%20&amp;%20JSON/</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="AJAX概念："><a href="#AJAX概念：" class="headerlink" title="AJAX概念："></a>AJAX概念：</h2><p>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，<strong>无需重新加载整个网页的情况下，能够更新部分网页的技术</strong>。</p>
<a id="more"></a>

<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h4 id="原生JS实现方式"><a href="#原生JS实现方式" class="headerlink" title="原生JS实现方式"></a>原生JS实现方式</h4><ol>
<li>$.ajax()</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"发送异步请求"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"fn()"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript"><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.创建核心对象</span><br>        <span class="hljs-keyword">var</span> xmlHttp;<br>        <span class="hljs-keyword">if</span> (window.XMLHttpRequest)&#123;<br>            <span class="hljs-comment">//code for IE7+,Firefox,Chrome,Opera,Safari</span><br>            xmlHttp = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//code for IE6,IE5</span><br>            xmlHttp = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">"Microsoft.XMLHTTP"</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.建立连接</span><br>        <span class="hljs-comment">/**<br>         * xmlHttp.open("GET", "test1.txt", true)<br>         * 参数：<br>         *      1.请求方式：GET、POST<br>         *      2.请求的URL<br>         *      3.同步或异步请求：true（异步）、false（同步）<br>         */</span><br>        xmlHttp.open(<span class="hljs-string">"GET"</span>, <span class="hljs-string">"testServlet?name=张三"</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//3.发送请求</span><br>        <span class="hljs-comment">/**<br>         * 如果是GET请求：URL参数在open中拼接<br>         * 如果是POST请求：URL在send中定义<br>         */</span><br>        xmlHttp.send();<br>        <span class="hljs-comment">//4.接收和处理响应结果(xmlHttp.responseText)</span><br>        <span class="hljs-comment">/**<br>         * 当xmlHttp对象的 响应就绪状态改变时触发事件(onreadystatechange)<br>         * onreadystatechange有以下几种状态<br>         *      1. 0：请求未初始化<br>         *      2. 1：服务器连接已建立<br>         *      3. 2：请求已接收<br>         *      4. 3：请求处理中<br>         *      5. 4：请求已完成，且相应已完成<br>         */</span><br><br>        xmlHttp.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (xmlHttp.readyState == <span class="hljs-number">4</span> &amp;&amp; xmlHttp.status == <span class="hljs-number">200</span>)&#123;<br>                <span class="hljs-comment">// 获取服务器的响应结果</span><br>                <span class="hljs-keyword">var</span> responseText = xmlHttp.responseText;<br>                alert(responseText);<br>            &#125;<br>        &#125;<br><br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">request.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>);<br>String name = request.getParameter(<span class="hljs-string">"name"</span>);<br>System.out.println(name);<br>response.getWriter().write(<span class="hljs-string">"hello"</span> + name);<br></code></pre></div></td></tr></table></figure>
<h4 id="jQuery实现方式"><a href="#jQuery实现方式" class="headerlink" title="jQuery实现方式"></a>jQuery实现方式</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $.ajax(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">"testServlet"</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">"POST"</span>,<br>            <span class="hljs-attr">data</span>: &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"jack"</span>&#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>                alert(data);<br>            &#125;,<br>        &#125;);<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>$.get() 和 $.post()</li>
</ol>
<ul>
<li>语法：$.get(url, [data], [callback], [type])</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $.post(<span class="hljs-string">"testServlet"</span>, &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"tom"</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>)</span>&#123;alert(d)&#125;, <span class="hljs-string">"text"</span>);<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="JSON概念："><a href="#JSON概念：" class="headerlink" title="JSON概念："></a>JSON概念：</h2><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<br></p>
<h2 id="JSON语法："><a href="#JSON语法：" class="headerlink" title="JSON语法："></a>JSON语法：</h2><h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><ol>
<li>数据在键/值对中：json数据由键值对构成。<ul>
<li><strong>键</strong>用引号引起来，也可以不是用引号</li>
<li><strong>值</strong>的取值类型：<ol>
<li>数字（证书或浮点数）</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（true/false）</li>
<li>数组（在方括号中）{“persons”:[{},{}]}</li>
<li>对象（在花括号中）{“address”:{“province”:”陕西”…}}</li>
<li>null</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-comment">//1. 基本格式</span><br>    <span class="hljs-keyword">var</span> a = &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"张三"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">20</span>, <span class="hljs-string">"address"</span>: <span class="hljs-string">"北京"</span>&#125;;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-comment">//2. 嵌套格式</span><br>    <span class="hljs-keyword">var</span> b = [<br>    &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"张三"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">20</span>, <span class="hljs-string">"address"</span>: <span class="hljs-string">"北京"</span>&#125;,<br>    &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"李四"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">20</span>, <span class="hljs-string">"address"</span>: <span class="hljs-string">"北京"</span>&#125;,<br>    &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"王五"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">20</span>, <span class="hljs-string">"address"</span>: <span class="hljs-string">"北京"</span>&#125;<br>    ];<br>    <span class="hljs-built_in">console</span>.log(b);<br><br>    <span class="hljs-keyword">var</span> c = &#123;<br>        <span class="hljs-string">"person"</span>: [<br>            &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"张三"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">20</span>, <span class="hljs-string">"address"</span>: <span class="hljs-string">"北京"</span>&#125;,<br>            &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"李四"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">20</span>, <span class="hljs-string">"address"</span>: <span class="hljs-string">"北京"</span>&#125;,<br>            &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"王五"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">20</span>, <span class="hljs-string">"address"</span>: <span class="hljs-string">"北京"</span>&#125;<br>        ]<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(b);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>数据由都好分隔：多个键值对由逗号分隔。</li>
<li>花括号保存对象：使用{}定义json格式</li>
<li>方括号保存数组：[]</li>
</ol>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><ol>
<li>json对象.键名</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">console.log(a.name);//获取的结果是：张三<br>console.log(a.age);//获取的结果是：20<br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>json对象[“键名”]</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">console.log(a["name"])//获取的结果是：张三<br>console.log(a["age"]);//获取的结果是：20<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>数组对象[索引]</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">console.log(c.person[1].name);//获取的结果是：李四<br>console.log(c["person"][0].name);;//获取的结果是：张三<br></code></pre></div></td></tr></table></figure>
<h4 id="JSON的遍历"><a href="#JSON的遍历" class="headerlink" title="JSON的遍历"></a>JSON的遍历</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var a = &#123;"name": "张三", "age": 20, "address": "北京"&#125;;<br><br>    for (var key in a) &#123;<br>        console.log(key);//获取所有的键（字符串格式）<br>        console.log(key + ":" + a[key]);//获取所有的键和值（字符串格式）<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var b = [<br>            &#123;"name": "张三", "age": 20, "address": "北京"&#125;,<br>            &#123;"name": "李四", "age": 20, "address": "北京"&#125;,<br>            &#123;"name": "王五", "age": 20, "address": "北京"&#125;<br>        ]<br><br>    for (var i = 0; i <span class="hljs-tag">&lt; <span class="hljs-attr">b.length</span>; <span class="hljs-attr">i</span>++) &#123;<br>        <span class="hljs-attr">var</span> <span class="hljs-attr">c</span> = <span class="hljs-string">b[i];</span><br>        <span class="hljs-attr">for</span> (<span class="hljs-attr">var</span> <span class="hljs-attr">key</span> <span class="hljs-attr">in</span> <span class="hljs-attr">c</span>) &#123;<br>            <span class="hljs-attr">console.log</span>(<span class="hljs-attr">key</span>+ "<span class="hljs-attr">:</span>" + <span class="hljs-attr">c</span>[<span class="hljs-attr">key</span>])<br>        &#125;<br>    &#125;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="JSON数据和Java对象的转换"><a href="#JSON数据和Java对象的转换" class="headerlink" title="JSON数据和Java对象的转换"></a>JSON数据和Java对象的转换</h4><p>一般使用json解析器进行。常见的有Jsonlib、Gjson、fastjson、jackson</p>
<h6 id="JSON转为Java对象"><a href="#JSON转为Java对象" class="headerlink" title="JSON转为Java对象"></a>JSON转为Java对象</h6><ol>
<li><p>使用步骤</p>
<ul>
<li>导入jackson的相关jar包</li>
<li>创建jackson核心对象ObjectMapper</li>
<li>调用ObjectMapper的相关方法进行转换</li>
</ul>
</li>
<li><p>转换方法<br>readValue(json字符串数据, class类型)：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1.初始化json字符串</span><br>        String json = <span class="hljs-string">"&#123;\"name\":\"张三\",\"age\":20,\"address\":\"北京\"&#125;"</span>;<br><br>        <span class="hljs-comment">//2.转换</span><br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        Persion persion = mapper.readValue(json, Persion<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        System.out.println(persion);<br>    &#125;<br></code></pre></div></td></tr></table></figure>

</li>
</ol>
<h6 id="Java对象转为JSON"><a href="#Java对象转为JSON" class="headerlink" title="Java对象转为JSON"></a>Java对象转为JSON</h6><ol>
<li><p>使用步骤</p>
<ul>
<li>导入jackson的相关jar包</li>
<li>创建jackson核心对象ObjectMapper</li>
<li>调用ObjectMapper的相关方法进行转换</li>
</ul>
</li>
<li><p>转换方法</p>
<ul>
<li>writeValue(参数1, obj)：<ul>
<li>参数1：<ol>
<li>File 将obj对象转换为json字符串，并保存到指定文件中</li>
<li>Writer 将obj对象转换为json字符串，并将json数据填充到字符输出流</li>
<li>OutputStream obj对象转换为json字符串，并将json数据填充到字节输出流</li>
</ol>
</li>
</ul>
</li>
<li>writeValueAsString()：将对象转换为json字符串</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JacksonTest</span> </span>&#123;<br>    <span class="hljs-comment">/**<br>     * Java转json<br>     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1.创建person对象</span><br>        Persion person = <span class="hljs-keyword">new</span> Persion();<br>        person.setName(<span class="hljs-string">"张三"</span>);<br>        person.setAge(<span class="hljs-number">20</span>);<br>        person.setAddress(<span class="hljs-string">"北京"</span>);<br><br>        <span class="hljs-comment">//2.创建jackson核心对象</span><br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        <span class="hljs-comment">//3.转换</span><br><br>        <span class="hljs-comment">//mapper.writeValue(new File("d://a.txt"), person);//写入到文件</span><br>        <span class="hljs-comment">//mapper.writeValue(new FileWriter("d://b.txt"), person);//写入到字符流</span><br>        String json = mapper.writeValueAsString(person);<br><br>        System.out.println(json);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>注解(在实体类当中添加)<ul>
<li>@JsonIgnore：排除属性。</li>
<li>@JsonFormat：属性值的格式化。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Persion</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-meta">@JsonIgnore</span> <span class="hljs-comment">//该注解会将属性忽略（输出时）</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>{“name”:”张三”,”age”:20,”address”:”北京”}</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Persion</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-meta">@JsonFormat</span>(pattern = <span class="hljs-string">"yyyy-MM-dd"</span>) <span class="hljs-comment">//该注解会对属性进行格式化</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”}</p>
</blockquote>
<ol start="4">
<li>复杂Java对象转换</li>
</ol>
<p><strong>List（z转换后是数组格式）</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jaa">@Test<br>public void test3() throws Exception &#123;<br>    &#x2F;&#x2F;1.创建person对象<br>    Persion p1 &#x3D; new Persion();<br>    p1.setName(&quot;张三&quot;);<br>    p1.setAge(20);<br>    p1.setAddress(&quot;北京&quot;);<br>    p1.setBirthday(new Date());<br><br>    Persion p2 &#x3D; new Persion();<br>    p2.setName(&quot;张三&quot;);<br>    p2.setAge(20);<br>    p2.setAddress(&quot;北京&quot;);<br>    p2.setBirthday(new Date());<br><br>    Persion p3 &#x3D; new Persion();<br>    p3.setName(&quot;张三&quot;);<br>    p3.setAge(20);<br>    p3.setAddress(&quot;北京&quot;);<br>    p3.setBirthday(new Date());<br><br>    &#x2F;&#x2F;创建List集合<br>    ArrayList&lt;Persion&gt; list &#x3D; new ArrayList&lt;&gt;();<br>    list.add(p1);<br>    list.add(p2);<br>    list.add(p3);<br><br>    &#x2F;&#x2F;2.转换<br>    ObjectMapper mapper &#x3D; new ObjectMapper();<br>    String json &#x3D; mapper.writeValueAsString(list);<br>    System.out.println(json);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>[{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”},{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”},{“name”:”张三”,”age”:20,”address”:”北京”,”birthday”:”2020-07-15”}]</p>
</blockquote>
<p><strong>Map(转换后是对象格式)</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">//1.创建person对象</span><br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">"name"</span>, <span class="hljs-string">"张三"</span>);<br>    map.put(<span class="hljs-string">"age"</span>, <span class="hljs-string">"20"</span>);<br>    map.put(<span class="hljs-string">"address"</span>, <span class="hljs-string">"北京"</span>);<br><br><br>    <span class="hljs-comment">//2.转换</span><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    String json = mapper.writeValueAsString(map);<br>    System.out.println(json);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><strong>注册时用户名校验</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//给username绑定blur事件</span><br>            $(<span class="hljs-string">"#username"</span>).blur(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-comment">//获取文本框内容</span><br>                <span class="hljs-keyword">var</span> username = $(<span class="hljs-keyword">this</span>).val();<br>                <span class="hljs-keyword">var</span> s_username = $(<span class="hljs-string">"#s_username"</span>);<br>                $.<span class="hljs-keyword">get</span>("findUserNameServlet", &#123;username, username&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123;<br>                    <span class="hljs-keyword">if</span> (d.userExist == <span class="hljs-literal">true</span>)&#123;<br>                        <span class="hljs-comment">//用户名岑在</span><br>                        s_username.html(d.msg);<br>                        s_username.css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"red"</span>);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">//用户名不存在</span><br>                        s_username.html(d.msg);<br>                        s_username.css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"green"</span>);<br>                    &#125;<br>                &#125;,<span class="hljs-string">"json"</span>);<br>            &#125;);<br>        &#125;);<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"s_username"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入密码"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"注册"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">"/findUserNameServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindUserNameServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        <span class="hljs-comment">//解决服务器响应数据在客户端中文乱码</span><br>        response.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><br>        <span class="hljs-comment">//设置相应格式为json</span><br>        <span class="hljs-comment">//response.setContentType("application/json;charset=utf-8");</span><br><br>        String username = request.getParameter(<span class="hljs-string">"username"</span>);<br>        <span class="hljs-comment">//此处应从数据库中查询，战且简化操作</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">"tom"</span>.equals(username))&#123;<br>            <span class="hljs-comment">//用户名存在</span><br>            map.put(<span class="hljs-string">"userExist"</span>, <span class="hljs-keyword">true</span>);<br>            map.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"用户名已存在！"</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//用户名不存在</span><br>            map.put(<span class="hljs-string">"userExist"</span>, <span class="hljs-keyword">false</span>);<br>            map.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"用户名可用！"</span>);<br>        &#125;<br>        <span class="hljs-comment">//将map转为json</span><br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        <span class="hljs-comment">//将数据写入到客户端</span><br>        mapper.writeValue(response.getWriter(), map);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery高级使用</title>
    <url>/2020/07/14/JQuery%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h4 id="三种方式显示和隐藏元素"><a href="#三种方式显示和隐藏元素" class="headerlink" title="三种方式显示和隐藏元素"></a>三种方式显示和隐藏元素</h4><ol>
<li>默认显示和隐藏方式<ul>
<li>show([speed,[easing],[fn]])</li>
<li>hide([speed,[easing],[fn]])</li>
<li>toggle([speed,[easing],[fn]])</li>
</ul>
</li>
</ol>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击按钮隐藏div"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"hideFn()"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击按钮显示div"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"showFn()"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击按钮切换div显示或隐藏"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"toggleFn()"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"showDiv"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 200px;height: 200px;background-color:pink;"</span>&gt;</span><br>    div。。。<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hideFn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#showDiv"</span>).hide(<span class="hljs-string">"slow"</span>,<span class="hljs-string">"linear"</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showFn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#showDiv"</span>).show(<span class="hljs-string">"fast"</span>,<span class="hljs-string">"swing"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-string">"显示了"</span>)<br>        &#125;);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toggleFn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#showDiv"</span>).toggle(<span class="hljs-string">"slow"</span>);<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>滑动显示和隐藏方式<ul>
<li>slideDown([speed,[easing],[fn]])</li>
<li>slideUp([speed,[easing],[fn]])</li>
<li>slideToggle([speed,[easing],[fn]])</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">function hideFn() &#123;<br>    $("#showDiv").slideUp("slow");<br>&#125;<br>function showFn() &#123;<br>    $("#showDiv").slideDown("fast");<br>&#125;<br>function toggleFn() &#123;<br>    $("#showDiv").slideToggle("slow");<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>淡入淡出显示和隐藏方式<ul>
<li>fadeIn([speed,[easing],[fn]])</li>
<li>fadeOut([speed,[easing],[fn]])</li>
<li>fadeToggle([speed,[easing],[fn]])</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">function hideFn() &#123;<br>    $("#showDiv").fadeOut("slow");<br>&#125;<br>function showFn() &#123;<br>    $("#showDiv").fadeIn("fast");<br>&#125;<br>function toggleFn() &#123;<br>    $("#showDiv").fadeToggle("slow");<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p><strong>参数介绍</strong></p>
<ul>
<li>speed：动画的速度。有三个预定义的值（”slow”、”normal”、”fast”），或表示动画时长的毫秒数（如：1000）。</li>
<li>easing：用来指定切换效果，默认是”swing”（先慢，中间快，最后又变慢），可以用参数”linear”（匀速）。</li>
<li>fn：在动画完成时执行的函数，每个元素执行一次。</li>
</ul>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h4 id="js的遍历方式（for）"><a href="#js的遍历方式（for）" class="headerlink" title="js的遍历方式（for）"></a>js的遍历方式（for）</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"city"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>重庆<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> citys = $(<span class="hljs-string">"#city li"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; citys.length; i++) &#123;<br>            alert(i+<span class="hljs-string">":"</span>+citys[i].innerHTML);<br>        &#125;<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="jQuery的遍历方式"><a href="#jQuery的遍历方式" class="headerlink" title="jQuery的遍历方式"></a>jQuery的遍历方式</h4><ol>
<li>jQuery对象，each(callback)：callback是回调函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var citys = $("#city li");<br>citys.each(function () &#123;<br>    //第一种方式，不能获取索引<br>    alert(this.innerHTML)<br>&#125;);<br></code></pre></div></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var citys = $("#city li");<br>citys.each(function (index, element) &#123;<br>    //第二种方式，在回调函数中定义参数：index（索引）、element（元素对象）<br>    alert(index + ":" + element.innerHTML);<br>&#125;);<br></code></pre></div></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var citys = $("#city li");<br>        citys.each(function (index, element) &#123;<br>            //第三种方式，在回调函数中定义参数：index（索引）、element（元素对象）<br>            if ("上海"==$(element).html())&#123;<br>                //如果返回false，结束循环（break）；返回true，结束本次循环，继续下一次循环（continue）<br>                return true;<br>            &#125;<br>            alert(index + ":" + $(element).html());<br>        &#125;);<br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>$.each(object, [callback])</li>
</ol>
<p>object参数：可以是jquery对象，也可以是数组对象。</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var citys = $("#city li");<br>        $.each(citys, function (index, element) &#123;<br>            //第三种方式，在回调函数中定义参数：index（索引）、element（元素对象）<br>            if ("上海"==$(element).html())&#123;<br>                //如果返回false，结束循环（break）；返回true，结束本次循环，继续下一次循环（continue）<br>                return true;<br>            &#125;<br>            alert(index + ":" + $(element).html());<br>        &#125;);<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>for..of（jQuery3.0版本之后提供的方式）</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var citys = $("#city li");<br>for(li of citys)&#123;<br>    alert($(li).html());<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h4 id="jQuery标准的绑定方式"><a href="#jQuery标准的绑定方式" class="headerlink" title="jQuery标准的绑定方式"></a>jQuery标准的绑定方式</h4><p>jquery对象.事件名称(回调函数)</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"绑定点击事件"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#name"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-string">"点击完成！"</span>)<br>        &#125;);<br>    &#125;);</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//给name绑定鼠标移进事件、绑定移除事件(链式绑定)<br>$("#name").mouseover(function () &#123;<br>    alert("鼠标移进！")<br>&#125;).mouseout(function () &#123;<br>    alert("鼠标移出！")<br>&#125;);<br></code></pre></div></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">$(function () &#123;<br>        //让文本框获得焦点（不写回调函数，执行默认效果）<br>        $("#name").focus();<br>        $("#form").submit();//用于提交表单<br>    &#125;);<br></code></pre></div></td></tr></table></figure>
<h4 id="on绑定事件、off解除绑定"><a href="#on绑定事件、off解除绑定" class="headerlink" title="on绑定事件、off解除绑定"></a>on绑定事件、off解除绑定</h4><p>jquery对象.on(“事件名称”, 回调函数)<br>jquery对象.off(“事件名称”)</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"使用on绑定点击事件"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"使用off解绑点击事件"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn1"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            alert(<span class="hljs-string">"单击事件绑定成功！"</span>)<br>        &#125;);<br>        $(<span class="hljs-string">"#btn2"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#btn1"</span>).off(<span class="hljs-string">"click"</span>);<br>            alert(<span class="hljs-string">"已解除单击事件！"</span>);<br>            <span class="hljs-comment">// $("#btn1").off();//解除所有事件</span><br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="事件切换：toggle"><a href="#事件切换：toggle" class="headerlink" title="事件切换：toggle"></a>事件切换：toggle</h4><p>jquery对象.toggle(fn1, fn2…),<strong>注意：</strong>使用版本jquery需要引入migrate插件才能生效。</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"事件切换"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txt"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"height: 100px;width: 100px;"</span>&gt;</span>切换div颜色。。。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn"</span>).toggle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#txt"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"yellow"</span>)<br>        &#125;),<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#txt"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>)<br>        &#125;;<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><strong>广告显示与隐藏</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ad"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: none"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"WEB-INF/img/pic1.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100%"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adShow</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#ad"</span>).show(<span class="hljs-string">"slow"</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adHide</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#ad"</span>).hide(<span class="hljs-string">"slow"</span>)<br>    &#125;<br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//定义定时器,调用adShow()</span><br>        setTimeout(adShow, <span class="hljs-number">3000</span>);<br>        <span class="hljs-comment">//定义定时器,adHide()</span><br>        setTimeout(adHide, <span class="hljs-number">8000</span>);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="插件（增强jQuery的功能）"><a href="#插件（增强jQuery的功能）" class="headerlink" title="插件（增强jQuery的功能）"></a>插件（增强jQuery的功能）</h2><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ol>
<li>$.fn.extend(object)：增强通过jQuery获取的对象的功能  $(“#id值”)</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn-check"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击选中复选框"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"checkFn()"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn-uncheck"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击取消选中复选框"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"uncheckFn()"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"football"</span>&gt;</span>足球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"basketball"</span>&gt;</span>篮球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"volleyball"</span>&gt;</span>排球<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-comment">// 定义jQuery的对象插件</span><br>    $.fn.extend(&#123;<br>        <span class="hljs-comment">//定义了一个check()方法</span><br>        <span class="hljs-attr">check</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">this</span>.prop(<span class="hljs-string">"checked"</span>, <span class="hljs-literal">true</span>);<br>        &#125;,<br>        <span class="hljs-comment">//定义了一个uncheck()方法</span><br>        <span class="hljs-attr">uncheck</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">this</span>.prop(<span class="hljs-string">"checked"</span>, <span class="hljs-literal">false</span>);<br>        &#125;,<br>    &#125;);<br><span class="hljs-comment">//使用插件，实现选中所有复选框，取消选中</span><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn-check"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"input[type='checkbox']"</span>).check();<br>        &#125;);<br>        $(<span class="hljs-string">"#btn-uncheck"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"input[type='checkbox']"</span>).uncheck();<br>        &#125;);<br>    &#125;)<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>$.extend(object)：增强通过jQuery对象自身的功能  $/jquery</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-comment">//对全局方法进行扩展，扩展min方法：求两数最小值；扩展max方法：求两数最大值</span><br>    $.extend(&#123;<br>        <span class="hljs-attr">max</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>            <span class="hljs-comment">//返回两数中最大值</span><br>            <span class="hljs-keyword">return</span> a &gt;= b ? a:b;<br>        &#125;,<br>        <span class="hljs-attr">min</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>            <span class="hljs-comment">//返回两数中最大值</span><br>            <span class="hljs-keyword">return</span> a &gt;= b ? b:a;<br>        &#125;,<br>    &#125;);<br>    <span class="hljs-comment">//调用全局方法</span><br>    alert($.max(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>    alert($.min(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/2020/07/13/JQuery/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>JQuery是一个JavaScript的框架。（简化js开发）</p>
<ul>
<li>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</li>
<li>使用方法：<ul>
<li>导入jquery的js文件</li>
<li>使用jquery的方法即可</li>
</ul>
</li>
</ul>
<a id="more"></a>

<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"WEB-INF/js/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div1"</span>&gt;</span>div1...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>        alert($(<span class="hljs-string">"#div1"</span>).html())<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="JQuery对象和JS对象的转换"><a href="#JQuery对象和JS对象的转换" class="headerlink" title="JQuery对象和JS对象的转换"></a>JQuery对象和JS对象的转换</h2><ol>
<li>jquery –&gt; js：<strong>jquery对象(索引)</strong> 或 <strong>jquery对象.get(索引)</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div1"</span>&gt;</span>div1...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div2"</span>&gt;</span>div2...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>        <span class="hljs-keyword">var</span> $divs = $(<span class="hljs-string">"div"</span>);<br>        $divs[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">"bbb"</span>;<br>        $divs.get(<span class="hljs-number">1</span>).innerHTML = <span class="hljs-string">"ccc"</span>;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>js –&gt; jquery：<strong>$(js对象)</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div1"</span>&gt;</span>div1...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div2"</span>&gt;</span>div2...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>        <span class="hljs-keyword">var</span> divs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"div"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; divs.length; i++) &#123;<br>            <span class="hljs-comment">//将js对象转为jquery对象，从而调用jquery的方法</span><br>            $(divs[i]).html(<span class="hljs-string">"aaa"</span>)<br>        &#125;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>筛选具有相似特征的元素（标签）</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ol>
<li>事件绑定<br></li>
</ol>
<ul>
<li>$(“#id值”).方法名(function(){方法体});</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Click Me"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-string">"#btn1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-string">"点击了按钮！"</span>);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>入口函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-comment">//jquery入口函数（DOM文档加载完毕后执行）</span><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>与window.onload的区别：</strong><br>window.onload = function(){};只能定义一次，再次定义会被覆盖掉。<br><br>入口函数可以定义多个。<br>3. 样式控制</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div1"</span>&gt;</span>div1...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#div1"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><ol>
<li>基本选择器<ol>
<li>标签选择器（元素选择器）<ul>
<li>语法：$(“html标签名”)获得所有匹配标签名的子元素</li>
</ul>
</li>
<li>id选择器<ul>
<li>语法：$(“id的属性值”)获得与指定id属性值匹配的元素</li>
</ul>
</li>
<li>类选择器<ul>
<li>语法：$(“.class的属性值”)获得与指定class属性值匹配的元素</li>
</ul>
</li>
<li>并集选择器<ul>
<li>语法：$(“选择器1, 选择器2…”)获取多个选择器选中的所有元素</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变id为one的元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变元素名为&lt;div&gt;的所有元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变class为mini的所有元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变所有的&lt;span&gt;元素和id为two的元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"#one"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn2"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn3"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">".mini"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn4"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"span, #two"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>层级选择器<ol>
<li>后代选择器<ul>
<li>语法：$(“A B”)选择A元素内部的所有B元素</li>
</ul>
</li>
<li>子选择器<ul>
<li>语法：$(“A &gt; B”)选择A元素内部的所有B子元素</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变&lt;body&gt;内所有&lt;div&gt;的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变&lt;body&gt;内子&lt;div&gt;的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"body div"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn2"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"body &gt; div"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>属性选择器<ol>
<li>属性名称选择器<ul>
<li>语法：$(“A[属性名]”)包含指定属性的选择器</li>
</ul>
</li>
<li>属性选择器<ul>
<li>语法：$(“A[属性名=’值’]”)包含指定属性等于指定值的选择器</li>
</ul>
</li>
<li>复合属性选择器<ul>
<li>语法：$(“A[属性名=’值’][]…”)包含多个属性条件的选择器</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"含有属性title的div元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"属性title值等于test的div元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"属性title值不等于test的div元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"属性title值以te开始的div元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn5"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"属性title值以est结束的div元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn6"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"属性title值含有es的div元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn7"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"选取有属性id的div元素，然后在结果中选取属性值title值含有es的div元素背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div[title]"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn2"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div[title = 'test']"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn3"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div[title != 'test']"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn4"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div[title ^= 'te']"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn5"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div[title $= 'est']"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn6"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div[title *= 'es']"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn7"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div[id][title *= 'es']"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="4">
<li>过滤选择器<ol>
<li>首元素选择器<ul>
<li>语法：:first获得选择的元素中第一个元素</li>
</ul>
</li>
<li>尾元素选择器<ul>
<li>语法：:last获得选择的元素中最后一个元素</li>
</ul>
</li>
<li>非元素选择器<ul>
<li>语法：:not(selector)不包括指定内容的元素</li>
</ul>
</li>
<li>偶数选择器<ul>
<li>语法：:even 偶数, 从0开始计数</li>
</ul>
</li>
<li>奇数选择器<ul>
<li>语法：:odd 奇数, 从0开始计数</li>
</ul>
</li>
<li>等于选择器<ul>
<li>语法：:eq(index)指定索引元素</li>
</ul>
</li>
<li>大于选择器<ul>
<li>语法：:gt(index)大于指定索引元素</li>
</ul>
</li>
<li>小于选择器<ul>
<li>语法：:lt(index)小于指定索引元素</li>
</ul>
</li>
<li>标题选择器<ul>
<li>语法：:header 获得标题(h1~h6)元素，固定写法</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变第一个div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变最后一个div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变class不为one的所有div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变索引值为偶数的的div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn5"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变索引值为奇数的的div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn6"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变索引值大于3的的div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn7"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变索引值等于3的的div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn8"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变索引值小于3的的div元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn9"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"改变所有标题元素的背景色为红色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:first"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn2"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:last"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn3"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:not(.one)"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn4"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:even"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn5"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:odd"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn6"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:gt(3)"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn7"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:eq(3)"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn8"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"div:lt(3)"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn9"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">":header"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="5">
<li>表单过滤选择器<ol>
<li>可用元素选择器<ul>
<li>语法：:enabled获得可用元素</li>
</ul>
</li>
<li>不可用元素选择器<ul>
<li>语法：:disabled获得不可用元素</li>
</ul>
</li>
<li>选中选择器<ul>
<li>语法：:checked获得单选/复选框中的元素</li>
</ul>
</li>
<li>选中选择器<ul>
<li>语法：:selected获得下拉框选中的元素</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"利用jQuery对象的val()方法改变表单内可用&lt;input&gt;元素的值"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"利用jQuery对象的val()方法改变表单内不可用&lt;input&gt;元素的值"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"利用jQuery对象的length属性获取复选框选中的个数"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"利用jQuery对象的length属性获取下拉框选中的个数"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"input[type='text']:enabled"</span>).val(<span class="hljs-string">"aaa"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn2"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            $(<span class="hljs-string">"input[type='text']:disabled"</span>).val(<span class="hljs-string">"aaa"</span>);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn3"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            alert($(<span class="hljs-string">"input[type='checkbox']:checked"</span>).length);<br>        &#125;);<br>        $(<span class="hljs-string">"#btn4"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//要获取的时option的选中个数而不是下拉框的个数</span><br>            alert($(<span class="hljs-string">"select &gt; option:selected"</span>).length);<br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h4 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h4><ol>
<li>html()：获取/设置元素的标签体内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//获取<br>$("#id值").html();<br>//设置,直接替换源码<br>$("#id值").html("aaa")<br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>text()：获取/设置元素的标签体纯文本内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//获取<br>$("#id值").text();<br>//设置<br>$("#id值").text("aaa")<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>val()：获取/设置元素的value属性值</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//获取<br>$("#id值").val();<br>//设置<br>$("#id值").val("aaa")<br></code></pre></div></td></tr></table></figure>
<h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><ol>
<li>通用属性操作<ul>
<li>attr()：获取/设置元素的属性</li>
<li>removeAttr()：删除元素的属性</li>
<li>prop()：获取/设置元素的属性</li>
<li>removeProp：删除元素的属性</li>
</ul>
</li>
</ol>
<p><strong>attr和prop的区别：</strong><br>    - 操作元素的固有属性（元素自带的属性），建议用prop。（如：href、src）<br>    - 操作自定义属性，建议用attr。（如：aaa）</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bj"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"beijing"</span> <span class="hljs-attr">xxx</span>=<span class="hljs-string">"yyy"</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tj"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tianjin"</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hobby"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//获取</span><br>        alert($(<span class="hljs-string">"#bj"</span>).attr(<span class="hljs-string">"name"</span>));<span class="hljs-comment">//li中name为自定义属性</span><br>        <span class="hljs-comment">//设置</span><br>        $(<span class="hljs-string">"#bj"</span>).attr(<span class="hljs-string">"name"</span>, <span class="hljs-string">"首都"</span>);<span class="hljs-comment">//此处修改的是name属性</span><br>        <span class="hljs-comment">//增加aaa属性，值为bbb</span><br>        $(<span class="hljs-string">"#bj"</span>).attr(<span class="hljs-string">"aaa"</span>, <span class="hljs-string">"bbb"</span>);<br>        <span class="hljs-comment">//删除xxx属性，并检验xxx属性是否存在</span><br>        $(<span class="hljs-string">"#bj"</span>).removeAttr(<span class="hljs-string">"aaa"</span>, <span class="hljs-string">"bbb"</span>);<br>        <span class="hljs-comment">//获取hobby的选中状态</span><br>        alert($(<span class="hljs-string">"#hobby"</span>).prop(<span class="hljs-string">"checked"</span>));<span class="hljs-comment">//checked和option不能用attr获取到</span><br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>对class属性操作<ul>
<li>addClass：添加Class属性值</li>
<li>removeClass：删除Class属性值</li>
<li>toggleClass：切换Class属性值。（如：元素对象上存在class=”one”,则删除。若不存在class=”one”，则添加。）</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"采用属性增加样式（改变id=one的样式）"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"addClass"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"removeClass"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn4"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"切换样式"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn5"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"通过css()获得id=one背景颜色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn6"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"通过css()设置id=one背景颜色为绿色"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"one"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"background-color:cyan;"</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#btn1"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#one"</span>).prop(<span class="hljs-string">"class"</span>, <span class="hljs-string">"aaa"</span>);<span class="hljs-comment">//class="aaa"事先设置了样式</span><br>        &#125;);<br>        $(<span class="hljs-string">"#btn2"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#one"</span>).addClass(<span class="hljs-string">"aaa"</span>);<span class="hljs-comment">//class="aaa"事先设置了样式</span><br>        &#125;);<br>        $(<span class="hljs-string">"#btn3"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#one"</span>).removeClass(<span class="hljs-string">"aaa"</span>);<span class="hljs-comment">//class="aaa"事先设置了样式</span><br>        &#125;);<br>        $(<span class="hljs-string">"#btn4"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#one"</span>).toggleClass(<span class="hljs-string">"aaa"</span>);<span class="hljs-comment">//class="aaa"事先设置了样式</span><br>        &#125;);<br>        $(<span class="hljs-string">"#btn5"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            alert($(<span class="hljs-string">"#one"</span>).css(<span class="hljs-string">"backgroundColor"</span>));<span class="hljs-comment">//class="aaa"事先设置了样式</span><br>        &#125;);<br>        $(<span class="hljs-string">"#btn6"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#one"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"green"</span>);<span class="hljs-comment">//class="aaa"事先设置了样式</span><br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h4><ol>
<li>append()：父元素将子元素追加到末尾。<ul>
<li>（对象1.append(对象2)：将对象2追加到对象1的末尾）。</li>
</ul>
</li>
<li>prepend()：父元素将子元素插入到开头。<ul>
<li>（对象1.prepend(对象2)：将对象2插入到对象1的开头）。</li>
</ul>
</li>
<li>appendTo()：父元素将子元素插入到开头。<ul>
<li>（对象1.prepend(对象2)：将对象1添加到到对象2的末尾）。</li>
</ul>
</li>
<li>prependTo()：父元素将子元素插入到开头。<ul>
<li>（对象1.prepend(对象2)：将对象1添加到到对象2的开头）。</li>
</ul>
</li>
<li>after()：添加元素a到元素b后。<ul>
<li>（对象1.after(对象2)：将对象1添加到到对象2后，在同一级。）</li>
</ul>
</li>
<li>before()：添加元素a到元素b前。<ul>
<li>（对象1.after(对象2)：将对象1添加到到对象2前，在同一级。）</li>
</ul>
</li>
<li>insertAfter()：添加元素a到元素b前。<ul>
<li>（对象1.after(对象2)：将对象1插入到到对象2后，在同一级。）</li>
</ul>
</li>
<li>insertBefore()：添加元素a到元素b后。<ul>
<li>（对象1.after(对象2)：将对象1插入到到对象2前，在同一级。）</li>
</ul>
</li>
<li>remove()：移除元素。<ul>
<li>（对象.remove()：将对象删除。）</li>
</ul>
</li>
<li>empty()：清空元素的所有后代元素。<ul>
<li>（对象.empty()：将对象的后代元素全部清空，但保留当前对象及其属性节点。）</li>
</ul>
</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol>
<li>隔行换色</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>    <span class="hljs-selector-tag">td</span>&#123;<br>        <span class="hljs-attribute">text-align</span>: center;<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tab1"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"800"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"5"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"删除"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类描述<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>ddd<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-comment">//需求：将数据行的奇数行背景色设置为pink，偶数行背景色为yellow</span><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//1. 获取所有奇数行tr</span><br>        $(<span class="hljs-string">"tr:gt(1):odd"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"pink"</span>);<br>        <span class="hljs-comment">//2. 获取所有偶数行tr</span><br>        $(<span class="hljs-string">"tr:gt(1):even"</span>).css(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"yellow"</span>);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>全选全部选</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-comment">//需求：全选全不选</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectAll</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>        $(<span class="hljs-string">".itemSelect"</span>).prop(<span class="hljs-string">"checked"</span>, obj.checked);<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tab1"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"800"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"5"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"删除"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"selectAll(this)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类描述<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"itemSelect"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"itemSelect"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"itemSelect"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"itemSelect"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>分类4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>ddd<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&amp;nbsp&amp;nbsp&amp;nbsp<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li>下拉列表选中条目左右移动</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>    <span class="hljs-selector-class">.border</span>&#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>        <span class="hljs-attribute">background-color</span>: red;<br>    &#125;<br>    <span class="hljs-selector-id">#leftSelect</span>, <span class="hljs-selector-id">#btn</span>, <span class="hljs-selector-id">#rightSelect</span>&#123;<br>        <span class="hljs-attribute">float</span>: left;<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        $(<span class="hljs-string">"#toRight"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#rightSelect"</span>).append($(<span class="hljs-string">"#leftSelect &gt; option:selected"</span>));<br>        &#125;);<br>        $(<span class="hljs-string">"#toLeft"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">"#rightSelect &gt; option:selected"</span>).appendTo($(<span class="hljs-string">"#leftSelect"</span>));<br>        &#125;);<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"border"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"leftSelect"</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">"multiple"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"toRight"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--&gt;"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"toLeft"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"&lt;--"</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"rightSelect"</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">"multiple"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>钱七<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter过滤器</title>
    <url>/2020/07/10/Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter:过滤器"></a>Filter:过滤器</h2><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>一般用于完成一些通用操作。如登陆验证、统一编码处理、敏感字符过滤等。</p>
<h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><div class="hljs code-wrapper"><pre><code>1. 定义一个类实现Filter
2. 复写方法
3. 配置拦截路径</code></pre></div><a id="more"></a>

<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter</span>(<span class="hljs-string">"/*"</span>)<span class="hljs-comment">//访问所有资源之前，都会执行该过滤器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">"该过滤器执行啦！！！"</span>);<br>        chain.doFilter(req, resp);<span class="hljs-comment">//放行</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>web.xml配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>top.rainbowcat.web.filter.FilterDemo1top.rainbowcat.web.filter.FilterDemo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--拦截路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ol start="2">
<li>过滤器执行流程<ol>
<li>执行过滤器</li>
<li>执行放行后的资源</li>
<li>执行放行后的代码</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">//该处对request对象请求消息进行增强</span><br>    System.out.println(<span class="hljs-string">"该过滤器执行啦！！！"</span>);<br>    chain.doFilter(req, resp);<span class="hljs-comment">//放行</span><br>    <span class="hljs-comment">//该处对response对象响应消息进行增强</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<ol start="3">
<li><p>过滤器生命周期方法</p>
<ol>
<li>init方法：服务器启动后，会创建Filter对象，调用init方法。用于加载资源。</li>
<li>destroy方法：在服务器关闭后，Filter对象被销毁。如果服务器时正常关闭，则会执行destroy方法。用于释放资源。</li>
<li>doFilter方法：每一次请求被拦截资源时会执行。</li>
</ol>
</li>
<li><p>过滤器配置详解</p>
<ol>
<li><p>拦截路径的配置</p>
<ul>
<li>具体的资源路径，如：/index.jsp 只有访问index.jsp时，过滤器才会被执行</li>
<li>拦截目录，如：/user/* 访问/user下的所有资源时，过滤器才会被执行</li>
<li>后缀名拦截，如：*.jsp 访问所有后缀名为.jsp资源时，过滤器才会被执行</li>
<li>拦截所有资源：/* 访问所有资源时，过滤器都会被执行</li>
</ul>
</li>
<li><p>拦截方式的配置：资源被访问的方式</p>
<ul>
<li><p>注解配置</p>
<ol>
<li>设置dispatchType属性<ul>
<li>REQUEST：默认值。浏览器直接请求资源</li>
<li>FORWARD：转发访问资源，只有转发访问到的资源会被拦截</li>
<li>INCLUDE：包含访问资源</li>
<li>ERROR：错误跳转资源</li>
<li>ASYNC：异步访问资源</li>
</ul>
</li>
</ol>
<p>  <strong>示例：</strong></p>
  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//访问所有资源之前，都会执行该过滤器</span><br><span class="hljs-meta">@WebFilter</span>(value = <span class="hljs-string">"/*"</span>, dispatcherTypes =DispatcherType.REQUEST)<br></code></pre></div></td></tr></table></figure>

<ol start="2">
<li>web.xml配置：只需增加<dispatcher>属性值</dispatcher>标签即可<br></li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;filter-mapping&gt;<br>    &lt;filter-name&gt;demo1&lt;/filter-name&gt;<br>    &lt;!--拦截路径--&gt;<br>    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br>    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;<br>&lt;/filter-mapping&gt;<br></code></pre></div></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><p>过滤器链（配置多个过滤器）<br></p>
</li>
</ol>
<p><strong>执行顺序：</strong>如果有两个过滤器（过滤器1、过滤器2）<br><br>过滤器1 –&gt; 过滤器2 –&gt; 资源执行 –&gt; 过滤器2 –&gt; 过滤器1<br><br><strong>示例：</strong><br>第一个过滤器</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter</span>(<span class="hljs-string">"/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">"FilterDemo1执行啦！！！"</span>);<br>        chain.doFilter(req, resp);<span class="hljs-comment">//放行</span><br>        System.out.println(<span class="hljs-string">"FilterDemo1回来啦！！！"</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>第二个过滤器</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter</span>(<span class="hljs-string">"/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//该处对request对象请求消息进行增强</span><br>        System.out.println(<span class="hljs-string">"FilterDemo2执行啦！！！"</span>);<br>        chain.doFilter(req, resp);<span class="hljs-comment">//放行</span><br>        <span class="hljs-comment">//该处对response对象响应消息进行增强</span><br>        System.out.println(<span class="hljs-string">"FilterDemo2回来啦！！！"</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>执行结果：<br>    FilterDemo1执行啦！！！<br>    FilterDemo2执行啦！！！<br>    FilterDemo2回来啦！！！<br>    FilterDemo1回来啦！！！</p>
<p>  <strong>过滤器先后顺序问题：</strong></p>
<ul>
<li>注解配置：按照类名的字符串比较规则比较，值小的先执行。<br>如：AFilter和BFilter，AFilter就先执行。</li>
<li>web.xml配置：按照编写顺序从上到下执行。</li>
</ul>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h5><p><strong>需求分析：</strong></p>
<ol>
<li>访问资源时验证是否登录</li>
<li>如果已经登陆，直接放行</li>
<li>没有登陆，则跳转到登陆页面</li>
</ol>
<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//强制转换</span><br>        HttpServletRequest request = (HttpServletRequest) req;<br>        <span class="hljs-comment">//1. 获取资源请求路径</span><br>        String uri = request.getRequestURI();<br>        <span class="hljs-comment">//2. 判断是否包含登陆相关的资源路径,要注意排除掉css/js/图片/验证码等资源</span><br>        <span class="hljs-keyword">if</span> (uri.contains(<span class="hljs-string">"/login.jsp"</span>) || uri.contains(<span class="hljs-string">"/loginServlet"</span>) ||<br>                uri.contains(<span class="hljs-string">"/css/"</span>) || uri.contains(<span class="hljs-string">"/js/"</span>) ||<br>                uri.contains(<span class="hljs-string">"/fonts/"</span>) || uri.contains(<span class="hljs-string">"/checkCodeServlet"</span>))&#123;<br>            <span class="hljs-comment">//包含，用户正要登陆，放行</span><br>            chain.doFilter(req, resp);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//不包含，用户需要登陆验证</span><br>            <span class="hljs-comment">//3. 从session中获取用户登陆信息</span><br>            Object user = request.getSession().getAttribute(<span class="hljs-string">"user"</span>);<br>            <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//登陆了，放行</span><br>                chain.doFilter(req, resp);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//没有登陆，跳转登陆页面</span><br>                request.setAttribute(<span class="hljs-string">"login_msg"</span>, <span class="hljs-string">"您尚未登陆，请登陆！"</span>);<br>                request.getRequestDispatcher(<span class="hljs-string">"login.jsp"</span>).forward(request, resp);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<h5 id="敏感词汇过滤"><a href="#敏感词汇过滤" class="headerlink" title="敏感词汇过滤"></a>敏感词汇过滤</h5><p><strong>需求分析：</strong></p>
<ol>
<li>录入数据时验证是否含有敏感数据</li>
<li>敏感词汇参考《敏感词汇.txt》</li>
<li>如果有敏感词汇，替换为***</li>
</ol>
<p><strong>增强对象的功能：设计模式</strong></p>
<ul>
<li><p>设计模式：一些通用的解决固定问题的方式。</p>
<ol>
<li><p>装饰模式</p>
</li>
<li><p>代理模式</p>
<ul>
<li><p>概念：</p>
<ol>
<li>真实对象：被代理的对象</li>
<li>代理对象：</li>
<li>代理模式：代理对象代理真实对象，达到增强真实对象的目的。</li>
</ol>
</li>
<li><p>实现方式：</p>
<ol>
<li>静态代理：有一个类文件藐视代理模式</li>
<li>在内存中形成代理类<ul>
<li>实现步骤：<ol>
<li>代理对象和真实对象实现相同的接口</li>
<li>代理对象 = Proxy.newProxyInstance();</li>
<li>使用代理对象调用方法</li>
<li>增强方法</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<p><strong>代码实现：</strong><br>过滤器部分</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 敏感词汇过滤器<br> */</span><br><span class="hljs-meta">@WebFilter</span>(<span class="hljs-string">"/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveWordsFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1.创建代理对象，增强getParameter方法</span><br>        ServletRequest proxy_req = (ServletRequest) Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                <span class="hljs-comment">//增强getParameter方法</span><br>                <span class="hljs-comment">//判断是否时getParameter方法</span><br>                <span class="hljs-keyword">if</span> (method.getName().equals(<span class="hljs-string">"getParameter"</span>))&#123;<br>                    <span class="hljs-comment">//增强返回值</span><br>                    <span class="hljs-comment">//获取返回值</span><br>                    String value = (String) method.invoke(req, args);<br>                    <span class="hljs-keyword">if</span> (value != <span class="hljs-keyword">null</span>)&#123;<br>                        <span class="hljs-keyword">for</span> (String str : list)&#123;<br>                            <span class="hljs-keyword">if</span> (value.contains(str))&#123;<br>                                value = value.replace(str, <span class="hljs-string">"***"</span>);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> value;<br>                &#125;<br>                <span class="hljs-comment">//判断方法是否为getParameterMap</span><br>                <span class="hljs-comment">//判断方法是否为getParameterValue</span><br><br>                <span class="hljs-keyword">return</span> method.invoke(req, args);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//2.放行,以定要用代理对象！！！而不是req</span><br>        chain.doFilter(proxy_req, resp);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<span class="hljs-comment">//敏感词汇集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//1.加载文件的真实路径</span><br>            ServletContext servletContext = config.getServletContext();<br>            String realPath = servletContext.getRealPath(<span class="hljs-string">"/WEB-INF/classes/敏感词汇.txt"</span>);<br>            <span class="hljs-comment">//2.读取文件</span><br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(realPath));<br>            <span class="hljs-comment">//3.将文件的每一行数据添加到list集合</span><br>            String line = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>                list.add(line);<br>            &#125;<br>            br.close();<br>            System.out.println(list);<br>        &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br></code></pre></div></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">"/textServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String name = request.getParameter(<span class="hljs-string">"name"</span>);<br>        String msg = request.getParameter(<span class="hljs-string">"msg"</span>);<br>        System.out.println(name+<span class="hljs-string">":"</span>+msg);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>在地址栏进行传参，控制台查看输出情况即可。</p>
]]></content>
      <categories>
        <category>Filter</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>EL使用</title>
    <url>/2020/04/07/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ol>
<li>概念：Expression Language表达式语言</li>
<li>作用：替换和简化jsp页面中的Java代码</li>
<li>语法：${表达式}</li>
<li>注意：jsp默认支持el表达式</li>
<li>使用：<ul>
<li>运算</li>
<li>获取值</li>
</ul>
</li>
</ol>
<a id="more"></a>

<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul>
<li>运算符<ol>
<li>算数运算符：+ - * /(div) %(mod)</li>
<li>比较运算符：&gt; &lt; &gt;= &lt;= == !=</li>
<li>逻辑运算符：&amp;&amp;(and) ||(or) !(not)</li>
<li>空运算符：empty<ul>
<li>${empty list}：用于判断字符串、集合、数组对象是否为null或者长度是否为0</li>
<li>${not empty str}：用于判断字符串、集合、数组对象是否不为null并且长度&gt;0</li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>  &lt;h3&gt;算数运算&lt;/h3&gt;<br>  $&#123;3 + 4&#125;&lt;br&gt;<br>  $&#123;3 / 4&#125;&lt;br&gt;<br>  $&#123;3 div 4&#125;&lt;br&gt;<br>  $&#123;3 % 4&#125;&lt;br&gt;<br>  $&#123;3 mod 4&#125;&lt;br&gt;<br>  &lt;h3&gt;比较运算&lt;/h3&gt;<br>  $&#123;3 == 4&#125;&lt;br&gt;<br>  &lt;h3&gt;逻辑运算&lt;/h3&gt;<br>  $&#123;3 &gt; 4 &amp;&amp; 3 &lt; 4&#125;&lt;br&gt;<br>  $&#123;3 &gt; 4 and 3 &lt; 4&#125;&lt;br&gt;<br>  &lt;h3&gt;empty运算符&lt;/h3&gt;<br>  &lt;%<br>    String str = "abc";<br>    request.setAttribute("str", str);<br><br>    List list = new ArrayList();<br>    request.setAttribute("list", list);<br>  %&gt;<br>  $&#123;empty str&#125;<br>  $&#123;not empty list&#125;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure>
<h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><ul>
<li><p>el表达式只能从域对象中获取值</p>
</li>
<li><p>语法：</p>
<ol>
<li><p>${域名称.键名}：从指定域中获取指定的键的值。</p>
<ul>
<li>域名称：</li>
</ul>
<ol>
<li>pageScope        –&gt;     pageContext</li>
<li>requestScope     –&gt;     request</li>
<li>sessionScope     –&gt;     session</li>
<li>applicationScope –&gt;     application(ServletContext)</li>
</ol>
<ul>
<li>举例：在request域中存储了name=张三</li>
<li>获取：${reques.name}</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;获取域中的值&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%<br>        request.setAttribute("name", "张三");<br>        session.setAttribute("age", "23");<br>    %&gt;<br>&lt;h3&gt;获取值&lt;/h3&gt;<br>$&#123;requestScope.name&#125;<br>$&#123;sessionScope.age&#125;<br>&lt;%--  获取不到值时显示空字符串  --%&gt;<br>$&#123;sessionScope.haha&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure></li>
<li><p>${键名}：表示依次从最小的域中查找是否有该键的对应值，直到找到为止。</p>
</li>
<li><p>获取对象、List集合、Map集合中的值</p>
<ul>
<li>对象：${域名称.键名.属性名}（本质上会去调用对象的getter方法）</li>
<li>List集合：${域名称.键名[索引]}（索引超出数组长度，返回空字符串）</li>
<li>Map集合：${域名称.键名.key名称}（或：${域名称.键名[“key名称”]}）</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="隐式对象pageContext"><a href="#隐式对象pageContext" class="headerlink" title="隐式对象pageContext"></a>隐式对象pageContext</h4><p>${pageContext.request}<br>在jsp页面中动态获取虚拟目录<br>${pageContext.request.contextPath}</p>
<h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><ol>
<li>概念：JavaServer Page Tag Library  JSP标准标签库</li>
<li>作用：用于简化和替换jsp页面的java代码</li>
<li>使用步骤：<ol>
<li>导入jstl相关jar包</li>
<li>引入标签库：taglib指令：&lt;%@ taglib &gt;</li>
<li>使用标签</li>
</ol>
</li>
<li>常用的JSTL标签<ol>
<li>if：相当于Java代码的if语句</li>
<li>choose：相当于Java代码的switch语句</li>
<li>foreach：相当于Java代码的for语句</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>EL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习笔记（二）</title>
    <url>/2020/03/20/BOM%E5%92%8CDOM/</url>
    <content><![CDATA[<h1 id="BOM-amp-DOM"><a href="#BOM-amp-DOM" class="headerlink" title="BOM &amp; DOM"></a>BOM &amp; DOM</h1><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>Browser Object Model浏览器对象模型，将浏览器的各个组成部分封装成对象。</p>
<a id="more"></a>

<h4 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h4><h6 id="Window：窗口对象"><a href="#Window：窗口对象" class="headerlink" title="Window：窗口对象"></a>Window：窗口对象</h6><ul>
<li>创建<br>Window的对象不需要创建，直接可以调用方法。</li>
<li>方法</li>
</ul>
<ol>
<li><p>与弹出框有关的方法：<br><br><strong>alert()：</strong> 显示带有一段消息和一个确认按钮的警告框。<br><br><strong>confirm()：</strong> 显示带有一段消息以及确认按钮和取消按钮的对话框。返回值为false或true。<br><br><strong>prompt()：</strong> 显示可提示用户输入的对话框。</p>
</li>
<li><p>与打开关闭有关的方法：<br><br><strong>open():</strong> 打开一个新浏览器窗口对象，可加参数<br><br><strong>close():</strong> 关闭浏览器窗口<br></p>
</li>
<li><p>与定时器有关的方法：<br><br><strong>setTimeout()：</strong> 在指定的毫秒数后调用函数或计算表达式。（一次性定时器）<br></p>
<blockquote>
<p>var id = setTimeout(“js代码”,毫秒值);</p>
</blockquote>
<p><strong>clearTimeout()：</strong> 取消由setTimeout()设置的timeout。<br></p>
<blockquote>
<p>clearTimeout(“js代码”,毫秒值);</p>
</blockquote>
<p><strong>setInterval()：</strong> 按照指定的周期（以毫秒计）来调用函数或计算表达式。<br></p>
<blockquote>
<p>var id = setInterval(id);</p>
</blockquote>
<p><strong>clearInterval()：</strong> 取消由setInterval()设置的timeout。<br></p>
<blockquote>
<p>clearInterval(id);</p>
</blockquote>
<p>轮播图小案例：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pic"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/pic1.jpg"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-keyword">var</span> number = <span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>      number++;<br>      <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">3</span>)&#123;<br>        number = <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">var</span> pic = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"pic"</span>);<br>      pic.src = <span class="hljs-string">"images/pic"</span>+ number +<span class="hljs-string">".jpg"</span><br>    &#125;<br>    setInterval(fun,<span class="hljs-number">3000</span>);<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
</ol>
<ul>
<li>属性<ol>
<li>获取其他BOM对象<br>history<br>location<br>navigator<br>screen</li>
<li>获取DOM对象<br>document</li>
</ol>
</li>
</ul>
<h6 id="Location：地址栏对象"><a href="#Location：地址栏对象" class="headerlink" title="Location：地址栏对象"></a>Location：地址栏对象</h6><ul>
<li><p>创建（获取）：</p>
<ol>
<li>window.location</li>
<li>location</li>
</ol>
</li>
<li><p>方法<br><br><strong>reload():</strong> 重新加载当前文档。</p>
</li>
<li><p>属性<br><br><strong>href：</strong> 设置或返回完整的URL。</p>
</li>
</ul>
<p>倒计时跳转页面小案例：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>      <span class="hljs-selector-tag">p</span>&#123;<br>        <span class="hljs-attribute">text-align</span>: center;<br>      &#125;<br>      <span class="hljs-selector-tag">span</span>&#123;<br>        <span class="hljs-attribute">color</span>: red;<br>      &#125;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"time"</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>秒后跳转至首页...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-keyword">var</span> second = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">var</span> time = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"time"</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tim</span>(<span class="hljs-params"></span>)</span>&#123;<br>      second--;<br>      <span class="hljs-keyword">if</span> (second &lt;= <span class="hljs-number">0</span>)&#123;<br>        location.href = <span class="hljs-string">"https://www.baidu.com"</span>;<br>      &#125;<br>      time.innerHTML = second + <span class="hljs-string">""</span>;<br>    &#125;<br>    setInterval(tim,<span class="hljs-number">1000</span>);<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h6 id="History：历史记录对象"><a href="#History：历史记录对象" class="headerlink" title="History：历史记录对象"></a>History：历史记录对象</h6><ul>
<li><p>创建</p>
<ol>
<li>window.history</li>
<li>history</li>
</ol>
</li>
<li><p>方法</p>
<ol>
<li><strong>back()：</strong> 加载history列表中的前一个URL。<br></li>
<li><strong>forward()：</strong> 加载history列表中的下一个URL。<br></li>
<li><strong>go()：</strong> 加载history列表中的某个具体页面。<br><blockquote>
<p>history.go(1); //前进一个历史记录的页面（参数为负则倒退）</p>
</blockquote>
</li>
</ol>
</li>
<li><p>属性<br><br><strong>length：</strong> 返回当前窗口历史列表中的URL数量。<br></p>
</li>
</ul>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>Document Object Model 文档对象模型<br><br>W3C DOM标准被分为3个不同的部分：<br></p>
<ul>
<li>核心DOM：针对任何结构化文档的标准模型</li>
<li>XML DOM：针对XML文档的标准模型</li>
<li>HTML DOM：针对HTML文档的标准模型<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li>控制HTML文档的内容。<blockquote>
<p>document.getElementByID(“id值”) // 通过元素的id获取元素对象</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<ol start="2">
<li>操作Element对象：<ul>
<li>修改标签的属性值</li>
<li>修改标签体内容</li>
</ul>
</li>
</ol>
<h4 id="核心DOM模型"><a href="#核心DOM模型" class="headerlink" title="核心DOM模型"></a>核心DOM模型</h4><ul>
<li>Document：文档对象</li>
<li>Element：元素对象</li>
<li>Attribute：属性对象</li>
<li>Text：文本对象</li>
<li>Comment：注释对象</li>
<li>Node：节点对象（其他5个对象的父对象）</li>
</ul>
<h6 id="Document：文档对象"><a href="#Document：文档对象" class="headerlink" title="Document：文档对象"></a>Document：文档对象</h6><ul>
<li><p>创建（获取）：通过window来获取和创建</p>
<ol>
<li>window.document</li>
<li>document</li>
</ol>
</li>
<li><p>方法：</p>
<ol>
<li><p>获取Element对象</p>
<ol>
<li>getElementById()：根据id属性值获取元素对象。id属性值一般唯一。</li>
<li>getElementByTagName()：根据元素名称获取元素对象。返回值是一个数组。</li>
<li>getElementByClassName()：根据Class属性值获取元素对象。返回值是一个数组。</li>
<li>getElementByName()：根据name属性值获取元素对象。返回值是一个数组。</li>
</ol>
</li>
<li><p>创建其他DOM对象</p>
<ol>
<li>creatAttribute(name)</li>
<li>creatComment()</li>
<li>creatElement()</li>
<li>creatTextNode()</li>
</ol>
</li>
</ol>
</li>
</ul>
<h6 id="Element：元素对象"><a href="#Element：元素对象" class="headerlink" title="Element：元素对象"></a>Element：元素对象</h6><ul>
<li>创建：通过document来获取和创建</li>
<li>方法：<ol>
<li>removeAttribute()：删除属性</li>
<li>setAttribute()：设置属性</li>
</ol>
</li>
</ul>
<h6 id="Node：节点对象"><a href="#Node：节点对象" class="headerlink" title="Node：节点对象"></a>Node：节点对象</h6><p>是整个DOM的主要数据类型。节点对象代表文档树中的一个单独的节点。节点可以是元素节点、属性节点、文本节点等。</p>
<ul>
<li>方法：<br>  CRUD dom树：<div class="hljs code-wrapper"><pre><code>1. appendChild()：向节点的子节点列表结尾添加新的子节点
2. removeChild()：删除（并返回）当前节点的指定节点
3. replaceChild()：用新节点替换一个子结点</code></pre></div></li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol>
<li>功能：组件被执行了某些操作后，触发某些代码的执行。</li>
<li>如何绑定事件：<ul>
<li>直接在HTML标签上指定事件的属性（操作），属性值就是js代码。<br><br>例如onclick（单击事件）</li>
<li>通过js获取元素对象，指定事件属性，设置一个函数。<blockquote>
<p>document.getElementByID(“…”)</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h4 id="常见的事件"><a href="#常见的事件" class="headerlink" title="常见的事件"></a>常见的事件</h4><ol>
<li><p>点击事件：</p>
<ol>
<li>onclick：单击事件</li>
<li>ondblclick：双击事件</li>
</ol>
</li>
<li><p>焦点事件：</p>
<ol>
<li>onblur：失去焦点</li>
<li>onfocus：元素获得焦点</li>
</ol>
</li>
<li><p>加载事件：</p>
<ul>
<li>onload：一张页面或一幅图像完成加载</li>
</ul>
</li>
<li><p>鼠标事件：</p>
<ol>
<li>onmousedown：鼠标按钮被按下</li>
<li>onmouseup：鼠标按键被松开</li>
<li>onmousemove：鼠标被移开</li>
<li>onmouseover：鼠标移到某个元素之上</li>
<li>onmouseout：鼠标从某个元素移开</li>
</ol>
</li>
<li><p>键盘事件：</p>
<ol>
<li>onkeydown：某个键盘被按下</li>
<li>onkeyup：某个键盘被松开</li>
<li>onkeypress：某个键盘被按下并松开</li>
</ol>
</li>
<li><p>选中和改变：</p>
<ol>
<li>onchange：域的内容被改变</li>
<li>onselect：文本被选中</li>
</ol>
</li>
<li><p>表单事件：</p>
<ol>
<li>onsubmit：确认按钮被点击</li>
<li>onreset：重置按钮被点击</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JSP课程学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习笔记（一）</title>
    <url>/2020/02/26/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>客户端脚本语言，不需要编译直接就可以被浏览器解析执行。运行在客户端浏览器，每个浏览器都有JavaScript的解析引擎。<br>由ECMAScript、BOM和DOM构成。</p>
<h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><p>可以增强用户和HTML页面的交互过程，可以控制HTML元素，让页面有一些动态效果，增强用户体验。</p>
<a id="more"></a>

<h2 id="ECMAScript：客户端脚本语言标准。"><a href="#ECMAScript：客户端脚本语言标准。" class="headerlink" title="ECMAScript：客户端脚本语言标准。"></a>ECMAScript：客户端脚本语言标准。</h2><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ol>
<li><p>与HTML的结合方式</p>
<ul>
<li><p>内部js：定义&lt;script&gt;标签，在标签体中写js代码。</p>
<blockquote>
<p>&lt;script&gt;js代码</script></p>
</blockquote>
</li>
<li><p>外部js：定义&lt;script&gt;标签，通过src属性引入外部的js文件。</p>
<blockquote>
<p>&lt;script src=”文件名.js”&gt;</script></p>
</blockquote>
</li>
</ul>
<p><strong>注意：</strong>&lt;script&gt;标签可以定义在HTML页面的任意位置、也可以定义多个，但是定义的位置会影响执行顺序。</p>
</li>
<li><p>注释</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript"><br><span class="hljs-comment">//单行注释</span><br><span class="hljs-comment">/*<br>多行注释<br>*/</span><br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>数据类型</p>
<ul>
<li>原始数据类型（基本数据类型）：<ol>
<li>number：数字。整数/小数/NaN</li>
<li>string：字符串。字符/字符串</li>
<li>boolean：true/false</li>
<li>null：一个对象为空的占位符</li>
<li>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li>
</ol>
</li>
<li>引用数据类型（对象）</li>
</ul>
</li>
<li><p>变量<br>JavaScript的变量是弱类型变量，在申请变量存储空间时不定义数据类型。<br><strong>语法：</strong></p>
<blockquote>
<p>var 变量名=变量值</p>
</blockquote>
</li>
<li><p>运算符</p>
<ul>
<li><p>一元运算符</p>
<ol>
<li>++：自增</li>
<li>–：自减</li>
<li>+(-)：正（负）号。在js中如果运算数不是运算所要求的类型，js引擎会自动将运算数进行类型转换。例如：<blockquote>
<p>var b = +”123”;  //原本b应该是字符串类型123，但是由于正号的转换，b变成了数值类型123<br>var a = +”abc”  //字符串abc会被转为NaN<br>var c = true  //转为1<br>var d = false //转为0</p>
</blockquote>
</li>
</ol>
</li>
<li><p>算术运算符<br><strong>+ 、- 、* 、/</strong></p>
</li>
<li><p>赋值运算符<br><strong>=</strong></p>
</li>
<li><p>比较运算符<br><strong>&gt; 、&lt; 、&gt;= 、&lt;= 、== 、===(全等于)</strong></p>
<ul>
<li><p>类型相同直接比较，字符串的比较按照字典顺序逐一比较，直到比出大小为止。</p>
<blockquote>
<p>3&gt;4  //false<br>“abc”&gt;”acd”  //第二位c大于b 返回false</p>
</blockquote>
</li>
<li><p>类型不同，先转换类型在比较</p>
<blockquote>
<p>“123”&gt;123  //false<br>“123”==123  //false  由于类型不同，不能直接比，返回false。此时要用===（全等于）</p>
</blockquote>
</li>
</ul>
</li>
<li><p>逻辑运算符<br><strong>&amp;&amp; 、|| 、!</strong><br>注意：其他类型转boolean</p>
<ol>
<li>number：0或NaN为false，其余为true</li>
<li>string：除了空字符串（””），其余为true</li>
<li>null&amp;undefined：都是假</li>
<li>对象：所有对象都是true</li>
</ol>
</li>
<li><p>三元运算符<br><strong>? 、:</strong></p>
<blockquote>
<p>var a = 3;<br> var b = 4;<br> var c = a &gt; b ? 1 : 0;  // 如果a&gt;b 则c=1，否则c=0</p>
</blockquote>
</li>
</ul>
</li>
<li><p>流程控制语句</p>
<ul>
<li>if …else…</li>
<li>switch 在js中可以接受任意类型的数据</li>
<li>while</li>
<li>do…while</li>
<li>for</li>
</ul>
</li>
</ol>
<ul>
<li><p>九九乘法表小项目：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>九九乘法表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>      <span class="hljs-selector-tag">td</span>&#123;<br>         <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>      &#125;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>      <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;table align='center'&gt;"</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++)&#123;<br>        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;tr&gt;"</span>)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)&#123;<br>          <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;td&gt;"</span>)<br>          <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">"*"</span> + j + <span class="hljs-string">"="</span> + (i*j) +<span class="hljs-string">"&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span>);<br>          <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;/td&gt;"</span>)<br>        &#125;<br>        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;br&gt;"</span>);<br>        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;/tr&gt;"</span>)<br>      &#125;<br>      <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;/table&gt;"</span>)<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h4><h6 id="Function函数-方法-对象："><a href="#Function函数-方法-对象：" class="headerlink" title="Function函数(方法)对象："></a>Function函数(方法)对象：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var 方法名 = new Function(参数列表, 方法体);</p>
</blockquote>
<blockquote>
<p> function 方法名称（参数列表）{<br> 方法体<br>}</p>
</blockquote>
<blockquote>
<p>var 方法名称 = function(形式参数列表){<br>方法体<br>}</p>
</blockquote>
</li>
<li><p>方法</p>
</li>
<li><p>属性：</p>
<ul>
<li>length：代表形参个数</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li>方法定义时，形参的类型不用写,返回值也不用写。</li>
<li>方法是一个对象，定义名称相同的方法，会覆盖之前的。</li>
<li>在js中方法的调用值与方法名称有关，与参数列表无关。</li>
<li>在方法声明中，有一个隐藏的内置对象（数组），arguments封装所有的实际参数。<blockquote>
<p>求任意个数的和：</p>
</blockquote>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++)&#123;<br>            sum += <span class="hljs-built_in">arguments</span>[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-keyword">var</span> sum = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    alert(sum);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>调用：</p>
<blockquote>
<p>方法名称（实际参数列表）;</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h6 id="Array："><a href="#Array：" class="headerlink" title="Array："></a>Array：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var arr = new Array(元素列表);</p>
</blockquote>
<blockquote>
<p> var arr = new Array(默认长度);</p>
</blockquote>
<blockquote>
<p>var arr = [元素列表];</p>
</blockquote>
</li>
<li><p>方法：</p>
<ul>
<li>join()： 将数组中的元素按照指定的分隔符拼接为字符串</li>
<li>push()：列表末尾进行追加</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>length：代表数组的长度</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li>JS中，数组元素的类型可变</li>
<li>JS中，数组的长度可变</li>
</ul>
</li>
</ol>
<h6 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h6><h6 id="Date："><a href="#Date：" class="headerlink" title="Date："></a>Date：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var date = new Date();</p>
</blockquote>
</li>
<li><p>方法：</p>
<ul>
<li>toLocaleString()：返回当前date对象对应的时间本地字符串格式</li>
<li>getTime()：返回当前日期对象描述的时间至1970年1月1日零点的毫秒值差（用于时间戳）</li>
</ul>
</li>
</ol>
<h6 id="Math："><a href="#Math：" class="headerlink" title="Math："></a>Math：</h6><ol>
<li>方法：<ul>
<li>random()：返回0~1的随机数</li>
<li>ceil(x)：对数字向上取整</li>
<li>floor(x)：对数字向下取整</li>
<li>round(x)：把数字四舍五入为最接近的整数</li>
</ul>
</li>
<li>属性：<ul>
<li>PI：圆周率</li>
</ul>
</li>
<li>特点：<br>Math对象不用创建，直接使用。</li>
</ol>
<h6 id="Number："><a href="#Number：" class="headerlink" title="Number："></a>Number：</h6><ol>
<li><p>创建：</p>
<blockquote>
<p>var arr = new Array(元素列表);</p>
</blockquote>
</li>
<li><p>方法：</p>
</li>
<li><p>属性：</p>
<ul>
<li>length：代表数组的长度</li>
</ul>
</li>
<li><p>特点：</p>
</li>
</ol>
<h6 id="String："><a href="#String：" class="headerlink" title="String："></a>String：</h6><h6 id="RegExp："><a href="#RegExp：" class="headerlink" title="RegExp："></a>RegExp：</h6><p><strong>正则表达式：</strong> 定义字符串的组成规则。</p>
<ol>
<li>单个字符：[]<br>如：[a] [ab] [a-zA-Z0-9]<br>特殊符号代表特殊含义的单个字符：<ul>
<li>\d：单个数字字符[0-9]</li>
<li>\w：单个单词字符[a-zA-Z0-9]</li>
</ul>
</li>
<li>量词符号：<ul>
<li>?：表示出现0次或1次</li>
<li>*：表示出现0次或多次</li>
<li>+：表示出现1次或多次</li>
<li>{m,n}：表示m&lt;=数量&lt;=n<ul>
<li>m如果缺省{,n}：最多n次</li>
<li>n如果缺省{m,}：最少n次</li>
</ul>
</li>
</ul>
</li>
<li>开始结束符号：<ul>
<li>^：开始</li>
<li>$：结束</li>
</ul>
</li>
</ol>
<p><strong>正则对象：</strong></p>
<ol>
<li><p>创建</p>
<blockquote>
<p>var reg = new RegExp(“正则表达式”);</p>
</blockquote>
<blockquote>
<p>var reg = /正则表达式/;</p>
</blockquote>
</li>
<li><p>方法</p>
<ul>
<li>test()：验证指定的字符串是否符合定义的规范，返回值为Boolean</li>
</ul>
</li>
</ol>
<h6 id="Global"><a href="#Global" class="headerlink" title="Global:"></a>Global:</h6><ol>
<li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。方法名();</p>
</li>
<li><p>方法：</p>
<ul>
<li><p>encodeURI()：URL编码，只对汉字进行编码</p>
</li>
<li><p>decodeURI()：URL解码</p>
</li>
<li><p>encodeURIComponent()：URL编码，编码的字符更多</p>
</li>
<li><p>dncodeURIComponent()：URL解码</p>
</li>
<li><p>parseInt()：将字符串转为数字。逐一判断每一个字符是否为数字，直到不是数字位置，将前边数字部分转为number。</p>
<blockquote>
<p>“123” –&gt; 123<br>“123abc”  –&gt; 123</p>
</blockquote>
</li>
<li><p>isNaN()：判断一个值是否是NaN。NaN参与的==比较返回结果均为false，只能通过该方法判断。</p>
</li>
<li><p>eval()：将JavaScript的字符串转为脚本并执行。</p>
<blockquote>
<p>var jscode = “alert(123)”;  //原本为字符串<br>eval(jscode);  //通过eval()方法解析字符串片段</p>
</blockquote>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JSP课程学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML标签回顾</title>
    <url>/2020/02/19/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h4><ol>
<li>i：斜体</li>
<li>b：加粗</li>
<li>font：字体标签</li>
<li>结合CSS使用的标签</li>
<li>div：每一个div占满一整行。块级标签。</li>
</ol>
<a id="more"></a>

<h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><ol>
<li>table：表格<ul>
<li>width 宽度</li>
<li>border 边框</li>
<li>cellpadding 定义内容与单元格之间的距离</li>
<li>cellspacing 定义单元格之间的距离</li>
</ul>
</li>
<li>tr：行</li>
<li>td：单元格<ul>
<li>colspan：合并列</li>
<li>rowspan：合并行</li>
</ul>
</li>
<li>th：表头单元格（内容会自动居中并加粗）</li>
<li>&lt;caption&gt;：表格标题，在表格上方、剧中</li>
<li>&lt;thead&gt;：表示表格的头部份</li>
<li>&lt;tbody&gt;：表示表格的体部份</li>
<li>&lt;tfoot&gt;：表示表格的脚部份</li>
</ol>
<h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><p>form：用于定义表单。可定义一个代表采集用户数据的范围。</p>
<ol>
<li><p>action：指定提交数据的URL</p>
</li>
<li><p>method：指定提交方式</p>
<ul>
<li>get：<ol>
<li>请求参数会在地址栏中显示，会封装到请求行中</li>
<li>请求参数大小有限制</li>
<li>不太安全</li>
</ol>
</li>
<li>post：<ol>
<li>请求参数不会在地址栏中显示，会封装到请求行中</li>
<li>请求参数大小没有限制</li>
<li>较为安全</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h4><p><strong>input：可以通过type属性值改变元素展示样式。</strong></p>
<h6 id="type"><a href="#type" class="headerlink" title="type"></a>type</h6><ul>
<li>text：文本框<ul>
<li>placeholder：指定输入框的提示信息，当输入框内容发生变化，会自动清空提示信息</li>
</ul>
</li>
<li>password：密码框</li>
<li>radio：单选框<ol>
<li>要想实现单选，name属性值要一致</li>
<li>给每个单选框提供value属性，指定其被选中后提交的值</li>
<li>checked属性，可以指定默认值</li>
</ol>
</li>
<li>check：复选框<ol>
<li>要想实现选择，name属性值要一致</li>
<li>给每个复选框提供value属性，指定其被选中后提交的值</li>
<li>checked属性，可以指定默认值</li>
</ol>
</li>
<li>file：文件选择框</li>
<li>hidden：隐藏域</li>
<li>按钮：<ol>
<li>submit：提交按钮，用于提交表单</li>
<li>button：普通按钮</li>
<li>image：图片提交按钮。</li>
</ol>
<strong>lable：标签。其中的for属性一般会和inpu的id属性值对应。</strong><br><strong>select：下拉列表</strong><ul>
<li>option：定义可选的列表项</li>
</ul>
<strong>textarea：文本域</strong></li>
</ul>
]]></content>
      <categories>
        <category>HTML标签</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP学习笔记</title>
    <url>/2020/02/10/JSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="WEB-INFO目录结构"><a href="#WEB-INFO目录结构" class="headerlink" title="WEB-INFO目录结构"></a>WEB-INFO目录结构</h2><p><strong>WEB-INF</strong> 是Java的WEB应用的安全目录，客户端上访问不到，只有服务端才能访问。<br><strong>web.xml</strong> 是项目部署文件。<br><strong>class文件夹</strong> 用于存放.class文件。<br><strong>lib文件夹</strong> 存放项目所需jar包.</p>
<a id="more"></a>

<h2 id="JSP页面元素构成"><a href="#JSP页面元素构成" class="headerlink" title="JSP页面元素构成"></a>JSP页面元素构成</h2><h6 id="静态内容"><a href="#静态内容" class="headerlink" title="静态内容"></a>静态内容</h6><p>HTML静态文件体</p>
<h6 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h6><ul>
<li>page指令： 位于jsp页面顶端，同一个页面可以有多个page指令。</li>
<li>language：指定jsp页面使用的脚本语言，默认为Java。</li>
<li>import：引用脚本中使用到的类文件。</li>
<li>contentType：指定jsp页面编码方式，默认为text/html，ISO-8859-1。</li>
<li>include指令：将一个外部文件嵌入到当前jsp文件中，并解析页面中的jsp语句。</li>
<li>taglib指令：使用标签库定义新的标签，在jsp页面中启用定制行为。</li>
</ul>
<p><strong>示例：</strong><br>       <code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code></p>
<h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><p>​    HTML注释：<br>​        <code>&lt;!-- html注释，客户端可见 --&gt;</code><br>​    JSP注释：<br>​        <code>&lt;%-- jsp注释，客户端不可见 --%&gt;</code><br>​    JSP脚本中可使用Java注释。</p>
<h6 id="小脚本"><a href="#小脚本" class="headerlink" title="小脚本"></a>小脚本</h6><p><code>&lt;%out.println(&quot;这是jsp脚本&quot;)%&gt;</code></p>
<h6 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h6><p>在jsp页面中定义变量或者发方法。<br><code>&lt;! String s = &quot;张三&quot;;&gt;</code></p>
<h6 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h6><p>在jsp页面中执行的表达式。<br><code>&lt;%=1+1 %&gt; //注意表达式后面不写;</code></p>
<h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><p>jsp内置对象是web容器创建的一组对象，不使用new关键词就可以使用的内置对象，例如：</p>
<figure class="highlight Java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java">&lt;%<br>    <span class="hljs-keyword">int</span>[] value = &#123;<span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>&#125;;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:value)&#123;<br>            out.println(i);  <span class="hljs-comment">// out就是内置对象</span><br>        &#125;<br>    %&gt;<br></code></pre></div></td></tr></table></figure>
<h4 id="jsp九大内置对象"><a href="#jsp九大内置对象" class="headerlink" title="jsp九大内置对象"></a>jsp九大内置对象</h4><h6 id="常用的五个"><a href="#常用的五个" class="headerlink" title="常用的五个:"></a>常用的五个:</h6><ol>
<li><strong>out：</strong> JspWriter类的实例，向客户端输出内容的常用对象。<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>out内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    缓冲区大小：<span class="hljs-tag">&lt;<span class="hljs-name">%=out.getBufferSize()%</span>&gt;</span>byte<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    缓冲区剩余大小：<span class="hljs-tag">&lt;<span class="hljs-name">%=out.getRemaining()%</span>&gt;</span>byte<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    是否自动清空缓冲区：<span class="hljs-tag">&lt;<span class="hljs-name">%=out.isAutoFlush()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<strong>预览效果：</strong><br><img src="/images/jspStudy/out.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></li>
<li><strong>request：</strong> HttpServletRequest类的实例。<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;requesr内置对象&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;Request内置对象&lt;/h1&gt;<br>        &lt;%<br>            // 设置请求默认的编码，解决页面中文乱码问题<br>            request.setCharacterEncoding("UTF-8");<br>            // 存储此请求中的属性<br>            request.setAttribute("passwd", "123456");<br>        %&gt;<br>        用户名：&lt;%=request.getParameter("username") %&gt;<br>        &lt;br&gt;<br>        爱好：&lt;%<br>            if (request.getParameterValues("favorite")!=null) &#123;<br>                String[] favorites = request.getParameterValues("favorite");<br>                for (int i = 0; i &lt; favorites.length; i++) &#123;<br>                    out.println(favorites[i] + "&amp;nbsp&amp;nbsp;");<br>                &#125;<br>            &#125;<br>            %&gt;&lt;br&gt;<br>        密码： &lt;%=request.getAttribute("passwd")%&gt;&lt;br&gt;<br>        请求体的MIME类型：&lt;%=request.getContentType()%&gt;&lt;br&gt;<br>        协议类型及版本号：&lt;%=request.getProtocol()%&gt;&lt;br&gt;<br>        服务器主机名：&lt;%=request.getServerName()%&gt;&lt;br&gt;<br>        服务器端口号：&lt;%=request.getServerPort()%&gt;&lt;br&gt;<br>        请求文件的长度：&lt;%=request.getContentLength()%&gt;&lt;br&gt;<br>        请求客户端的IP地址：&lt;%=request.getRemoteAddr()%&gt;&lt;br&gt;<br>        请求的上下文路径：&lt;%=request.getContextPath()%&gt;&lt;br&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure></li>
</ol>
<p> <strong>预览效果：</strong><br> <img src="/images/jspStudy/request.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br> 3. <strong>response：</strong> HttpServletResponse类的实例。<br> <figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<br>&lt;%<br>    response.setContentType("text/html; charset=utf-8");<br>    out.print("&lt;h1&gt;response内置对象&lt;/h1&gt;");<br>    out.print("&lt;hr&gt;");<br>    PrintWriter outer = response.getWriter(); //获得输出流对象，<br>    // response对象获得的writer对象输出打印时提前于内置out对象<br>    outer.println("response对象生成的输出流outer对象");<br>    out.print("&lt;br&gt;");<br>    out.print("&lt;h1&gt;response内置对象&lt;/h1&gt;");<br>    out.print("&lt;hr&gt;");<br>    out.flush();<br>    PrintWriter outer1 = response.getWriter(); //获得输出流对象，<br>    // response对象获得的writer对象输出打印时提前于内置out对象<br>    outer.println("response对象生成的输出流outer对象");<br>//    response.sendRedirect("request.jsp");  //请求重定向<br>%&gt;<br></code></pre></div></td></tr></table></figure><br> <strong>预览效果：</strong><br> <img src="/images/jspStudy/response.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br> 4. <strong>session：</strong> 客户端与服务器的一次对话，从第一次打开客户端到其完全关闭的一段时间。<br> <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>session内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>session内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        <span class="hljs-attr">SimpleDateFormat</span> <span class="hljs-attr">sdf</span> = <span class="hljs-string">new</span> <span class="hljs-attr">SimpleDateFormat</span>("<span class="hljs-attr">yyy</span>年<span class="hljs-attr">MM</span>月<span class="hljs-attr">dd</span>日 <span class="hljs-attr">HH:mm:ss</span>");<br>        <span class="hljs-attr">Date</span> <span class="hljs-attr">d</span> = <span class="hljs-string">new</span> <span class="hljs-attr">Date</span>(<span class="hljs-attr">session.getCreationTime</span>());<br>    %&gt;</span><br>    Session创建时间：<span class="hljs-tag">&lt;<span class="hljs-name">%=sdf.format(d)%</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    Session的ID编号：<span class="hljs-tag">&lt;<span class="hljs-name">%=session.getId()%</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><br> <strong>预览效果：</strong><br> <img src="/images/jspStudy/session.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br> 5. <strong>application：</strong> 实现用户间数据的共享，可存放全局变量。开始于服务器的启动，终止于服务器的关闭。在用户的前后链接或不同用户之间的连接中，可以对application对象的同意属性进行操作。<br> <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"java.util.Enumeration"</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>application内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>application内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        <span class="hljs-attr">application.setAttribute</span>("<span class="hljs-attr">city</span>", "北京");<br>        <span class="hljs-attr">application.setAttribute</span>("<span class="hljs-attr">postcode</span>", "<span class="hljs-attr">10000</span>");<br>        <span class="hljs-attr">application.setAttribute</span>("<span class="hljs-attr">email</span>", "<span class="hljs-attr">lisi</span>@<span class="hljs-attr">163.com</span>");<br>    %&gt;</span><br>    所在的城市：<span class="hljs-tag">&lt;<span class="hljs-name">%=application.getAttribute("city")%</span>&gt;</span><br>    中的属性有：<span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        <span class="hljs-attr">Enumeration</span> <span class="hljs-attr">attributes</span> = <span class="hljs-string">application.getAttributeNames();</span><br>        <span class="hljs-attr">while</span> (<span class="hljs-attr">attributes.hasMoreElements</span>())<br>        &#123;<br>            <span class="hljs-attr">out.println</span>(<span class="hljs-attr">attributes.nextElement</span>()+"&amp;<span class="hljs-attr">nbsp</span>&amp;<span class="hljs-attr">nbsp</span>");<br>        &#125;<br>    %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    JSP(SERVLET)引擎名及版本号：<span class="hljs-tag">&lt;<span class="hljs-name">%=application.getServerInfo()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><br> <strong>预览效果：</strong><br> <img src="/images/jspStudy/application.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h6 id="不常用的"><a href="#不常用的" class="headerlink" title="不常用的:"></a>不常用的:</h6><ol start="6">
<li><strong>page：</strong> 当前JSP页面本身，有点像类中的this指针。<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>page内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>page内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    当前page页面对象的字符串描述：<span class="hljs-tag">&lt;<span class="hljs-name">%=page.toString()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
</ol>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/page.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>7. <strong>pageContext ：</strong> 提供了对JSP页面内所有的对象及名字空间的访问。</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>pageContext<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>pageContext内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    session_page1中的用户名是：<span class="hljs-tag">&lt;<span class="hljs-name">%=pageContext.getSession().getAttribute("username")%</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        //跳转到注册页面<br>        //<span class="hljs-attr">pageContext.forward</span>("<span class="hljs-attr">reg.jsp</span>");<br>        //一个页面包含另一个页面<br>        <span class="hljs-attr">pageContext.include</span>("<span class="hljs-attr">include.jsp</span>");<br>    %&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><em>include.jsp</em></p>
<h6 id="includ指令"><a href="#includ指令" class="headerlink" title="includ指令"></a>includ指令</h6><p><code>&lt;%@include file=&quot;URL&quot;%&gt;</code></p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;%@ page import="java.util.Date" %&gt;<br>&lt;%@ page import="ja&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<br>&lt;%<br>    String path = request.getContextPath();<br>    String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";<br>    Date date = new Date();<br>    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");<br>    String s = sdf.format(date);<br>    out.println(s+"&lt;br&gt;");<br>%&gt;<br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/pageContext.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>8. <strong>exception：</strong> 是一个异常对象，当一个页面在运行过程中发生了异常，就产生这个对象。如果一个jsp页面要应用此对象，就必须把isErrorPage设定为true，否则无法编译。<br>想要查看该内置对象的实际效果，创建一个exception.jsp文件：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> <span class="hljs-attr">isErrorPage</span>=<span class="hljs-string">"true"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>exception<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>exception内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    异常消息是：<span class="hljs-tag">&lt;<span class="hljs-name">%=exception.getMessage()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    异常的字符串描述：<span class="hljs-tag">&lt;<span class="hljs-name">%=exception.toString()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>通过exception测试页面来查看（需要新建一个exceptionTest.jsp）</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> <span class="hljs-attr">errorPage</span>=<span class="hljs-string">"exception.jsp"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>exceptionTest<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试异常的页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        //在最上方添加<span class="hljs-attr">errorPage</span>=<span class="hljs-string">"exceptionTest.jsp"</span><br>        <span class="hljs-attr">System.out.println</span>(<span class="hljs-attr">100</span>/<span class="hljs-attr">0</span>); //抛出异常<br>    %&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/exception.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>9. <strong>config：</strong> 在Servlet初始化时，jsp引擎向它传递信息用的，此信息包括Servlet初始化时需要用到的参数（通过属性名和属性值构成）以及服务器的有关信息（通过传递一个ServletContext对象）。<br>​    <strong>请求重定向：</strong> 客户端行为，response.sendRedirect()，从本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的URL地址会改变。<br>​    <strong>请求转发：</strong> 服务器行为，request.getRequestDispatcher().forward(req,resp)，是一次请求，转发后请求对象保存，地址栏的URL地址不会改变。</p>
<h4 id="include指令和include动作标签"><a href="#include指令和include动作标签" class="headerlink" title="include指令和include动作标签"></a>include指令和include动作标签</h4><h6 id="includ指令-1"><a href="#includ指令-1" class="headerlink" title="includ指令"></a><a href="#includ指令">includ指令</a></h6><h6 id="include动作标签"><a href="#include动作标签" class="headerlink" title="include动作标签"></a>include动作标签</h6><p><code>&lt;jsp:include page=&quot;URL&quot; flush=&quot;true|false&quot; /&gt;</code></p>
<ul>
<li><strong>page：</strong> 要包含的页面</li>
<li><strong>flush：</strong> 被包含的页面是否从缓冲区读取(默认为false)</li>
</ul>
<p><em>include_action.jsp</em> 文件：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>includeAction<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>include动作<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:include</span> <span class="hljs-attr">page</span>=<span class="hljs-string">"date.jsp"</span> <span class="hljs-attr">flush</span>=<span class="hljs-string">"false"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><em>date.jsp</em> 文件：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"java.util.*"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%@page</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"java.text.*"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>    <span class="hljs-attr">Date</span> <span class="hljs-attr">d</span> = <span class="hljs-string">new</span> <span class="hljs-attr">Date</span>();<br>    <span class="hljs-attr">SimpleDateFormat</span> <span class="hljs-attr">sdf</span> = <span class="hljs-string">new</span> <span class="hljs-attr">SimpleDateFormat</span>("<span class="hljs-attr">yyyy</span>年<span class="hljs-attr">MM</span>月<span class="hljs-attr">dd</span>日");<br>    <span class="hljs-attr">String</span> <span class="hljs-attr">s</span> = <span class="hljs-string">sdf.format(d);</span><br>    <span class="hljs-attr">out.println</span>(<span class="hljs-attr">s</span>);<br>%&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/include_action.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h6 id="include指令和include动作比较"><a href="#include指令和include动作比较" class="headerlink" title="include指令和include动作比较"></a>include指令和include动作比较</h6><table>
<thead>
<tr>
<th></th>
<th align="center">includ指令</th>
<th align="center">jsp:include动作</th>
</tr>
</thead>
<tbody><tr>
<td>语法格式</td>
<td align="center">&lt;%@ include file=”..” %&gt;</td>
<td align="center">&lt;jsp:include page=”..” &gt;</td>
</tr>
<tr>
<td>发生作用的时间</td>
<td align="center">页面转换期间</td>
<td align="center">请求期间</td>
</tr>
<tr>
<td>包含的内容</td>
<td align="center">文件的实际内容</td>
<td align="center">页面的输出</td>
</tr>
<tr>
<td>转换成的Servlet</td>
<td align="center">主页面和包含页面转换为一个Servlet</td>
<td align="center">主页面和包含页面转换为独立的Servlet</td>
</tr>
<tr>
<td>编译时间</td>
<td align="center">较慢——资源必须被解析</td>
<td align="center">较快</td>
</tr>
<tr>
<td>执行时间</td>
<td align="center">稍快</td>
<td align="center">较慢——每次资源必须被解析</td>
</tr>
</tbody></table>
<h4 id="forward动作"><a href="#forward动作" class="headerlink" title="forward动作"></a>forward动作</h4><p><strong>语法：</strong><br><code>&lt;jsp:forward page=&quot;URL&quot; /&gt;</code><br><strong>等同于：</strong><br><code>request.getRequestDispatcher(&quot;/url&quot;).forward(request,response);</code><br>首先创建<em>login.jsp</em>文件,将action提交给<em>forward.jsp</em>处理：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>系统登陆<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"loginForm"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"forward.jsp"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"登陆"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>创建<em>forward.jsp</em>文件，使用forward动作提交给<em>user.jsp</em>进行处理：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>forward动作<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:include</span> <span class="hljs-attr">page</span>=<span class="hljs-string">"user.jsp"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><em>user.jsp</em> 文件用于获取用户登陆信息：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户资料<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>用户资料<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">request.setCharacterEncoding</span>("<span class="hljs-attr">utf-8</span>");%&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        <span class="hljs-attr">String</span> <span class="hljs-attr">username</span> = <span class="hljs-string">""</span>;<br>        <span class="hljs-attr">String</span> <span class="hljs-attr">password</span> = <span class="hljs-string">""</span>;<br>        <span class="hljs-attr">if</span> (<span class="hljs-attr">request.getParameter</span>("<span class="hljs-attr">username</span>")!=<span class="hljs-string">null)&#123;</span><br>            <span class="hljs-attr">username</span> = <span class="hljs-string">request.getParameter(</span>"<span class="hljs-attr">username</span>");<br>        &#125;<br>        <span class="hljs-attr">if</span> (<span class="hljs-attr">request.getParameter</span>("<span class="hljs-attr">password</span>")!=<span class="hljs-string">null)&#123;</span><br>            <span class="hljs-attr">password</span> = <span class="hljs-string">request.getParameter(</span>"<span class="hljs-attr">password</span>");<br>        &#125;<br>    %&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=username</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=password</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/forward.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h4 id="param动作"><a href="#param动作" class="headerlink" title="param动作"></a>param动作</h4><p><code>&lt;jsp:param name=&quot;参数名&quot; value=&quot;参数值&quot;&gt;</code><br>常常和&lt;jsp:forward &gt;一起使用，作为其子标签。<br>将<em>login.jsp<em>中的action对象</em>forward.jsp<em>改为</em>dologin.jsp</em>,然后新建一个<em>dologin.jsp</em>文件：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:forward</span> <span class="hljs-attr">page</span>=<span class="hljs-string">"user.jsp"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jsp:param</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"admin@163.com"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">jsp:forward</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>在<em>user.jsp</em>文件中加入以下代码：</p>
<figure class="highlight vbscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbscript"><span class="hljs-built_in">String</span> email = <span class="hljs-string">""</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">request</span>.getParameter(<span class="hljs-string">"email"</span>)!=<span class="hljs-literal">null</span>)&#123;<br>           email = <span class="hljs-built_in">request</span>.getParameter(<span class="hljs-string">"email"</span>);<br>       &#125;<br><br>电子邮箱：&lt;%=email %&gt;<br></code></pre></div></td></tr></table></figure>
<p>该过程是为了演示param的作用,虽然用户登陆时提交的表单信息中没有<em>email</em>内容，但是用过param可以进行赋值。<br><strong>预览效果：</strong><br><img src="/images/jspStudy/param.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h4 id="Cookie：是web服务器保存在客户端的一系列文本信息。"><a href="#Cookie：是web服务器保存在客户端的一系列文本信息。" class="headerlink" title="Cookie：是web服务器保存在客户端的一系列文本信息。"></a>Cookie：是web服务器保存在客户端的一系列文本信息。</h4><p>典型应用一：判定注册用户是否已经登陆网站。<br>典型应用二:“购物车”的处理。<br>生活中Cookie的应用：浏览记录、记住用户名和密码实现自动登录</p>
<h6 id="Cookie的作用："><a href="#Cookie的作用：" class="headerlink" title="Cookie的作用："></a>Cookie的作用：</h6><ul>
<li>对特定对象的追踪</li>
<li>保存用户网页浏览记录与习惯</li>
<li>简化登录<br>安全风险：容易泄露用户信息<h6 id="jsp中创建和使用Cookie"><a href="#jsp中创建和使用Cookie" class="headerlink" title="jsp中创建和使用Cookie"></a>jsp中创建和使用Cookie</h6>创建Cookie对象<br><code>Cookie newCookie = new Cookie(String key, Object value);</code><br>写入Cookie对象<br><code>response.addCookie(newCookie);</code><br>读取Cookie对象<br><code>Cookie[] cookie = request.getCookies();</code></li>
</ul>
<p><strong>常用方法：</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void setMaxAge(int expiry)</td>
<td>设置cookie的有效期，单位是秒</td>
</tr>
<tr>
<td>void setValue(String vlaue)</td>
<td>在cookie创建后，对cookie进行赋值</td>
</tr>
<tr>
<td>String setName()</td>
<td>获取cookie的名称</td>
</tr>
<tr>
<td>String grtValue()</td>
<td>获取cookie的值</td>
</tr>
<tr>
<td>int getMaxAge()</td>
<td>获取cookie的有效时间，单位是秒</td>
</tr>
</tbody></table>
<h6 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h6><ul>
<li><p>登陆界面：<em>login.jsp</em></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"java.net.*"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        <span class="hljs-attr">request.setCharacterEncoding</span>("<span class="hljs-attr">utf-8</span>");<br>        <span class="hljs-attr">String</span> <span class="hljs-attr">username</span> = <span class="hljs-string">""</span>;<br>        <span class="hljs-attr">String</span> <span class="hljs-attr">password</span> = <span class="hljs-string">""</span>;<br><br>        <span class="hljs-attr">Cookie</span>[] <span class="hljs-attr">cookies</span> = <span class="hljs-string">request.getCookies();</span><br>        <span class="hljs-attr">if</span> (<span class="hljs-attr">cookies</span>!=<span class="hljs-string">null&amp;&amp;cookies.length</span>&gt;</span>0)&#123;<br>            for (Cookie c:cookies)&#123;<br>                if (c.getName().equals("username"))&#123;<br>                    username = URLDecoder.decode(c.getValue(), "utf-8");<br>                &#125;<br>                if (c.getName().equals("password"))&#123;<br>                    password = URLDecoder.decode(c.getValue(), "utf-8");<br>                &#125;<br>            &#125;<br>        &#125;<br>    %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"loginForm"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"dologin.jsp"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"&lt;%=username %&gt;"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"&lt;%=password %&gt;"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"isCookie"</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">"checked"</span> /&gt;</span>十天内记住我的登陆状态<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"登陆"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>登陆处理：<em>dologin.jsp</em></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"java.net.*"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>登陆成功<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        <span class="hljs-attr">request.setCharacterEncoding</span>("<span class="hljs-attr">utf-8</span>");<br>        //先判断是否选择了记住登陆状态<br>        <span class="hljs-attr">String</span>[] <span class="hljs-attr">isCookie</span> = <span class="hljs-string">request.getParameterValues(</span>"<span class="hljs-attr">isCookie</span>");<br>        <span class="hljs-attr">if</span> (<span class="hljs-attr">isCookie</span>!=<span class="hljs-string">null&amp;&amp;isCookie.length</span>&gt;</span>0)&#123;<br>            // 把用户名和密码保存在Cookie对象中<br>            // 使用URLEncoder.encode()方法将Cookie中用户名或者密码的中文进行编码<br>            String username = URLEncoder.encode(request.getParameter("username"), "utf-8");<br>            String password = URLEncoder.encode(request.getParameter("password"), "utf-8");<br><br>            Cookie usernameCookie = new Cookie("username", username);<br>            Cookie passwordCookie = new Cookie("password", password);<br><br>            // 设置Cookie最大生存时间<br>            usernameCookie.setMaxAge(486000);<br>            passwordCookie.setMaxAge(486000);<br><br>            // 将数据保存到Cookie对象中<br>            response.addCookie(usernameCookie);<br>            response.addCookie(passwordCookie);<br>        &#125;<br>        else &#123;<br>            // 不勾选记住登陆状态时的操作<br>            Cookie[] cookies = request.getCookies();<br>            if (cookies!=null&amp;&amp;cookies.length&gt;0)&#123;<br>                for (Cookie c:cookies)&#123;<br>                    if (c.getName().equals("username")||c.getName().equals("password"))&#123;<br>                        c.setMaxAge(0);// 设置cookie失效<br>                        response.addCookie(c);//重新保存<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"users.jsp"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>查看用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>用户界面：<em>users.jsp</em></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"java.net.*"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>        <span class="hljs-attr">request.setCharacterEncoding</span>("<span class="hljs-attr">utf-8</span>");<br>        <span class="hljs-attr">String</span> <span class="hljs-attr">username</span> = <span class="hljs-string">""</span>;<br>        <span class="hljs-attr">String</span> <span class="hljs-attr">password</span> = <span class="hljs-string">""</span>;<br>        <span class="hljs-attr">Cookie</span>[] <span class="hljs-attr">cookies</span> = <span class="hljs-string">request.getCookies();</span><br>        <span class="hljs-attr">if</span> (<span class="hljs-attr">cookies</span>!=<span class="hljs-string">null&amp;&amp;cookies.length</span>&gt;</span>0)&#123;<br>            for (Cookie c:cookies)&#123;<br>                if (c.getName().equals("username"))&#123;<br>                    // 解码<br>                    username = URLDecoder.decode(c.getValue(), "utf-8");<br>                &#125;<br>                if (c.getName().equals("password"))&#123;<br>                    password = URLDecoder.decode(c.getValue(), "utf-8");<br>                &#125;<br>            &#125;<br>        &#125;<br>    %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=username</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=password</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>首先我们来看一下登陆界面（由于测试的目标仅是Cookie的作用，并未涉及到登陆验证）<br><img src="/images/jspStudy/login_Cookie.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>由于这是第一次启动该项目，表单中并没有数据。我们填入相应信息，取消勾选记住登陆状态，然后尝试登陆-点击“查看用户信息”。弹出的页面并未显示用户数据：<br><img src="/images/jspStudy/userInfo1.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>关闭浏览器客户端，再次打开登陆界面：<br><img src="/images/jspStudy/login_Cookie.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>重新填写登录信息，此次勾选记住登陆状态，重复上述步骤：<br><img src="/images/jspStudy/userInfo2.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>重新打开的登陆界面包含了上次登录的用户信息：<br><img src="/images/jspStudy/login_Cookie2.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
</li>
</ul>
<h6 id="Session和Cookie对比"><a href="#Session和Cookie对比" class="headerlink" title="Session和Cookie对比"></a>Session和Cookie对比</h6><table>
<thead>
<tr>
<th>Session</th>
<th>Cookie</th>
</tr>
</thead>
<tbody><tr>
<td>在<strong>服务器端</strong>保存用户信息</td>
<td>在<strong>客户端</strong>保存用户信息</td>
</tr>
<tr>
<td>Session中保存的是<strong>Object</strong>类型</td>
<td>Cookie保存的是<strong>String</strong>类型</td>
</tr>
<tr>
<td>随会话的结束而将其存储的数据<strong>销毁</strong></td>
<td>可以<strong>长期</strong>保存在客户端</td>
</tr>
<tr>
<td>保存<strong>重要</strong>信息</td>
<td>保存<strong>不重要</strong>的用户信息</td>
</tr>
</tbody></table>
<h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>Javabeans就是符合某种特定的规范的Java类。使用Javabeans的好处是解决代码重复编写，减少代码冗余，功能区分明确，提高了代码的维护性。</p>
<h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul>
<li>公有类</li>
<li>无参的公有构造方法</li>
<li>属性私有</li>
<li>getter和setter方法<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//公有类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Students</span></span>&#123;<br>    <span class="hljs-comment">//属性私有</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>	<span class="hljs-comment">//无参的公有构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Students</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-comment">//getter和setter方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123;<span class="hljs-keyword">this</span>.name=name;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span></span>&#123;<span class="hljs-keyword">this</span>.age=age;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="什么是JSP动作"><a href="#什么是JSP动作" class="headerlink" title="什么是JSP动作"></a>什么是JSP动作</h4>JSP动作元素（action elements），动作元素为请求处理阶段提供信息。动作元素遵循XML元素的语法，有一个包含元素名的开始标签，可以有属性、可选内容、与开始标签匹配的结束标签。</li>
<li>第一类是与存取JavaBean有关的，包括：<br> &lt;jsp:useBean&gt; &lt;jsp:setProperty&gt;&lt;jsp:getProperty&gt;</li>
<li>第二类是JSP1.2就看似是有的基本元素，包括6个动作元素：<br>&lt;jsp:include&gt;&lt;jsp:forward&gt;&lt;jsp:param&gt;&lt;jsp:plugin&gt;&lt;jsp:params&gt;&lt;jsp:fallback&gt;</li>
<li>第三类是JSP2.0新增加的元素，主要与JSP Document有关，包括6个元素：<br>&lt;jsp:root&gt;&lt;jsp:declaration&gt;&lt;jsp:scriptlet&gt;&lt;jsp:expression&gt;&lt;jsp:text&gt;&lt;jsp:output&gt;</li>
<li>第四类是JSP2.0新增的动作元素，主要用来动态生成XML元素标签的值，包括3个动作：<br>&lt;jsp:attribute&gt;&lt;jsp:body&gt;&lt;jsp:element&gt;</li>
<li>第五类是JSP2.0新增的动作元素，主要是用在Tag File中，有2个元素：<br>&lt;jsp:invoke&gt;&lt;jsp:dobody<h6 id="1-用普通方式创建JavaBean实例："><a href="#1-用普通方式创建JavaBean实例：" class="headerlink" title="1.用普通方式创建JavaBean实例："></a>1.用普通方式创建JavaBean实例：</h6></li>
<li>首先在src下建立实体类</li>
<li>在jsp文件中使用page指令import实体类<br>用户实体类：<figure class="highlight Java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.po;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
使用内置对象调用JavaBean实例中的属性<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"com.po.User"</span>%&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>使用普通方式创建JavaBean的实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>      <span class="hljs-attr">User</span> <span class="hljs-attr">user</span> = <span class="hljs-string">new</span> <span class="hljs-attr">User</span>();<br>      <span class="hljs-attr">user.setUsername</span>("<span class="hljs-attr">admin</span>");<br>      <span class="hljs-attr">user.setPassword</span>("<span class="hljs-attr">123456</span>");<br>    %&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>使用普通方式创建JavaBean的实例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=user.getUsername()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=user.getPassword()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
</ul>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/index.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h6 id="2-在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个："><a href="#2-在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个：" class="headerlink" title="2.在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个："></a>2.在jsp页面中通常使用jsp动作标签使用JavaBean，常用的有以下三个：</h6><ol>
<li><strong>useBeans</strong><br><code>&lt;jsp:userBean id=&quot;标识符&quot; class=&quot;java&quot; scope=&quot;作用范围&quot; /&gt;</code><ul>
<li><strong>&lt;jsp:</strong>：表示这是jsp动作元素</li>
<li><strong>useBean</strong>：表示这是一个useBean标签</li>
<li><strong>id</strong>：所实例化的JavaBeans唯一标识符</li>
<li><strong>class</strong>：所用到的是哪个Java类，包括包名和类名</li>
<li><strong>scope</strong>：该标签的作用范围<br>使用useBeans动作创建JavaBean的实例,但是由于实体类中并未给属性赋值，故此处输出的属性值为null。<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>使用useBeans动作创建JavaBean的实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:useBean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.po.User"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"page"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>使用useBeans动作创建JavaBean的实例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=myUsers.getUsername()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=myUsers.getPassword()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p><strong>预览效果：</strong><br>    <img src="/images/jspStudy/useBean.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>2. <strong>setProperty</strong><br>  作用：给已经实例化的JavaBean对象的属性赋值，一共有四种形式：<br>    1. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;*&quot; /&gt;</code>（跟表单关联）<br>    2. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;JavaBean属性名&quot; /&gt;</code>（跟表单关联）<br>    3. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;JavaBean属性名&quot; value=&quot;BeanValue&quot;/&gt;</code>（手工设置）<br>    4. <code>&lt;jsp:serProperty name=&quot;JavaBean实例名&quot; property=&quot;propertyName&quot; param=&quot;request对象中的参数名&quot; /&gt;</code>（跟request参数关联）<br>在演示setProperty的使用效果时，我们首先建立一个带有表单的登陆系统：<em>login.jsp</em><br><strong>property=”*”，表示此时的属性从表单中进行匹配。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登陆系统<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"login"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"dologin.jsp?mypass=999999"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"登陆"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/login.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>用户通过登陆界面输入登陆所需信息，而登陆的逻辑操作由<em>dologin.jsp</em>完成：</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:useBean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.po.User"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"page"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>setProperty动作元素使用方法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  根据表单自动匹配所有的属性  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:setProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"*"</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--  使用传统表达式方式获取用户名和密码  --&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=myUsers.getUsername()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=myUsers.getPassword()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>然后在登陆界面提交登录信息（用户名：root 密码：123456），就能获得如下页面：<br><img src="/images/jspStudy/setProperty01.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><strong>property=”JavaBean属性名”，表示此时的属性由JavaBean进行指定，只获取指定的属性值。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  根据表单匹配部分属性  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">jsp:setProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"username"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>由于代码中未曾指定password这一属性，输出的结果只有用户名：<br><img src="/images/jspStudy/setProperty02.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><strong>property=”JavaBean属性名” value=”BeanValue”,该方法在赋值时由value的值决定，并不会使用表单中的值。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  跟表单无关，通过手工赋值给属性  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">jsp:setProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"李四"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">jsp:setProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"888888"</span>/&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>此处对”username”和”password”分别赋值为”李四”和”888888”,输出的结果就不会再是”root”和”123456”了。<br><img src="/images/jspStudy/setProperty03.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><strong>property=”propertyName” param=”request对象中的参数名”,此方法可以使用URL传参进行赋值。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--   通过URL传参数给属性赋值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jsp:setProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"username"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jsp:setProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">param</span>=<span class="hljs-string">"mypass"</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><em>login.jsp</em> 文件中<code>action=&quot;dologin.jsp?mypass=999999&quot;</code>,通过URL把密码”999999”进行传递：<br><img src="/images/jspStudy/setProperty04.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br>3. <strong>getProperty</strong><br>  作用：获取指定JavaBean对象的属性值<br>  <code>&lt;jsp:getProperty name=&quot;JavaBean实例名&quot; property=属性名 /&gt;</code></p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  使用getProperty方法获取用户名和密码  --&gt;</span><br>  用户名：<span class="hljs-tag">&lt;<span class="hljs-name">jsp:getProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"username"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  密码：<span class="hljs-tag">&lt;<span class="hljs-name">jsp:getProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><img src="/images/jspStudy/getProperty01.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
<h6 id="3-JavaBean的四个作用范围"><a href="#3-JavaBean的四个作用范围" class="headerlink" title="3.JavaBean的四个作用范围:"></a>3.JavaBean的四个作用范围:</h6><p>使用JavaBeans的scope属性可以用来指定JavaBean的作用范围。</p>
<ul>
<li>page：仅在当前页面有效。</li>
<li>request：可通过HttpRequest.getAttribute()方法取得JavaBean对象。</li>
<li>session：可通过HttpSession.getAttribute()方法取得JavaBean对象。</li>
<li>application：可通过application.getAttribute()方法取得JavaBean对象。<br>为了方便进行演示，在<em>login.jsp</em>文件中添加一个超链接:<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"testScope.jsp"</span>&gt;</span>测试scope四个作用于范围<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
并且新建一个<em>testScope.jsp</em>文件，<strong>将<em>dologin.jsp</em>文件中的”scope”属性改为”application”</strong> 来查看效果:<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">import</span>=<span class="hljs-string">"com.po.User"</span> %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>TestScope<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>JavaBean的四个作用于范围<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:useBean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.po.User"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"application"</span> /&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">jsp:getProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"username"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">jsp:getProperty</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myUsers"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  使用内置对象获取  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  application  --&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=((User)application.getAttribute("myUsers")).getUsername()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=((User)application.getAttribute("myUsers")).getPassword()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
</ul>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_application.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><strong>将<em>dologin.jsp</em>和<em>testScope.jsp</em>文件中的”scope”属性改为”session”</strong> 来查看效果:</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  session  --&gt;</span><br>  用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=((User)session.getAttribute("myUsers")).getUsername()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=((User)session.getAttribute("myUsers")).getPassword()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_session.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><strong>将<em>dologin.jsp</em>和<em>testScope.jsp</em>文件中的”scope”属性改为”request”</strong> 来查看效果:</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  request  --&gt;</span><br> 用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=((User)request.getAttribute("myUsers")).getUsername()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> 密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=((User)request.getAttribute("myUsers")).getPassword()%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_request.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"><br><strong>将<em>dologin.jsp</em>和<em>testScope.jsp</em>文件中的”scope”属性改为”page”</strong> 来查看效果:</p>
<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  page  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">%</span><br>       <span class="hljs-attr">String</span> <span class="hljs-attr">username</span> = <span class="hljs-string">""</span>;<br>       <span class="hljs-attr">String</span> <span class="hljs-attr">password</span> = <span class="hljs-string">""</span>;<br>       <span class="hljs-attr">if</span> (<span class="hljs-attr">pageContext.getAttribute</span>("<span class="hljs-attr">myUsers</span>")!=<span class="hljs-string">null)&#123;</span><br>           <span class="hljs-attr">username</span> = <span class="hljs-string">((User)pageContext.getAttribute(</span>"<span class="hljs-attr">myUsers</span>"))<span class="hljs-attr">.getUsername</span>();<br>           <span class="hljs-attr">password</span> = <span class="hljs-string">((User)pageContext.getAttribute(</span>"<span class="hljs-attr">myUsers</span>"))<span class="hljs-attr">.getPassword</span>();<br>       &#125;<br>   %&gt;</span><br>       用户名：<span class="hljs-tag">&lt;<span class="hljs-name">%=username%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>       密码：<span class="hljs-tag">&lt;<span class="hljs-name">%=password%</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览效果：</strong><br><img src="/images/jspStudy/scope_page.png" srcset="/img/loading.gif" lazyload alt="图片加载失败"></p>
]]></content>
      <categories>
        <category>JSP课程学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2020/02/04/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在文字前添加#，使之成为标题。<br>一个#是一级标题，两个#是二级标题，以此类推到六级标题。<br>注：标准语法一般在#后面跟个空格在写文字。</p>
<a id="more"></a>

<p><strong>示例：</strong></p>
<figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean"># 这是一级标题<br>## 这是二级标题<br>### 这是三级标题<br>#### 这是四级标题<br>##### 这是五级标题<br>###### 这是六级标题<br></code></pre></div></td></tr></table></figure>
<p>  对应的HTML：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>这是五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>这是六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>中间没有空行的连续不断的几行文字被视为一个段落。<br><strong>Markdown：</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed <span class="hljs-keyword">do</span> eiusmod tempor incididunt ut labore et dolore magna aliqua.<br>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip <span class="hljs-keyword">ex</span> ea commodo consequat. Duis aute irure dolor <span class="hljs-keyword">in</span> reprehenderit <span class="hljs-keyword">in</span> voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt <span class="hljs-keyword">in</span> culpa <span class="hljs-keyword">qui</span> officia deserunt mollit anim id <span class="hljs-keyword">est</span> laborum.<br></code></pre></div></td></tr></table></figure>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">&lt;p&gt;<br>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed <span class="hljs-keyword">do</span> eiusmod tempor incididunt ut labore et dolore magna aliqua.<br>&lt;<span class="hljs-keyword">br</span>&gt;<br>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip <span class="hljs-keyword">ex</span> ea commodo consequat. Duis aute irure dolor <span class="hljs-keyword">in</span> reprehenderit <span class="hljs-keyword">in</span> voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt <span class="hljs-keyword">in</span> culpa <span class="hljs-keyword">qui</span> officia deserunt mollit anim id <span class="hljs-keyword">est</span> laborum.<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure>
<h2 id="行内格式"><a href="#行内格式" class="headerlink" title="行内格式"></a>行内格式</h2><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">文本*<span class="hljs-strong">*加黑*</span>*<br>文本<span class="hljs-strong">*斜体*</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong><br>文本<strong>加黑</strong><br>文本<em>斜体</em><br><strong>对应的HTML:</strong>p</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  文本<br>  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加黑<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  文本<br>  <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>斜体<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p><strong>Markdown:</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> 引用段落一。</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 引用段落二。</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt; 内嵌引用块段落一。</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment">### 引用块内的标题</span></span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览</strong></p>
<blockquote>
<p>引用段落一。</p>
<p>引用段落二。</p>
<blockquote>
<p>内嵌引用块段落一。</p>
</blockquote>
<h3 id="引用块内的标题"><a href="#引用块内的标题" class="headerlink" title="引用块内的标题"></a>引用块内的标题</h3></blockquote>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>引用段落一。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>引用段落二。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内嵌引用块段落一。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"引用块内的标题"</span>&gt;</span>引用块内的标题"<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><strong>Markdown:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">行内式[<span class="hljs-string">博客</span>](<span class="hljs-link">https://1029322685.github.io/ "Leon's blog"</span>)链接，带title。<br>行内式[<span class="hljs-string">GitHub</span>](<span class="hljs-link">https://github.com/1029322685</span>)链接。<br>引用式[<span class="hljs-string">博客</span>][<span class="hljs-symbol">1</span>]链接。<br>引用式[<span class="hljs-string">GitHub</span>][<span class="hljs-symbol">2</span>]链接，带title。<br><br>[<span class="hljs-symbol">1</span>]:<span class="hljs-link">https://1029322685.github.io/</span><br>[<span class="hljs-symbol">2</span>]:<span class="hljs-link">https://github.com/1029322685 "我的GitHub主页"</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong><br>行内式<a href="https://1029322685.github.io/" target="_blank" rel="noopener" title="Leon&#39;s blog">博客</a>链接，带title。<br>行内式<a href="https://github.com/1029322685" target="_blank" rel="noopener">GitHub</a>链接。<br>引用式<a href="https://1029322685.github.io/" target="_blank" rel="noopener">博客</a>链接。<br>引用式<a href="https://github.com/1029322685" target="_blank" rel="noopener" title="我的GitHub主页">GitHub</a>链接，带title。</p>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>行内式<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://1029322685.github.io/"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Leon's blog"</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>链接，带title。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>行内式<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://github.com/1029322685"</span>&gt;</span>GitHub<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>链接。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>引用式<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://1## 图片029322685.github.io/"</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>链接。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>引用式<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://github.com/1029322685"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Leon's blog"</span>&gt;</span>GitHub<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>链接，带title。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>在超链接的写法前加一个！就是引用图片的方法。<br><strong>Markdown:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">图片加载失败</span>](<span class="hljs-link">/images/pic01.jpg "pic"</span>)<br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong><br><img src="/images/pic01.jpg" srcset="/img/loading.gif" lazyload alt="图片加载失败" title="pic"><br><strong>对应的HTML:</strong></p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">"images/pic01.jpg"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">"图片加载失败"</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">"pic"</span>&gt;<br></code></pre></div></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>Markdown:</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">- <span class="hljs-keyword">list</span> <span class="hljs-keyword">one</span><br>- <span class="hljs-keyword">list</span> <span class="hljs-keyword">two</span><br>- <span class="hljs-keyword">list</span> three<br><br>1. <span class="hljs-keyword">list</span> <span class="hljs-keyword">one</span><br>2. <span class="hljs-keyword">list</span> <span class="hljs-keyword">two</span><br>3. <span class="hljs-keyword">list</span> three<br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong></p>
<ul>
<li>list one</li>
<li>list two</li>
<li>list three</li>
</ul>
<ol>
<li>list one</li>
<li>list two</li>
<li>list three</li>
</ol>
<p><strong>对应的HTML:</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">&lt;ul&gt;<br>  &lt;<span class="hljs-keyword">li</span>&gt;<span class="hljs-keyword">list</span> <span class="hljs-keyword">one</span>&lt;/<span class="hljs-keyword">li</span>&gt;<br>  &lt;<span class="hljs-keyword">li</span>&gt;<span class="hljs-keyword">list</span> <span class="hljs-keyword">two</span>&lt;/<span class="hljs-keyword">li</span>&gt;<br>  &lt;<span class="hljs-keyword">li</span>&gt;<span class="hljs-keyword">list</span> three&lt;/<span class="hljs-keyword">li</span>&gt;<br>&lt;/ul&gt;<br>&lt;ol&gt;<br>  &lt;<span class="hljs-keyword">li</span>&gt;<span class="hljs-keyword">list</span> <span class="hljs-keyword">one</span>&lt;/<span class="hljs-keyword">li</span>&gt;<br>  &lt;<span class="hljs-keyword">li</span>&gt;<span class="hljs-keyword">list</span> <span class="hljs-keyword">two</span>&lt;/<span class="hljs-keyword">li</span>&gt;<br>  &lt;<span class="hljs-keyword">li</span>&gt;<span class="hljs-keyword">list</span> three&lt;/<span class="hljs-keyword">li</span>&gt;<br>&lt;/ol&gt;<br></code></pre></div></td></tr></table></figure>
<p><strong>其中无序列表的标记可以使用 +、- 或 *有序列表前的数字可以是乱序的</strong></p>
<h2 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h2><p>使用一个单独行里的三个或以上 *、- 来生产一条水平分割线，它们之间可以有空格。<br><strong>Markdown:</strong></p>
<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-comment">-----</span><br></code></pre></div></td></tr></table></figure>

<h2 id="预览："><a href="#预览：" class="headerlink" title="预览："></a><strong>预览：</strong></h2><p><strong>对应的HTML:</strong></p>
<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;hr/&gt;</span><br></code></pre></div></td></tr></table></figure>
<h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>反斜线\用于插入在 Markdown 语法中有特殊作用的字符。<br>特殊字符包括：</p>
<figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">\<br>`<br><span class="hljs-bullet">*<br></span>_<br>&#123;&#125;<br>[]<br>()<br><span class="hljs-section">#</span><br><span class="hljs-bullet">+<br></span><span class="hljs-bullet">-<br></span>.<br>!<br></code></pre></div></td></tr></table></figure>
<p><strong>Markdown:</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">这是<span class="hljs-strong">*演示*</span>文本<br>这是\<span class="hljs-strong">*演示\*</span>文本<br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong><br>这是<em>演示</em>文本<br>这是*演示*文本</p>
<h2 id="嵌入HTML"><a href="#嵌入HTML" class="headerlink" title="嵌入HTML"></a>嵌入HTML</h2><p>Markdown 标记语言的目的不是替代 HTML，也不是发明一种更便捷的插入 HTML 标签的方式。它对应的只是 HTML 标签的一个很小的子集。</p>
<p>对于那些没有办法用 Markdown 语法来对应的 HTML 标签，直接使用 HTML 来写就好了。</p>
<h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><strong>Markdown:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">这就是~~删除线~~<br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong><br>这就是<del>删除线</del></p>
<h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p>在上面的代码块语法基础上，在第一组 ``` 之后添加代码的语言，如 ‘javascript’ 或 ‘js’，即可将代码标记为 JavaScript：</p>
<p><strong>预览：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'window loaded'</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。<br><strong>Markdown:</strong></p>
<figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">name <span class="hljs-string">| age</span><br>---- <span class="hljs-string">| ---</span><br>LearnShare <span class="hljs-string">| 12</span><br>Mike <span class="hljs-string">|  32</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong></p>
<table>
<thead>
<tr>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>LearnShare</td>
<td>12</td>
</tr>
<tr>
<td>Mike</td>
<td>32</td>
</tr>
</tbody></table>
<p>为了使Markdown更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外就不需要了）。</p>
<h2 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h2><p><strong>Markdown:</strong></p>
<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[ ]</span> <span class="hljs-selector-tag">Eat</span><br><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[x]</span> <span class="hljs-selector-tag">Code</span><br>  <span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[x]</span> <span class="hljs-selector-tag">HTML</span><br>  <span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[x]</span> <span class="hljs-selector-tag">CSS</span><br>  <span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[x]</span> <span class="hljs-selector-tag">JavaScript</span><br><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[ ]</span> <span class="hljs-selector-tag">Sleep</span><br></code></pre></div></td></tr></table></figure>
<p><strong>预览：</strong></p>
<ul>
<li><input disabled="" type="checkbox"> Eat</li>
<li><input checked="" disabled="" type="checkbox"> Code<ul>
<li><input checked="" disabled="" type="checkbox"> HTML</li>
<li><input checked="" disabled="" type="checkbox"> CSS</li>
<li><input checked="" disabled="" type="checkbox"> JavaScript</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Sleep</li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>分享</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
